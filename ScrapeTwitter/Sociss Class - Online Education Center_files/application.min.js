"use strict";var ApplicationConfiguration=function(){return{applicationModuleName:"SOCISS-CLASS",applicationModuleVendorDependencies:["ngResource","ngSanitize","ui.router","angular-loading-bar","ngAnimate","ngTouch","ui.bootstrap","toastr","ngMessages","angularFileUpload","timer","ngImgCrop"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module("SOCISS-CLASS").requires.push(moduleName)}}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider","$logProvider","$uibModalProvider",function($locationProvider,$httpProvider,$logProvider,$uibModalProvider){$httpProvider.defaults.withCredentials=!0,$uibModalProvider.options.animation=!1,$uibModalProvider.options.animation=!1,$uibModalProvider.options.backdrop="static",$uibModalProvider.options.keyboard=!1,$locationProvider.html5Mode({enabled:!0,requireBase:!1}).hashPrefix("!"),$logProvider.debugEnabled(!0),$httpProvider.interceptors.push("authInterceptor"),$httpProvider.interceptors.push("csrfRequestInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(function($rootScope,$state,Authentication,$transitions,$exceptionHandler){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.socissAPI=window.socissAPI,Authentication.user&&Authentication.user.id&&Authentication.getUserProfile().then(function(user){Authentication.user=user}),$transitions.onStart({},function($transition){var toState=$transition.to(),toParams=$transition.params("to");if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;if(-1!==toState.data.roles.indexOf("*")?allowed=!0:toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role))return allowed=!0,!0}),!allowed)return void 0!==Authentication.user&&"object"==typeof Authentication.user?$transition.router.stateService.target("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)})}}),$transitions.onError({},function(trans){trans.error()}),$transitions.onSuccess({},function($transition){var fromParams=$transition.params("from"),fromState=$transition.from(),toState=$transition.to();toState.data&&!toState.data.preventScrollToTop&&setTimeout(function(){window.scrollTo(0,0)},100),storePreviousState(fromState,fromParams)}),$rootScope.$on("$routeChangeError",function(event,current,previous,rejection){var destination=current&&(current.title||current.name||current.loadedTemplateUrl)||"unknown target";rejection.msg})}),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(){function exceptionConfig($provide){$provide.decorator("$exceptionHandler",extendExceptionHandler)}function extendExceptionHandler($injector){return function(exception,cause){var toastr=$injector.get("toastr"),$window=$injector.get("$window"),_=$window._;(exception||cause)&&(exception.status&&-1===exception.status?_showTimes<=3&&(_showTimes++,toastr.error("You have problem with internet connection.","Has Error !",{progressBar:!0,timeOut:3e4})):toastr.error(getErrorMessage(exception,_),"Has Error !",{progressBar:!0,timeOut:3e4}))}}function getErrorMessage(err,_){var bodyError,_strErr=err.toString();_strErr.startsWith("Possibly unhandled rejection: ")&&(_strErr=_strErr.substring("Possibly unhandled rejection: ".length));try{return bodyError=JSON.parse(_strErr),_.get(bodyError,"data.message")||_.get(bodyError,"data")||_.get(bodyError,"details")||_.get(bodyError,"message","Something error !")}catch(err){return _strErr||"Something error !"}}var _showTimes=0;angular.module(ApplicationConfiguration.applicationModuleName).config(exceptionConfig),exceptionConfig.$inject=["$provide"],extendExceptionHandler.$inject=["$injector"]}(),ApplicationConfiguration.registerModule("challenge",["core"]),ApplicationConfiguration.registerModule("core",["dragularModule","ui.tinymce","http-auth-interceptor"]),ApplicationConfiguration.registerModule("course"),ApplicationConfiguration.registerModule("game-crossword"),ApplicationConfiguration.registerModule("game-vocabulary"),ApplicationConfiguration.registerModule("guessing-word"),ApplicationConfiguration.registerModule("open-question",["core"]),ApplicationConfiguration.registerModule("organization",["core"]),ApplicationConfiguration.registerModule("question",["core"]),ApplicationConfiguration.registerModule("quiz",["core"]),ApplicationConfiguration.registerModule("social-posts",["user"]),ApplicationConfiguration.registerModule("team"),ApplicationConfiguration.registerModule("user"),function(){function RoutesConfigs($stateProvider,RouteResolverProvider){}angular.module("challenge").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider","RouteResolverProvider"]}(),function(){function Controller($window,ModalItems){var vm=this;!function(){if(!ModalItems.classes)throw new Error("Missing class list.");vm.classes=ModalItems.classes}()}angular.module("challenge").controller("ActiveChallengeController",Controller),Controller.$inject=["$window","ModalItems"]}(),function(){function Controller($window,$uibModal){var vm=this,transactionId=$window.transaction_id+"",challengeTypeCode=$window.challenge_type_code+"";vm.templateURL="",function(){if(!transactionId)throw new Error("transaction_id not found.");if(!challengeTypeCode)throw new Error("challenge_type_code not found.");vm.templateURL=pageURLs[challengeTypeCode]}()}angular.module("challenge").controller("ChallengeEvaluationController",Controller),Controller.$inject=["$window","$uibModal"];var pageURLs={SUPER_QUIZ:"modules/quiz/client/views/quiz-solution.client.view.html",OPEN_QUESTION:"modules/open-question/client/views/open-question-evaluate.client.view.html",GUESSING_WORD:"",GAME_VOCABULARY:""}}(),function(){function Controller($window,ProblemService,Authentication,$uibModal,$location){function doChallenge(){ProblemService.getProblemForDoChallenge({problem_id:problem_id,user_id:user_id}).$promise.then(function(problem){var options={problem_id:problem_id,user_id:user_id};if(0===problem.classes.length)throw new Error("You must join course with access code first.");if(1===problem.classes.length)return options.class_id=problem.classes[0].class_id,redirectToDoChallengePage(options);openActiveChallengeModal(problem).result.then(function(selectClass){selectClass&&(options.class_id=selectClass.class_id,redirectToDoChallengePage(options))})})}function openActiveChallengeModal(problem){return $uibModal.open({templateUrl:"modules/challenge/client/views/active-challenge.modal.client.view.html",controller:"ActiveChallengeController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return problem}}})}function redirectToDoChallengePage(options){var redirect_to="/challenge/do?problem_id="+options.problem_id;options.user_id&&(redirect_to+="&user_id="+options.user_id),options.class_id&&(redirect_to+="&class_id="+options.class_id),$location.url(redirect_to),$window.location.reload()}var vm=this,problem_id=$window.problem_id,user_id=Authentication.user.id;vm.doChallenge=doChallenge,function(){if(!problem_id)throw new Error("problem_id not found.")}()}angular.module("challenge").controller("ChallengeIndexController",Controller),Controller.$inject=["$window","ProblemService","Authentication","$uibModal","$location"]}(),function(){function Controller($window){var vm=this,transactionId=$window.transaction_id+"",challengeTypeCode=$window.challenge_type_code+"";vm.templateURL="",function(){if(!transactionId)throw new Error("transaction_id not found.");if(!challengeTypeCode)throw new Error("challenge_type_code not found.");vm.templateURL=pageURLs[challengeTypeCode]}()}angular.module("challenge").controller("ChallengeSolutionController",Controller),Controller.$inject=["$window"];var pageURLs={SUPER_QUIZ:"modules/quiz/client/views/quiz-solution.client.view.html",OPEN_QUESTION:"modules/open-question/client/views/open-question-solution.client.view.html",GUESSING_WORD:"",GAME_VOCABULARY:""}}(),function(){function Controller(ChallengeCategoryService,ModalItems){function selectCategory(category){vm.templateURL=pageURLs[category.code]}var vm=this;vm.selectCategory=selectCategory,vm.templateURL="",function(){window.problem_id=ModalItems.problemId,ChallengeCategoryService.query(function(categories){vm.categories=categories})}()}angular.module("challenge").controller("CreateChallengeModalController",Controller),Controller.$inject=["ChallengeCategoryService","ModalItems"];var pageURLs={SUPER_QUIZ:"modules/quiz/client/views/quiz-management.client.view.html",OPEN_QUESTION:"modules/open-question/client/views/open-question-management.client.view.html",GAME_VOCABULARY:"modules/game-vocabulary/client/views/admin/game-vocabulary-create.modal.client.view.html",GUESSING_WORD:""}}(),function(){function Controller($window){var vm=this,transactionId=$window.transaction_id+"",challengeTypeCode=$window.challenge_type_code+"";vm.templateURL="",function(){if(!transactionId)throw new Error("transaction_id not found.");if(!challengeTypeCode)throw new Error("challenge_type_code not found.");vm.templateURL=pageURLs[challengeTypeCode]}()}angular.module("challenge").controller("DoChallengeController",Controller),Controller.$inject=["$window"];var pageURLs={SUPER_QUIZ:"modules/quiz/client/views/quiz-challenge.client.view.html",OPEN_QUESTION:"modules/open-question/client/views/open-question-challenge.client.view.html",GAME_VOCABULARY:"modules/game-vocabulary/client/views/player/game-vocabulary-player.client.view.html",GUESSING_WORD:""}}(),function(){function Controller(ModalItems){var vm=this;vm.templateURL="",function(){window.module_id=ModalItems.moduleId,vm.templateURL=pageURLs[ModalItems.challengeTypeCode]}()}angular.module("challenge").controller("EditChallengeModalController",Controller),Controller.$inject=["ModalItems"];var pageURLs={SUPER_QUIZ:"modules/quiz/client/views/quiz-management.client.view.html",OPEN_QUESTION:"modules/open-question/client/views/open-question-management.client.view.html",GAME_VOCABULARY:"modules/game-vocabulary/client/views/admin/game-vocabulary-create.modal.client.view.html",GUESSING_WORD:""}}(),function(){function APIService($resource,$rootScope){return $resource($rootScope.socissAPI+"/challenge/:id",{id:"@id"},{update:{method:"PUT"},getUserChallenges:{url:$rootScope.socissAPI+"/challenge/me",method:"GET",isArray:!0},getTransaction:{url:$rootScope.socissAPI+"/challenge-transaction/:transaction_id",method:"GET"}})}function Service($rootScope,ApplicationModals,_,$state,$resource,Authentication,ProblemService){function createChallenge(data){if(!data.problemId)throw new Error("problem_id is required.");if(!data.moduleId)throw new Error("module_id is required.");if(!data.challengeTypeCode)throw new Error("challenge_type_code is required.");return $resource($rootScope.socissAPI+"/challenge").save({problem_id:data.problemId,module_id:data.moduleId,challenge_type_code:data.challengeTypeCode}).$promise}var services={};return services.createChallenge=createChallenge,services}angular.module("challenge").service("ChallengeService",Service).factory("ChallengeAPIService",APIService),APIService.$inject=["$resource","$rootScope"],Service.$inject=["$rootScope","ApplicationModals","_","$state","$resource","Authentication","ProblemService"]}(),function(){function Controller(AppService){var vm=this;!function(){AppService.getTopCourses(function(courses){0!==courses.length&&(vm.top1=courses.shift(),vm.courses=courses)})}()}angular.module("core").component("popularCoursesBox",function(){return{templateUrl:"modules/core/client/views/popular-courses-box.client.component.html",controller:Controller,controllerAs:"vm"}}()),Controller.$inject=["AppService"]}(),function(){function Controller(SocialPostService){var vm=this;!function(){SocialPostService.getTopSocialPosts(function(posts){0!==posts.length&&(vm.top1=posts.shift(),vm.top3=posts.slice(0,3),vm.posts=posts.slice(3))})}()}angular.module("core").component("popularPostsBox",function(){return{templateUrl:"modules/core/client/views/popular-posts-box.client.component.html",controller:Controller,controllerAs:"vm"}}()),Controller.$inject=["SocialPostService"]}(),function(){function Controller(AppService){var vm=this;!function(){AppService.getTopPopularResources({limit:15},function(resources){vm.resources=resources})}()}angular.module("core").component("popularResourcesBox",function(){return{templateUrl:"modules/core/client/views/popular-resources-box.client.component.html",controller:Controller,controllerAs:"vm"}}()),Controller.$inject=["AppService"]}(),function(){function Controller(ResourceTrackingService,$timeout){function active(){loadResourceStatistics(vm.resourceId,vm.resourceName)}function loadResourceStatistics(id,name){ResourceTrackingService.get({resource_id:id,resource_name:name},function(track){track&&track.value?vm.track=track:vm.track.value={views:0,likes:0,comments:0,scores:0}})}var vm=this;vm.track={},$timeout(function(){active()},0)}angular.module("core").component("statisticsBox",function(){return{templateUrl:"modules/core/client/templates/statistics-box.client.component.html",controller:Controller,controllerAs:"vm",bindings:{resourceId:"<",resourceName:"<"}}}()),Controller.$inject=["ResourceTrackingService","$timeout"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("root",{url:"",views:{"@":{templateUrl:"modules/core/client/views/layout.client.view.html"},"main@root":{templateUrl:"modules/core/client/views/index.client.view.html"},"sidebar@root":{templateUrl:"modules/core/client/views/main-sidebar.client.view.html"}},data:{displayName:"Home"}}).state("notifications",{url:"/profile/notifications",views:{"@":{template:'<div class="container"><div ui-view="main"></div></div>'},"main@notifications":{templateUrl:"modules/core/client/views/notification.client.view.html",controller:"NotificationController",controllerAs:"vm"}}}).state("messages",{url:"/profile/messages",views:{"@":{template:'<div class="container"><div ui-view="main"></div></div>'},"main@messages":{templateUrl:"modules/core/client/views/messages/messages.client.view.html",controller:"MessageController",controllerAs:"vm"}}}).state("messages.detail",{url:"/:id",views:{"main@messages":{templateUrl:"modules/core/client/views/messages/message-detail.client.view.html",controller:"MessageController",controllerAs:"vm"}}}).state("notFound",{url:"/notFound",templateUrl:"modules/core/client/views/errors/404.client.view.html"}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/errors/403.client.view.html"}).state("about",{parent:"root",url:"/about",views:{"main@root":{templateUrl:"modules/core/client/views/about.client.view.html"}},data:{displayName:"About"}}).state("contact",{parent:"root",url:"/contact",views:{"main@root":{templateUrl:"modules/core/client/views/contact.client.view.html"}},data:{displayName:"Contact"}}).state("FAQs",{parent:"root",url:"/FAQs",views:{"main@root":{templateUrl:"modules/core/client/views/FAQs.client.view.html"}},data:{displayName:"FAQs"}}).state("support",{parent:"root",url:"/support",views:{"main@root":{templateUrl:"modules/core/client/views/support.client.view.html"}},data:{displayName:"Support"}})}]),angular.module("core").run(["Menus",function(Menus){Menus.addMenu("main-sidebar",{title:"Sociss Class",state:"root",roles:["*"]}),Menus.addMenuItem("main-sidebar",{title:"Contact",state:"contact",icon:"fa fa-envelope-o"}),Menus.addMenuItem("main-sidebar",{title:"About",state:"about",roles:["*"],icon:"fa fa-id-card-o"}),Menus.addMenuItem("main-sidebar",{title:"Support",state:"support",roles:["*"],icon:"fa fa-users"}),Menus.addMenuItem("main-sidebar",{title:"FAQs",state:"FAQs",roles:["*"],icon:"fa fa-question-circle-o"})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("search",{parent:"root",url:"/search",views:{"main@root":{templateUrl:"modules/core/client/views/searchs/search.client.view.html",controller:"SearchController",controllerAs:"vm"},"main@search":{templateUrl:"modules/core/client/views/searchs/search-home.client.view.html"}},data:{displayName:"Search"}}).state("search.result",{url:"?q",views:{"main@search":{templateUrl:"modules/core/client/views/searchs/search-result.client.view.html"}},data:{displayName:"All"}}).state("search.result.course",{url:"/course",views:{"content@search.result":{templateUrl:"modules/core/client/views/searchs/search-course-result.client.view.html"}},data:{displayName:"Courses"}}).state("search.result.lesson",{url:"/lesson",views:{"content@search.result":{templateUrl:"modules/core/client/views/searchs/search-lesson-result.client.view.html"}},data:{displayName:"Lessons"}}).state("search.result.post",{url:"/post",views:{"content@search.result":{templateUrl:"modules/core/client/views/searchs/search-post-result.client.view.html"}},data:{displayName:"Posts"}}).state("search.result.user",{url:"/user",views:{"content@search.result":{templateUrl:"modules/core/client/views/searchs/search-user-result.client.view.html"}},data:{displayName:"Users"}})}]),function(){function RunFunction($rootScope,ApplicationModals){$rootScope.tinymceOptions={convert_urls:!1,height:400,max_height:450,theme:"modern",image_dimensions:!0,image_class_list:[{title:"Responsive",value:"img-responsive"}],plugins:["advlist lists autosave code codesample link image","charmap print preview hr anchor contextmenu directionality table","emoticons template textcolor colorpicker media fullscreen","searchreplace wordcount textpattern autolink","insertdatetime media table paste toc"],templates:[{title:"Sample Template",description:"This Is Sample Format Of Lesson Content."}],codesample_languages:[{text:"HTML/XML",value:"markup"},{text:"JavaScript",value:"javascript"},{text:"CSS",value:"css"},{text:"PHP",value:"php"},{text:"Ruby",value:"ruby"},{text:"Python",value:"python"},{text:"Java",value:"java"},{text:"C",value:"c"},{text:"C#",value:"csharp"},{text:"C++",value:"cpp"}],setup:function(editor){editor.addButton("insertMediaButton",{text:"Insert Media",icon:!1,onclick:function(){ApplicationModals.openInsertMediaModal().result.then(function(_image){if(_image){var img=(editor.getDoc(),editor.dom.createHTML("img",{title:_image.originalname,src:_image.large.url||_image.url,id:_image.id,name:_image.originalname,class:"img-responsive"}));editor.execCommand("mceInsertContent",!1,img)}})}})},textpattern_patterns:[{start:"*",end:"*",format:"italic"},{start:"**",end:"**",format:"bold"},{start:"#",format:"h1"},{start:"##",format:"h2"},{start:"###",format:"h3"},{start:"####",format:"h4"},{start:"#####",format:"h5"},{start:"######",format:"h6"},{start:"1. ",cmd:"InsertOrderedList"},{start:"* ",cmd:"InsertUnorderedList"},{start:"- ",cmd:"InsertUnorderedList"}],contextmenu:"formatselect | insertMediaButton paste | link image inserttable | cell row column deletetable",toolbar:["formatselect | codesample insertMediaButton undo redo | bold italic | alignleft aligncenter alignright alignjustify |","bullist numlist outdent indent paste searchreplace| link image media | code fullscreen"]},$rootScope.simpleTinyMCEconfigs=angular.copy($rootScope.tinymceOptions),$rootScope.simpleTinyMCEconfigs.toolbar=["insertMediaButton link image codesample"],$rootScope.simpleTinyMCEconfigs.menu=!1,$rootScope.simpleTinyMCEconfigs.menubar=!1,$rootScope.simpleTinyMCEconfigs.height=450}angular.module(ApplicationConfiguration.applicationModuleName).run(RunFunction)}(),angular.module("core").controller("CoreController",["Authentication","Menus","$rootScope","ApplicationModals","authService","$window","$location","$state","_",function(Authentication,Menus,$rootScope,ApplicationModals,authService,$window,$location,$state,_){function sendMessageToUser(_user){ApplicationModals.openModalSendMessageToUser(_user)}function openLessonContentModal(lessonId){ApplicationModals.openLessonContentModal(lessonId)}var vm=this;vm.user=Authentication.user,vm.menu=Menus.getMenu("main-sidebar"),$rootScope.sendMessageToUser=sendMessageToUser,$rootScope.openLessonContentModal=openLessonContentModal,$rootScope.$on("event:auth-loginRequired",function(){Authentication.refreshToken().then(function(user){Authentication.user=user,authService.loginConfirmed("success",function(config){return config.headers.Authorization="Bearer "+Authentication.user.accessToken,config})}).catch(function(){authService.loginCancelled();var redirect_to=_.get($state,"previous.href")||_.get(window,"location.pathname");redirect_to?$location.url("/auth/v2/token/refresh?redirect_to="+redirect_to):$location.url("/auth/v2/token/refresh"),$window.location.reload()})})}]),function(){function Controller($scope,ResolveItems){var vm=this;if(vm.interval=5e3,!ResolveItems)throw new Error("ResolveItems.images and active is required.");vm.images=ResolveItems.images||[],vm.active=function(imageSelected){return vm.images.findIndex(function(_image){return imageSelected.id===_image.id})}(ResolveItems.active)}angular.module("core").controller("GalleryModalController",Controller),Controller.$inject=["$scope","ResolveItems"]}(),function(){function Controller($scope,$uibModal,images){function openGalleryModal(_imageSelected){$uibModal.open({templateUrl:"/modules/core/client/views/gallerys/gallery-modal.client.tmpl.html",controller:"GalleryModalController",controllerAs:"vm",windowTopClass:"gallery-modal",resolve:{ResolveItems:function(){return{images:vm.images,active:_imageSelected}}}})}var vm=this;vm.openGalleryModal=openGalleryModal,vm.images=images||[]}angular.module("core").controller("GalleryController",Controller),Controller.$inject=["$scope","$uibModal","images"]}(),function(){function Controller(toastr,$resource,$rootScope,Utilities){function createQuestion(){if(vm.question.content&&vm.question.answer){Utilities.sessionStorageManager.setValue("question_author_name",vm.question.author);$resource($rootScope.socissAPI+"/gamequestion").save(vm.question,function(res){toastr.success("Câu hỏi đã được lưu thành công.","Cảm ơn bạn rất nhiều")})}}function loadQuestions(){$resource($rootScope.socissAPI+"/gamequestion").query({limit:25,sort:"createdAt DESC"},function(questions){vm.questions=questions})}var vm=this;vm.question={},vm.questions=[],vm.createQuestion=createQuestion,function(){loadQuestions(),vm.question.author=Utilities.sessionStorageManager.getValue("question_author_name")}()}angular.module("core").controller("GameQuestionController",Controller),Controller.$inject=["toastr","$resource","$rootScope","Utilities"]}(),angular.module("core").controller("HeaderController",["Authentication",function(Authentication){function onInitHeader(){}var vm=this;vm.user=Authentication.user,vm.onInitHeader=onInitHeader}]),function(){function Controller($scope,FileUploader,toastr){function handleFileSelect(event){if(event){var file=event.target.files[0],reader=new FileReader;vm.originalFile=file,reader.onload=function(event){$scope.$apply(function($scope){vm.originalImage=event.target.result})},reader.readAsDataURL(file)}}function doUploadImage(){if(0!==vm.croppedImage.length){var _fileItem=new FileUploader.FileItem(uploader,{}),_fBlob=dataURItoBlob(vm.croppedImage);_fileItem._file=_fBlob,_fileItem.file.name=vm.originalFile.name,_fileItem.file.type=vm.originalFile.type,_fileItem.file.size=_fBlob.size,_fileItem.file.lastModified=vm.originalFile.lastModified,_fileItem.file.lastModifiedDate=vm.originalFile.lastModifiedDate,uploader.queue.push(_fileItem),uploader.uploadAll()}}function dataURItoBlob(dataURI){for(var binary=atob(dataURI.split(",")[1]),mimeString=dataURI.split(",")[0].split(":")[1].split(";")[0],array=[],i=0;i<binary.length;i++)array.push(binary.charCodeAt(i));return new Blob([new Uint8Array(array)],{type:mimeString})}var vm=this;vm.croppedImage="",vm.originalImage="",vm.handleFileSelect=handleFileSelect,vm.doUploadImage=doUploadImage;var uploader=$scope.uploader=new FileUploader({alias:"image",url:"/images/upload",queueLimit:1,withCredentials:!0});uploader.onErrorItem=function(fileItem,response,status,headers){var _dataErr={message:fileItem.file.name+" Has error !",data:response.message||response};toastr.error(_dataErr.data,_dataErr.message)},uploader.onSuccessItem=function(fileItem,response,status,headers){200!==status&&201!==status||$scope.$close(response)}}angular.module("core").controller("ImageUploadModalController",Controller),Controller.$inject=["$scope","FileUploader","toastr"]}(),function(){function Controller($scope,FileUploader,toastr){var uploader=$scope.uploader=new FileUploader({alias:"image",url:"/images/upload"});uploader.filters.push({name:"syncFilter",fn:function(item){return-1!=="|jpg|png|jpeg|gif|".indexOf("|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|")}}),uploader.onBeforeUploadItem=function(item){item.formData.push({msg:"Upload Item."})},uploader.onErrorItem=function(fileItem,response,status,headers){var _dataErr={message:fileItem.file.name+" Has error !",data:response.message||response};toastr.error(_dataErr.data,_dataErr.message)},uploader.onCompleteAll=function(){toastr.success("All images has uploaded","Successfully")}}angular.module("core").controller("ImagesUploadController",Controller),Controller.$inject=["$scope","FileUploader","toastr"]}(),function(){function Controller($scope,ImageService,Authentication,_){function initInserMediaModal(){getUserImages().then(function(_images){for(var i=0;i<_images.length;i++)_images[i].previewUrl=getImagePreviewUrl(_images[i]);return _images}).then(function(_images){vm.images=_images})}function selectImage(_image){$scope.$close(_image)}function getImagePreviewUrl(_image){for(var _sizes=["thumb.url","small.url","medium.url","large.url","url"],i=0;i<_sizes.length;i++)if(""!==_.get(_image,_sizes[i],""))return _.get(_image,_sizes[i]);return""}function getUserImages(){var body={author:Authentication.user.id,limit:0};return ImageService.query(body).$promise}var vm=this;vm.images=[],vm.initInserMediaModal=initInserMediaModal,vm.selectImage=selectImage}angular.module("core").controller("InserMediaModalController",Controller),Controller.$inject=["$scope","ImageService","Authentication","_"]}(),function(){function Controller($scope,receiver,MessageService,Authentication,$location,$window,$timeout,toastr){function sendMessage(_user,_content,_title){if(_user&&_content){var _msg={to:_user._id||_user.id||_user,title:_title||"Message from "+_user.fullName,content:_content,authorUsername:Authentication.user.username,authorFullName:Authentication.user.fullName,author:Authentication.user.id,receiverUsername:_user.username};MessageService.save(_msg,function(){toastr.success("Please wait for a reply","Send Message Success"),$scope.$close()})}}var vm=this;vm.receiver=receiver,vm.sendMessage=sendMessage,$timeout(function(){if(!Authentication.user){var _redirect_to=$window.location.pathname;return $location.url("/api/user/oauth/v2/signin?redirect_to="+_redirect_to),$window.location.reload(),void $scope.$close()}},0)}angular.module("core").controller("MessageBoxController",Controller),Controller.$inject=["$scope","receiver","MessageService","Authentication","$location","$window","$timeout","toastr"]}(),function(){function Controller($scope,MessageService,$interval,_,$rootScope,Authentication,Utilities,toastr,$stateParams,NotificationService){function initMessagePage(){loadMore()}function loadMore(){var _query={limit:limitResults,skip:Math.ceil(vm.messages.length/limitResults)*limitResults};return MessageService.getUserMessages(_query,function(_messages){return _.forEach(_messages,function(_msg){_msg.isNew=checkAndIncrementNumberNew(_msg)}),vm.messages=vm.messages.concat(_messages),_messages}).$promise}function checkAndIncrementNumberNew(_message){var _lastReply=_message.replies[_message.replies.length-1],_isNeedInc=!1,_curUsername=Authentication.user.username;return _lastReply||_message.receiverUsername!==_curUsername||0!==_message.status||(_isNeedInc=!0),_lastReply&&_lastReply.receiverUsername===_curUsername&&!_lastReply.seen&&(_isNeedInc=!0),_isNeedInc&&(vm.noNewMessages++,$scope.$parent.noNewMessages++),_isNeedInc}function decrementNoNewMessage(){vm.noNewMessages--,$scope.$parent.noNewMessages--}function replyMessage(_message,_msg){if(_msg){var _receiverUsername,_authorImageUrl=_.get(Authentication,"user.profileImage.thumb.url")||_.get(Authentication,"user.profileImage.url")||"";_receiverUsername=Authentication.user.username===_message.receiverUsername?_message.authorUsername:_message.receiverUsername;var _reply={content:_msg,author:Authentication.user.id,authorFullName:Authentication.user.fullName,authorUsername:Authentication.user.username,authorImageUrl:_authorImageUrl,receiverUsername:_receiverUsername,createdAt:new Date,seen:!1,id:Utilities.randomString(8,"Aa#")};return _message.replies||(_message.replies=[]),_message.replies.push(_reply),_message.status=0,updateMessage(_message).then(function(_msg){return toastr.success("Reply Completed","Successfully"),sendNotication(_msg),_msg})}}function sendNotication(_message){if(_message){var _authorImageUrl=_.get(Authentication,"user.profileImage.thumb.url")||_.get(Authentication,"user.profileImage.url")||"",_to=_message.author.id||_message.author;_to===Authentication.user.id&&(_to=_message.to.id||_message.to);var _notification={content:Authentication.user.fullName+" replied your message "+_message.title||"",to:_to,source:{username:Authentication.user.username,fullName:Authentication.user.fullName,imageUrl:_authorImageUrl},target:{href:"/profile/messages/"+_message.id}};return NotificationService.save(_notification)}}function markMessageSolved(_message){if(_message)return _message.status=1,updateMessage(_message).then(function(_msg){return toastr.success("Solved Message Completed","Successfully"),_msg})}function markSeenMessage(_message){for(var _needUpdate=!1,_curUsername=Authentication.user.username,i=0;i<_message.replies.length;i++){var _reply=_message.replies[i];_reply.receiverUsername!==_curUsername||_reply.seen||(_reply.seen=!0,_needUpdate=!0)}if(_message.status=1,0===_message.status||_needUpdate)return updateMessage(_message).then(function(_res){return decrementNoNewMessage(),_message.isNew=!1,_res})}function updateMessage(_message){var _messageCopy=angular.copy(_message);return _messageCopy.author=_messageCopy.author.id||_messageCopy.author,_messageCopy.to=_messageCopy.to.id||_messageCopy.to,MessageService.update(_messageCopy,function(_updatedMsg){return _updatedMsg}).$promise}function initMessageDetailPage(){return MessageService.get({id:$stateParams.id},function(_msg){return $scope.message=_msg,_msg}).$promise}var vm=this,limitResults=10;vm.messages=[],vm.loggedUser=Authentication.user,vm.markSeenMessage=markSeenMessage,$scope.$parent.noNewMessages=vm.noNewMessages=0,vm.initMessagePage=initMessagePage,vm.initMessageDetailPage=initMessageDetailPage,vm.loadMore=loadMore,vm.replyMessage=replyMessage,vm.markMessageSolved=markMessageSolved,$scope.$on("$destroy",function(){})}angular.module("core").controller("MessageController",Controller),Controller.$inject=["$scope","MessageService","$interval","_","$rootScope","Authentication","Utilities","toastr","$stateParams","NotificationService"]}(),function(){function Controller($scope,NotificationService,$interval,_,$rootScope,toastr){function initNotificationPage(){loadMore()}
function loadMore(){var _query={limit:limitResults,skip:Math.ceil(vm.notifications.length/limitResults)*limitResults};return NotificationService.getUserNotifications(_query,function(_notifications){return _.forEach(_notifications,function(_no){checkAndIncrementNumberNew(_no)}),vm.notifications=vm.notifications.concat(_notifications),_notifications}).$promise}function checkAndIncrementNumberNew(_notification){return _notification.seen||(vm.noNewNotifications++,$scope.$parent.noNewNotifications++),angular.copy(vm.noNewNotifications)}function decrementNumberNew(){return vm.noNewNotifications--,$scope.$parent.noNewNotifications--,angular.copy(vm.noNewNotifications)}function readNotification(_notification){return!_notification||_notification.seen?null:(_notification.seen=!0,NotificationService.update(_notification,function(_res){return decrementNumberNew(),_notification=_res,_res}).$promise)}var vm=this,limitResults=10;vm.notifications=[],$scope.$parent.noNewNotifications=vm.noNewNotifications=0,vm.initNotificationPage=initNotificationPage,vm.loadMore=loadMore,vm.readNotification=readNotification,$scope.$on("$destroy",function(){})}angular.module("core").controller("NotificationController",Controller),Controller.$inject=["$scope","NotificationService","$interval","_","$rootScope","toastr"]}(),function(){function Controller($scope,ResourceTrackingService,Authentication){function likeContent(isLike){vm.like=isLike,saveReviewContent(function(){vm.currentStep=2})}function submitComment(_comment){vm.comment=_comment,saveReviewContent(function(){vm.currentStep=4})}function saveReviewContent(cb){ResourceTrackingService.save({action:"vote_resource",resource_id:getReviewerID(),resource_name:getReviewerResouceName(),data:{rate:vm.rate||1,comment:vm.comment,like:vm.like,resource_id:vm.resourceId,resource_name:vm.resourceName}},function(res){cb&&cb(res)})}function getReviewerID(){return Authentication.user&&Authentication.user.id?Authentication.user.id:Authentication.randomSessionId}function getReviewerResouceName(){return Authentication.user&&Authentication.user.id?"user":"anonymous_user"}var vm=this;vm.currentStep=1,vm.rate=0,vm.likeContent=likeContent,vm.submitComment=submitComment,$scope.$watch("vm.rate",function(newValue){newValue&&saveReviewContent(function(){vm.currentStep=3})})}angular.module("core").component("reviewBox",function(){return{templateUrl:"modules/core/client/views/review-box-component.client.view.html",controller:Controller,controllerAs:"vm",bindings:{resourceId:"<",resourceName:"<"}}}()),Controller.$inject=["$scope","ResourceTrackingService","Authentication"]}(),function(){function Controller($stateParams,$state,SearchService,_,AppService){function initSearchHomePage(){AppService.getTopPopularResources({limit:30},function(resources){vm.resources=resources})}function initSearchResultPage(){var _keyword=$stateParams.q;_keyword?SearchService.searchByKeyword({q:_keyword,limit:limitResults},function(_result){_result&&(vm.result=_result),vm.result.users||(vm.result.users=[]),vm.result.courses||(vm.result.courses=[]),vm.result.posts||(vm.result.posts=[]),vm.result.lessons||(vm.result.lessons=[])}):$state.go("search")}function initSearchCoursePage(){var body={q:vm.keyword||"",limit:limitResults,skip:0};SearchService.searchCourses(body,function(results){vm.courses=results})}function initSearchUserPage(){var body={q:vm.keyword||"",limit:limitResults,skip:0};SearchService.searchUsers(body,function(results){vm.users=results})}function initSearchLessonPage(){var body={q:vm.keyword||"",limit:limitResults,skip:0};SearchService.searchLessons(body,function(results){vm.lessons=results})}function initSearchPostsPage(){var body={q:vm.keyword||"",limit:limitResults,skip:0};SearchService.searchPosts(body,function(results){vm.posts=results})}function doSearch(_keyword){_keyword&&0!==_keyword.length&&$state.go("search.result",{q:_keyword.trim()},{notify:!1,reload:!0})}function loadMoreCourses(){var body={q:vm.keyword||"",limit:limitResults,skip:Math.ceil(vm.courses.length/limitResults)*limitResults};SearchService.searchCourses(body,function(results){vm.courses=vm.courses.concat(results)})}function loadMoreUsers(){var body={q:vm.keyword||"",limit:limitResults,skip:Math.ceil(vm.users.length/limitResults)*limitResults};SearchService.searchUsers(body,function(results){vm.users=vm.users.concat(results)})}function loadMoreLessons(){var body={q:vm.keyword||"",limit:limitResults,skip:Math.ceil(vm.lessons.length/limitResults)*limitResults};SearchService.searchLessons(body,function(results){vm.lessons=vm.lessons.concat(results)})}function loadMorePosts(){var body={q:vm.keyword||"",limit:limitResults,skip:Math.ceil(vm.posts.length/limitResults)*limitResults};SearchService.searchPosts(body,function(results){vm.posts=vm.posts.concat(results)})}var vm=this,limitResults=20;vm.searchHashtags=["angularjs","free course","iot","lesson iot","node js","computer vision"],vm.users=[],vm.courses=[],vm.lessons=[],vm.posts=[],vm.result={users:[],courses:[]},vm.keyword=$stateParams.q||"",vm.doSearchByKeyword=doSearch,vm.initSearchHomePage=initSearchHomePage,vm.initSearchResultPage=initSearchResultPage,vm.initSearchCoursePage=initSearchCoursePage,vm.initSearchUserPage=initSearchUserPage,vm.initSearchLessonPage=initSearchLessonPage,vm.initSearchPostsPage=initSearchPostsPage,vm.loadMoreCourses=loadMoreCourses,vm.loadMoreUsers=loadMoreUsers,vm.loadMorePosts=loadMorePosts,vm.loadMoreLessons=loadMoreLessons}angular.module("core").controller("SearchController",Controller),Controller.$inject=["$stateParams","$state","SearchService","_","AppService"]}(),function(){function Controller(UserPrivilegeService){var vm=this,services=UserPrivilegeService;!function(){services.getUserPrivileges().then(function(_privileges){return vm.privileges=_privileges,_privileges})}()}angular.module("core").controller("ShareWithMeController",Controller),Controller.$inject=["UserPrivilegeService"]}(),function(){function Controller($scope,FileUploader,toastr){var uploader=$scope.uploader=new FileUploader({alias:"image",url:"/images/upload",queueLimit:1,withCredentials:!0});uploader.onErrorItem=function(fileItem,response,status,headers){var _dataErr={message:fileItem.file.name+" Has error !",data:response.message||response};toastr.error(_dataErr.data,_dataErr.message)},uploader.onSuccessItem=function(fileItem,response,status,headers){200===status||201===status?$scope.$close(response):toastr.error(response,response.message)}}angular.module("core").controller("SingleImageUploadModalController",Controller),Controller.$inject=["$scope","FileUploader","toastr"]}(),function(){function Controller(ModalItems,SearchService){function search(searchText){SearchService.searchUsers({q:searchText}).$promise.then(function(users){vm.users=filterSelectedUsers(users)})}function selectUser(selectedIndex){vm.selectedUsers.push(vm.users[selectedIndex]),vm.users.splice(selectedIndex,1)}function filterSelectedUsers(users){for(var results=[],i=0;i<users.length;i++)(function(user){return-1!==vm.selectedUsers.findIndex(function(item){return item.username===user.username})})(users[i])||results.push(users[i]);return results}var vm=this;vm.selectedUsers=ModalItems.selectedUsers||[],vm.users=[],vm.search=search,vm.selectUser=selectUser}angular.module("core").controller("UserSelectModalController",Controller),Controller.$inject=["ModalItems","SearchService"]}(),function(){function directive(Authentication,CommentService,$rootScope,Utilities,NotificationService){function linkFunc($scope,el,attr,ctrl){function addComment(){if(vm.commentMessage&&0!==vm.commentMessage.length){var _msg=getCommentModel();return _msg.content=vm.commentMessage,CommentService.save(_msg,function(_comment){return vm.commentMessage="",_comment.replies=[],vm.comments.push(_comment),Utilities.doHightlightCode(),$scope.onComment({comment:_comment,discussionId:$scope.discussionId}),_comment}).$promise}}function addSubComment(_comment,_content){if(_content&&0!==_content.length){var _msg=getCommentModel();return _msg.content=_content,_msg.parentSlug=_comment.slug,CommentService.save(_msg,function(_subComment){return _comment.replies.push(_subComment),Utilities.doHightlightCode(),sendNotication(_comment),$scope.onComment({comment:_comment,discussionId:$scope.discussionId}),_subComment}).$promise}}function sendNotication(_comment){var _notification={content:Authentication.user.fullName+" replied your comment.",to:_comment.author.id||_comment.author,source:{username:Authentication.user.username,fullName:Authentication.user.fullName},target:{href:_comment.source?_comment.source.href:"/profile"}};return NotificationService.save(_notification).$promise.catch(function(err){})}function getCommentModel(){return{authorUsername:Authentication.user.username||"Guest",authorFullName:Authentication.user.fullName||"Guest",author:Authentication.user.id,discussionId:$scope.discussionId,source:{href:location.href,pathname:location.pathname,origin:location.origin,host:location.host,hostname:location.hostname,hash:location.hash}}}var vm=ctrl;vm.tinyMCEconfigs=$rootScope.tinymceOptions,vm.tinyMCEconfigs.toolbar=["insertMediaButton link image codesample"],vm.tinyMCEconfigs.menu=!1,vm.tinyMCEconfigs.menubar=!1,vm.authentication=Authentication,vm.comments=[],vm.addSubComment=addSubComment,vm.addComment=addComment,function(){var _query={discussionId:$scope.discussionId,limit:!1};CommentService.getComments(_query,function(_comments){return vm.comments=_comments,Utilities.doHightlightCode(),_comments}).$promise}()}return{restrict:"EA",templateUrl:"/modules/core/client/templates/comment-box.tmpl.client.html",scope:{discussionId:"@",onComment:"&"},link:linkFunc,controller:Controller,controllerAs:"vm"}}function Controller($scope){}angular.module("core").directive("commentBox",directive),directive.$inject=["Authentication","CommentService","$rootScope","Utilities","NotificationService"],Controller.$inject=["$scope"]}(),angular.module("question").directive("copyAble",[function(){function copyTextToClipboard(text){var textArea=document.createElement("textarea");textArea.style.position="fixed",textArea.style.top=0,textArea.style.left=0,textArea.style.width="2em",textArea.style.height="2em",textArea.style.padding=0,textArea.style.border="none",textArea.style.outline="none",textArea.style.boxShadow="none",textArea.style.background="transparent",textArea.value=text,document.body.appendChild(textArea),textArea.select();try{document.execCommand("copy")}catch(err){}document.body.removeChild(textArea)}return{restrict:"AE",scope:{copyText:"@"},link:function($scope,$element){$element.bind("click",function(){$scope.copyText=$scope.copyText||"",copyTextToClipboard($scope.copyText)})}}}]),angular.module("core").directive("failBackSrc",function(){return{link:function(scope,iElement,iAttrs){iElement.bind("error",function(){iAttrs.$set("src",iAttrs.failBackSrc)})}}}),function(){function directive(){function linkFunc(scope,element,attrs){if(!attrs.socOnChange||""===attrs.socOnChange)throw new Error("attrs.socOnChange is undefined.");var handleFunction=scope.$eval(attrs.socOnChange);element.bind("change",handleFunction)}return{restrict:"EA",link:linkFunc}}angular.module("core").directive("socOnChange",directive)}(),function(){function directive($window){function linkFunc(scope,element,attributes){function onLoadFile(event){var img=new Image;img.src=event.target.result,img.onload=LoadAndRenderImage.bind(img)}function LoadAndRenderImage(){var ratio=Math.min(defaultRatioSize/this.width,defaultRatioSize/this.height),width=params.width||this.width*ratio,height=params.height||this.height*ratio;canvas.attr({width:width,height:height}),canvas[0].getContext("2d").drawImage(this,0,0,width,height)}if(helper.support){var defaultRatioSize=150,params=scope.$eval(attributes.ngThumb);if(helper.isFile(params.file)&&helper.isImage(params.file)){var canvas=element.find("canvas"),reader=new FileReader;reader.onload=onLoadFile,reader.readAsDataURL(params.file)}}}var helper={support:!(!$window.FileReader||!$window.CanvasRenderingContext2D),isFile:function(item){return angular.isObject(item)&&item instanceof $window.File},isImage:function(file){return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf("|"+file.type.slice(file.type.lastIndexOf("/")+1)+"|")}};return{restrict:"A",template:"<canvas/>",link:linkFunc}}angular.module("core").directive("ngThumb",directive),directive.$inject=["$window"]}(),function(){function directive($timeout){function linkFunc(scope,el,attr){!0===scope.$last&&$timeout(function(){scope.$emit(attr.onFinishRender)},0)}return{restrict:"EA",link:linkFunc}}angular.module("core").directive("onFinishRender",directive),directive.$inject=["$timeout"]}(),function(){function directive(){return{restrict:"EA",templateUrl:"modules/core/client/directives/sociss-share/templates/_lesson-privilege-item.tmpl.html",scope:{privilege:"=privilegeData"},controller:Controller,controllerAs:"vm",bindToController:!0}}function Controller($scope,UserPrivilegeService){function updatePrivilege(){return UserPrivilegeService.update(vm.privilege,function(_res){return vm.privilege=_res,_res}).$promise}function removePrivilege(){return UserPrivilegeService.remove(vm.privilege,function(_res){return vm.privilege.removed=!0,_res}).$promise}var vm=this;vm.updatePrivilege=updatePrivilege,vm.removePrivilege=removePrivilege}angular.module("core").directive("socLessonPrivilege",directive),Controller.$inject=["$scope","UserPrivilegeService"]}(),function(){function directive($compile){function linkFunc(scope,el,attr,ctrl){var _template;switch(ctrl.objectName){case"lesson":_template='<soc-lesson-privilege privilege-data="vm.privilege"/>';break;case"course":_template='<soc-course-privilege privilege-data="vm.privilege"/>';break;case"problem":_template='<soc-problem-privilege privilege-data="vm.privilege"/>';break;default:throw new Error(ctrl.objectName+" is not support for sharing.")}el.replaceWith($compile(_template)(scope))}return{restrict:"EA",scope:{objectName:"@",privilege:"=privilegeData"},controller:Controller,controllerAs:"vm",link:linkFunc,bindToController:!0}}function Controller($scope,UserPrivilegeService){}angular.module("core").directive("socPrivilegeItem",directive),directive.$inject=["$compile"],Controller.$inject=["$scope","UserPrivilegeService"]}(),function(){function directive(){return{restrict:"EA",templateUrl:"modules/core/client/directives/sociss-share/templates/_problem-privilege-item.tmpl.html",scope:{privilege:"=privilegeData"},controller:Controller,controllerAs:"vm",bindToController:!0}}function Controller($scope,UserPrivilegeService){function updatePrivilege(){return UserPrivilegeService.update(vm.privilege,function(_res){return vm.privilege=_res,_res}).$promise}function removePrivilege(){return UserPrivilegeService.remove(vm.privilege,function(_res){return vm.privilege.removed=!0,_res}).$promise}var vm=this;vm.updatePrivilege=updatePrivilege,vm.removePrivilege=removePrivilege}angular.module("core").directive("socProblemPrivilege",directive),Controller.$inject=["$scope","UserPrivilegeService"]}(),function(){function directive(){return{restrict:"EA",templateUrl:"modules/core/client/directives/sociss-share/templates/sociss-share.client.tmpl.html",scope:{objectName:"@",objectId:"@"},controller:Controller,controllerAs:"vm",bindToController:!0}}function Controller($scope,UserPrivilegeService,UserService){function loadPrivilegesData(){var _queryData={objectName:vm.objectName,objectId:vm.objectId};return services.query(_queryData).then(function(_privileges){return vm.privileges=_privileges,_privileges})}function share($valid){if($valid){var _conditions={id:vm.receiver};UserService.getByUsername(_conditions).$promise.then(function(_user){if(_user.id=_user.id||_user.user_id,!_user.id)throw vm.messages="User with "+vm.receiver+" not found.",new Error("Not found user with username "+vm.receiver);return _user}).then(function(_receiver){var _promise,_configs={};switch(vm.objectName){case"lesson":_promise=services.shareLesson(vm.objectId,_receiver.id,_configs);break;case"course":_promise=services.shareCourse(vm.objectId,_receiver.id,_configs);break;case"problem":_promise=services.shareProblem(vm.objectId,_receiver.id,_configs)}return _promise.then(function(_privilege){return _privilege.receiver=_receiver,_privilege})}).then(function(_privilege){vm.privileges.push(_privilege)})}}var vm=this,services=UserPrivilegeService;vm.$postLink=loadPrivilegesData,vm.privileges=[],vm.receiver=null,vm.objectId=null,vm.share=share}angular.module("core").directive("socShare",directive),directive.$inject=[],Controller.$inject=["$scope","UserPrivilegeService","UserService"]}(),function(){var module;try{module=angular.module("core")}catch(err){module=angular.module("core",["ui.router"])}module.directive("uiBreadcrumbs",["$rootScope","$interpolate","$state","$timeout",function($rootScope,$interpolate,$state,$timeout){return{restrict:"E",templateUrl:function(elem,attrs){return attrs.templateUrl||"modules/core/client/directives/templates/uiBreadcrumbs.tpl.html"},scope:{displaynameProperty:"@",abstractProxyProperty:"@?"},link:function(scope){function updateBreadcrumbsArray(){for(var workingState,displayName,breadcrumbs=[],currentState=$state.$current;currentState&&""!==currentState.name;)workingState=getWorkingState(currentState),workingState&&(!1===(displayName=getDisplayName(workingState))||stateAlreadyInBreadcrumbs(workingState,breadcrumbs)||breadcrumbs.push({displayName:displayName,route:workingState.name})),currentState=currentState.parent;breadcrumbs.reverse(),scope.breadcrumbs=breadcrumbs}function getWorkingState(currentState){var proxyStateName,workingState=currentState;return!0===currentState.abstract&&(void 0!==scope.abstractProxyProperty?(proxyStateName=getObjectValue(scope.abstractProxyProperty,currentState),proxyStateName?(workingState=angular.copy($state.get(proxyStateName)))&&(workingState.locals=currentState.locals):workingState=!1):workingState=!1),workingState}function getDisplayName(currentState){var propertyReference;return scope.displaynameProperty?!1!==(propertyReference=getObjectValue(scope.displaynameProperty,currentState))&&(void 0===propertyReference?currentState.name:(void 0!==currentState.locals?currentState.locals.globals:currentState,$interpolate(propertyReference)(currentState))):currentState.name}function getObjectValue(objectPath,context){var i,propertyArray=objectPath.split("."),propertyReference=context;for(i=0;i<propertyArray.length;i++){if(!angular.isDefined(propertyReference[propertyArray[i]]))return;propertyReference=propertyReference[propertyArray[i]]}return propertyReference}function stateAlreadyInBreadcrumbs(state,breadcrumbs){var i,alreadyUsed=!1;for(i=0;i<breadcrumbs.length;i++)breadcrumbs[i].route===state.name&&(alreadyUsed=!0);return alreadyUsed}scope.breadcrumbs=[],""!==$state.$current.name&&updateBreadcrumbsArray();var eventListener=$rootScope.$on("$viewContentLoaded",function(){updateBreadcrumbsArray()});scope.$on("$destroy",function(){eventListener()})}}}])}(),angular.module("core").filter("compileHTML",function(){var coverHTMLToText=function(htmlString){var html=htmlString;return html=html.replace(/<style([\s\S]*?)<\/style>/gi,""),html=html.replace(/<script([\s\S]*?)<\/script>/gi,""),html=html.replace(/<\/div>/gi,"\n"),html=html.replace(/<\/li>/gi,"\n"),html=html.replace(/<li>/gi,"  *  "),html=html.replace(/<\/ul>/gi,"\n"),html=html.replace(/<\/p>/gi,"\n"),html=html.replace(/<br\s*[\/]?>/gi,"\n"),html=html.replace(/<[^>]+>/gi,"")};return function(text){return text?coverHTMLToText(text):""}}),angular.module("core").filter("compileSafeHTML",function($sce){var coverHTMLToText=function(htmlString){return $sce.getTrustedHtml(htmlString)};return function(text){return text?coverHTMLToText(text):""}}),angular.module("core").filter("toTrustedHTML",["$sce",function($sce){return function(text){return text?$sce.trustAsHtml(text):""}}]),angular.module("core").filter("addBreakLine",function(){var addBreakLine=function(text){return text.replace(/\r?\n/g,"<br />")};return function(text){return text?addBreakLine(text):""}}),function(){function Filter($window){function FilterFilter(text){return text?$window.encodeURIComponent(text):""}return FilterFilter}angular.module("core").filter("encodeURIComponent",Filter)}(),angular.module("core").filter("toUnixTime",function(){return function(timeString){if(timeString){var _time=new Date(timeString);return moment(_time.getTime()).add(1,"seconds").toDate().getTime()}}}),angular.module("core").factory("authInterceptor",["$q","$location","Authentication","$window","$state",function($q,$location,Authentication,$window,$state){return{request:function(config){return config.headers=config.headers||{},Authentication.user&&(config.headers.Authorization="Bearer "+Authentication.user.accessToken),config}}}]),angular.module("core").factory("csrfRequestInterceptor",["$q","$injector","$rootScope",function($q,$injector,$rootScope){return{request:function(config){var CSRF_URL=$rootScope.socissAPI+"/csrfToken";return config.url===CSRF_URL||config.method,config}}}]),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/api";return $resource(_baseUrl,{},{getTopCourses:{method:"GET",url:_baseUrl+"/getTopCourses",isArray:!0},getTopUsers:{method:"GET",url:_baseUrl+"/getTopUsers",isArray:!0},getTopPopularResources:{method:"GET",url:_baseUrl+"/top/resources",isArray:!0}})}angular.module("core").factory("AppService",Service),Service.$inject=["$resource","$rootScope"]}(),angular.module("core").factory("ApplicationModals",["$uibModal","_",function($uibModal,_){function openUserSelectModal(selectedUsers){return $uibModal.open({templateUrl:"modules/core/client/views/user-select-modal.client.view.html",controller:"UserSelectModalController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{selectedUsers:selectedUsers}}}})}function openChallengeEvaluationModal(transactionId){if(!transactionId)throw new Error("transaction_id is required for evaluating.");return $uibModal.open({templateUrl:"/api/challenge/evaluation-template/"+transactionId,windowClass:"modal-large",size:"lg"})}function openCreateChallengeModal(datas){return $uibModal.open({templateUrl:"modules/challenge/client/views/create-challenge.modal.client.view.html",controller:"CreateChallengeModalController",controllerAs:"vm",windowClass:"modal-large",size:"lg",resolve:{ModalItems:function(){return datas}}})}function openEditChallengeModal(datas){return $uibModal.open({templateUrl:"modules/challenge/client/views/edit-challenge.modal.client.view.html",controller:"EditChallengeModalController",controllerAs:"vm",windowClass:"modal-large",size:"lg",resolve:{ModalItems:function(){return datas}}})}function openSingleImageUploadModal(){return $uibModal.open({templateUrl:"modules/core/client/views/single-image-upload-modal.client.view.html",controller:"SingleImageUploadModalController",controllerAs:"vm",backdrop:"static",keyboard:!0,size:"lg"})}function openImageUploadModal(){return $uibModal.open({templateUrl:"modules/core/client/views/image-upload-modal.client.view.html",controller:"ImageUploadModalController",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg"})}function openModalSendMessageToUser(_user){if(!_user)throw new Error("Receiver was undefined.");return $uibModal.open({templateUrl:"modules/core/client/templates/message-box.tmpt.client.html",controller:"MessageBoxController",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg",resolve:{receiver:function(){return _user}}})}function openInsertMediaModal(){return $uibModal.open({templateUrl:"/modules/core/client/templates/insert-media-modal.tmpl.client.html",controller:"InserMediaModalController",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg"})}function openChallengeSelectionModal(){return $uibModal.open({templateUrl:"/modules/course/client/views/staff/modals/challenge-selection.client.tmpl.html",controller:"ChallengeSelectionCtrl",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg"})}function openLessonContentModal(lesonId){return $uibModal.open({templateUrl:"modules/course/client/views/staff/lesson/lesson-content.modal.client.view.html",controller:"LessonContentModalController",backdrop:"static",keyboard:!0,controllerAs:"vm",size:"lg",windowClass:"modal-large",resolve:{ModalItems:function(){return{id:lesonId}}}}).result.catch(function(res){})}function openLessonCreateAndUpdateModal(course,chapter,lesson){var ModalItems={course:{},chapter:{},lesson:{}};return angular.copy(course,ModalItems.course),angular.copy(chapter,ModalItems.chapter),angular.copy(lesson,ModalItems.lesson),$uibModal.open({templateUrl:"/modules/course/client/views/staff/modals/lesson-create-update.modal.html",controller:"LessonController",controllerAs:"vm",backdrop:"static",keyboard:!1,windowClass:"modal-large",size:"lg",resolve:{ModalItems:function(){return ModalItems}}})}function openPreviewQuestionModal(question){var questionInstance={};return angular.copy(question,questionInstance),$uibModal.open({templateUrl:"modules/question/client/views/question-preview.modal.client.view.html",controller:"QuestionPreviewController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",windowClass:"modal-large",resolve:{ModalItems:function(){return{question:questionInstance||null}}}})}function openQuizPreviewModal(quiz){var quizInstance={};return angular.copy(quiz,quizInstance),$uibModal.open({templateUrl:"/modules/quiz/client/views/modals/quiz-preview.modal.client.html",controller:"QuizPreviewController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",windowClass:"modal-large",resolve:{ModalItems:function(){return{quiz:quizInstance||null}}}})}function openUserProblemSelectionModal(){return $uibModal.open({templateUrl:"/modules/course/client/views/staff/modals/problem-selection.client.tmpl.html",controller:"ProblemSelectionModalCtrl",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",windowClass:"modal-large",resolve:{ModalItems:function(){return{}}}})}function openCourseCreateModal(params){return $uibModal.open({templateUrl:"/modules/course/client/views/staff/course-create.client.view.html",controller:"CourseCreateModelController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",resolve:{ModalItems:function(){return params}}})}var services={};return services.openLessonContentModal=openLessonContentModal,services.openLessonModal=openLessonCreateAndUpdateModal,services.openUserProblemSelectionModal=openUserProblemSelectionModal,services.openCourseCreateModal=openCourseCreateModal,services.openChallengeSelectionModal=openChallengeSelectionModal,services.openCreateChallengeModal=openCreateChallengeModal,services.openEditChallengeModal=openEditChallengeModal,services.openChallengeEvaluationModal=openChallengeEvaluationModal,services.openPreviewQuestionModal=openPreviewQuestionModal,services.openQuizPreviewModal=openQuizPreviewModal,services.openImageUploadModal=openImageUploadModal,services.openSingleImageUploadModal=openSingleImageUploadModal,services.openInsertMediaModal=openInsertMediaModal,services.openModalSendMessageToUser=openModalSendMessageToUser,services.openUserSelectModal=openUserSelectModal,services}]),angular.module("core").factory("Authentication",["$injector",function($injector){function refreshToken(){return $injector.get("$http")({method:"GET",url:"/auth/v2/token/refresh",params:{response_type:"json"}}).then(function(res){return res.data})}function getUserProfile(){var data=angular.copy(window.user);return $injector.get("$http")({method:"GET",url:$injector.get("$rootScope").socissAPI+"/api/user/oauth/v2/me",headers:{Authorization:"Bearer "+data.accessToken}}).then(function(res){return res.data.accessToken=data.accessToken,res.data})}return{user:function(){return angular.copy(window.user)}(),refreshToken:refreshToken,getUserProfile:getUserProfile,randomSessionId:function(){var Utilities=$injector.get("Utilities"),currentId=Utilities.sessionStorageManager.getValue("random_session_id");return currentId||(currentId=Utilities.generateUUID(),Utilities.sessionStorageManager.setValue("random_session_id",currentId)),currentId}()}}]),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/comment";return $resource($rootScope.socissAPI+"/comment/:id",{id:"@id"},{update:{method:"PUT"},getComments:{method:"GET",url:_baseUrl+"/getComments",isArray:!0}})}angular.module("core").factory("CommentService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){angular.module("http-auth-interceptor",["http-auth-interceptor-buffer"]).factory("authService",["$rootScope","httpBuffer",function($rootScope,httpBuffer){return{loginConfirmed:function(data,configUpdater){var updater=configUpdater||function(config){return config};$rootScope.$broadcast("event:auth-loginConfirmed",data),httpBuffer.retryAll(updater)},loginCancelled:function(data,reason){httpBuffer.rejectAll(reason),$rootScope.$broadcast("event:auth-loginCancelled",data)}}}]).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$rootScope","$q","httpBuffer",function($rootScope,$q,httpBuffer){return{responseError:function(rejection){var config=rejection.config||{};if(!config.ignoreAuthModule)switch(rejection.status){case 401:var deferred=$q.defer();return 1===httpBuffer.append(config,deferred)&&$rootScope.$broadcast("event:auth-loginRequired",rejection),deferred.promise;case 403:$rootScope.$broadcast("event:auth-forbidden",rejection)}return $q.reject(rejection)}}}])}]),angular.module("http-auth-interceptor-buffer",[]).factory("httpBuffer",["$injector",function($injector){function retryHttpRequest(config,deferred){function successCallback(response){deferred.resolve(response)}function errorCallback(response){deferred.reject(response)}$http=$http||$injector.get("$http"),$http(config).then(successCallback,errorCallback)}var $http,buffer=[];return{append:function(config,deferred){return buffer.push({config:config,deferred:deferred})},rejectAll:function(reason){if(reason)for(var i=0;i<buffer.length;++i)buffer[i].deferred.reject(reason);buffer=[]},retryAll:function(updater){for(var i=0;i<buffer.length;++i){var _cfg=updater(buffer[i].config);!1!==_cfg&&retryHttpRequest(_cfg,buffer[i].deferred)}buffer=[]}}}])}(),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="http-auth-interceptor"),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/image/:id",{id:"@id"},{update:{method:"PUT"}})}angular.module("core").factory("ImageService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function factory($window){return $window._}angular.module("core").factory("_",factory),factory.$inject=["$window"]}(),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin","student","lecturer"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],title:options.title||"",shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,icon:options.icon,
roles:null===options.roles||void 0===options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||void 0===options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/message";return $resource($rootScope.socissAPI+"/message/:id",{id:"@id"},{update:{method:"PUT"},getUserMessages:{method:"GET",url:_baseUrl+"/getUserMessages",isArray:!0,ignoreLoadingBar:!0}})}angular.module("core").factory("MessageService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/notification";return $resource($rootScope.socissAPI+"/notification/:id",{id:"@id"},{update:{method:"PUT"},getUserNotifications:{method:"GET",url:_baseUrl+"/getUserNotifications",isArray:!0,ignoreLoadingBar:!0}})}angular.module("core").factory("NotificationService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/post";return $resource($rootScope.socissAPI+"/post/:id",{id:"@id"},{update:{method:"PUT"},getPosts:{method:"GET",url:_baseUrl+"/getPosts",isArray:!0},getBySlug:{method:"GET",url:_baseUrl+"/getBySlug",isArray:!1}})}angular.module("core").factory("PostService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/track",{},{update:{method:"PUT"}})}angular.module("core").factory("ResourceTrackingService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/search",{},{searchByKeyword:{method:"GET",url:$rootScope.socissAPI+"/search",isArray:!1},searchUsers:{method:"GET",url:$rootScope.socissAPI+"/search/users",isArray:!0},searchCourses:{method:"GET",url:$rootScope.socissAPI+"/search/courses",isArray:!0},searchLessons:{method:"GET",url:$rootScope.socissAPI+"/search/lessons",isArray:!0},searchPosts:{method:"GET",url:$rootScope.socissAPI+"/search/posts",isArray:!0}})}angular.module("core").factory("SearchService",Service),Service.$inject=["$resource","$rootScope"]}(),angular.module("core").provider("Notification",function(){this.options={delay:5e3,startTop:10,startRight:10,verticalSpacing:10,horizontalSpacing:10,positionX:"right",positionY:"top",replaceMessage:!1,templateUrl:"angular-ui-notification.html"},this.setOptions=function(options){if(!angular.isObject(options))throw new Error("Options should be an object!");this.options=angular.extend({},this.options,options)},this.$get=["$timeout","$http","$compile","$templateCache","$rootScope","$injector","$sce","$q","$window",function($timeout,$http,$compile,$templateCache,$rootScope,$injector,$sce,$q,$window){var options=this.options,startTop=options.startTop,startRight=options.startRight,verticalSpacing=options.verticalSpacing,horizontalSpacing=options.horizontalSpacing,delay=options.delay,messageElements=[],isResizeBound=!1,notify=function(args,t){var deferred=$q.defer();return"object"!=typeof args&&(args={message:args}),args.scope=args.scope?args.scope:$rootScope,args.template=args.templateUrl?args.templateUrl:options.templateUrl,args.delay=angular.isUndefined(args.delay)?delay:args.delay,args.type=t||options.type||"",args.positionY=args.positionY?args.positionY:options.positionY,args.positionX=args.positionX?args.positionX:options.positionX,args.replaceMessage=args.replaceMessage?args.replaceMessage:options.replaceMessage,$http.get(args.template,{cache:$templateCache}).then(function(template){var scope=args.scope.$new();scope.message=$sce.trustAsHtml(args.message),scope.title=$sce.trustAsHtml(args.title),scope.t=args.type.substr(0,1),scope.delay=args.delay;var reposite=function(){for(var j=0,k=0,lastTop=startTop,lastRight=startRight,lastPosition=[],i=messageElements.length-1;i>=0;i--){var element=messageElements[i];if(args.replaceMessage&&i<messageElements.length-1)element.addClass("killed");else{var elHeight=parseInt(element[0].offsetHeight),elWidth=parseInt(element[0].offsetWidth),position=lastPosition[element._positionY+element._positionX],top=lastTop=position?0===j?position:position+verticalSpacing:startTop;top+elHeight>window.innerHeight&&(position=startTop,k++,j=0);var right=lastRight+k*(horizontalSpacing+elWidth);element.css(element._positionY,top+"px"),"center"===element._positionX?element.css("left",parseInt(window.innerWidth/2-elWidth/2)+"px"):element.css(element._positionX,right+"px"),lastPosition[element._positionY+element._positionX]=top+elHeight,j++}}},templateElement=$compile(template.data)(scope);templateElement._positionY=args.positionY,templateElement._positionX=args.positionX,templateElement.addClass(args.type),templateElement.bind("webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd click",function(e){e=e.originalEvent||e,("click"===e.type||"opacity"===e.propertyName&&e.elapsedTime>=1)&&(templateElement.remove(),messageElements.splice(messageElements.indexOf(templateElement),1),scope.$destroy(),reposite())}),angular.isNumber(args.delay)&&$timeout(function(){templateElement.remove()},args.delay);var offset=-(parseInt(templateElement[0].offsetHeight)+50);templateElement.css(templateElement._positionY,offset+"px"),messageElements.push(templateElement),angular.element(templateElement).css("position","fixed").css("z-index","9999"),angular.element(document.getElementsByTagName("body")).append(templateElement),scope._templateElement=templateElement,scope.kill=function(isHard){isHard?(messageElements.splice(messageElements.indexOf(scope._templateElement),1),scope._templateElement.remove(),scope.$destroy(),$timeout(reposite)):scope._templateElement.addClass("killed")},$timeout(reposite),isResizeBound||(angular.element($window).bind("resize",function(){$timeout(reposite)}),isResizeBound=!0),deferred.resolve(scope)},function(data){throw new Error("Template ("+args.template+") could not be loaded. "+data)}),deferred.promise};return notify.primary=function(args){return this(args,"primary")},notify.error=function(args){return this(args,"error")},notify.success=function(args){return this(args,"success")},notify.info=function(args){return this(args,"info")},notify.warning=function(args){return this(args,"warning")},notify.clearAll=function(){angular.forEach(messageElements,function(element){element.addClass("killed")})},notify}]}),angular.module("core").run(["$templateCache",function($templateCache){$templateCache.put("angular-ui-notification.html",'<div><div class="ui-notification"><h3 ng-show="title" ng-bind-html="title"></h3><div class="message" ng-bind-html="message"></div></div></div>')}]),function(){function Service($resource,$rootScope,Authentication){function getUserPrivileges(){return $resource(baseURL+"/privilege/share-with-me").query().$promise}function query(_body){return $resource(baseURL+"/privilege/user").query(_body).$promise}function shareProblem(_problem,_receiver,_configs){if(_configs=_configs||{allowEdit:!0},!_problem)throw new Error("Problem param is empty.");if(!_receiver)throw new Error("Receiver param is empty.");var _api=$resource(baseURL+"/share/problem"),_data=getDefaultUserPrivilegeObject();return _data.receiver=_receiver.id||_receiver,_data.problem=_problem.id||_problem,_data.permissions={allowEdit:_configs.allowEdit||!0},_api.save(_data,function(_userPrivilege){return _userPrivilege}).$promise}function shareLesson(_lesson,_receiver,_configs){if(_configs=_configs||{allowEdit:!0},!_lesson)throw new Error("Lesson param is empty.");if(!_receiver)throw new Error("Receiver param is empty.");var _api=$resource(baseURL+"/share/lesson"),_data=getDefaultUserPrivilegeObject();return _data.receiver=_receiver.id||_receiver,_data.lesson=_lesson.id||_lesson,_data.permissions={allowEdit:_configs.allowEdit||!0},_api.save(_data,function(_userPrivilege){return _userPrivilege}).$promise}function getDefaultUserPrivilegeObject(){return{receiver:"",permissions:{}}}var baseURL=$rootScope.socissAPI,APIResource=$resource(baseURL+"/userprivilege/:id",{id:"@id"},{update:{method:"PUT"}});return{query:query,shareLesson:shareLesson,shareProblem:shareProblem,remove:APIResource.remove,update:APIResource.update,getUserPrivileges:getUserPrivileges}}angular.module("core").service("UserPrivilegeService",Service),Service.$inject=["$resource","$rootScope","Authentication"]}(),angular.module("core").factory("Utilities",["$window","$timeout",function($window,$timeout){function doHightlightCode(){$timeout(function(){Prism.highlightAll()},0)}function randomString(length,chars){var mask="";chars.indexOf("a")>-1&&(mask+="abcdefghijklmnopqrstuvwxyz"),chars.indexOf("A")>-1&&(mask+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"),chars.indexOf("#")>-1&&(mask+="0123456789"),chars.indexOf("!")>-1&&(mask+="~`!@#$%^&*()_+-={}[]:\";'<>?,./|\\");for(var result="",i=length;i>0;--i)result+=mask[Math.floor(Math.random()*mask.length)];return result}var utilService={};return utilService.doHightlightCode=doHightlightCode,utilService.sessionStorageManager={setValue:function(key,value){$window.sessionStorage.setItem(key,JSON.stringify(value))},getValue:function(key){try{return JSON.parse($window.sessionStorage.getItem(key))}catch(error){return}},removeValue:function(key){try{$window.sessionStorage.removeItem(key)}catch(error){}}},utilService.generateUUID=function(){var r,chars="0123456789abcdef".split(""),uuid=[],rnd=Math.random;uuid[8]=uuid[13]=uuid[18]=uuid[23]="-",uuid[14]="4";for(var i=0;i<36;i++)uuid[i]||(r=0|16*rnd(),uuid[i]=chars[19===i?3&r|8:15&r]);return uuid.join("")},utilService.shuffleArray=function(array){array=array||[];for(var counter=array.length;counter>0;){var index=Math.floor(Math.random()*counter);counter--;var temp=array[counter];array[counter]=array[index],array[index]=temp}return array},utilService.randomString=randomString,utilService}]),function(){String.prototype.format=function(){for(var formatted=this,i=0;i<arguments.length;i++){var regexp=new RegExp("\\{"+i+"\\}","gi");formatted=formatted.replace(regexp,arguments[i])}return formatted},String.prototype.slugify=function(){return this.toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},String.prototype.unEscapeHTML=function(){var formatted=this;return formatted=formatted.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")}}(),function(){angular.module("course").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile.accessCode",{url:"/access-code",views:{"main@profile":{template:'<div ui-view="CodePage"/>',controller:"AccessCodeController",controllerAs:"vm"},"CodePage@profile.accessCode":{templateUrl:"modules/course/client/views/access-code/user-access-code-management.client.view.html",controller:"AccessCodeController",controllerAs:"vm"}},data:{roles:["admin","student","lecturer"],displayName:"Access Code Management"}})}])}(),function(){angular.module("course").config(["$stateProvider","RouteResolverProvider",function($stateProvider,RouteResolverProvider){$stateProvider.state("courses",{url:"/courses",controller:"ListCoursesController",controllerAs:"vm",templateUrl:"modules/course/client/views/list-courses.client.view.html"}).state("course-detail",{url:"/courses/:courseCode",views:{},data:{roles:["guest"],pageTitle:"Course Detail"}}).state("course-detail.join",{url:"/join",views:{"@":{templateUrl:"modules/course/client/views/join-course.client.view.html",controller:"JoinCourseController",controllerAs:"vm"}},resolve:{timeline:RouteResolverProvider.getTimeline},data:{roles:["guest"]}})}])}(),angular.module("course").run(["Menus",function(Menus){}]),function(){angular.module("course").config(["$stateProvider","RouteResolverProvider",function($stateProvider,RouteResolverProvider){var _baseView="modules/course/client/views";$stateProvider.state("course-learn",{abstract:!0,parent:"course-detail",data:{displayName:"Syllabus"}}).state("course-learn.activity",{url:"/activity",views:{"@":{templateUrl:_baseView+"/activity/course-activity.client.view.html",controller:"CourseActivityController",controllerAs:"vm"}},resolve:{course:RouteResolverProvider.getCourse},data:{displayName:"Activity"}}).state("course-learn.activity.post",{url:"/discussion?post",views:{"@":{templateUrl:_baseView+"/activity/post-detail.client.view.html",controller:"CourseActivityController",controllerAs:"vm"}},data:{displayName:"Post"}}).state("course-learn.course-results",{url:"/results",views:{"@":{templateUrl:_baseView+"/student/course/course-results.client.view.html",controller:"CourseResultController",controllerAs:"vm"},"main@course-learn.course-results":{templateUrl:_baseView+"/student/course/course-results-home.client.view.html"}},data:{roles:["student","admin","lecturer"],displayName:"Course Results"}})}])}(),function(){angular.module("course").config(["$stateProvider","RouteResolverProvider",function($stateProvider,RouteResolverProvider){$stateProvider.state("profile.courses",{url:"/courses",views:{"main@profile":{templateUrl:"modules/course/client/views/staff/course-manage.client.view.html"}},data:{roles:["*"],displayName:"Course Management"}}).state("profile.courses.detail",{url:"/:courseCode",resolve:{course:RouteResolverProvider.getCourse},views:{"main@profile":{templateUrl:"modules/course/client/views/staff/course-detail.client.view.html",controllerAs:"vm",controller:["$state","$stateParams",function($state,$stateParams){var vm=this;vm.$state=$state,vm.$stateParams=$stateParams}]},"main@profile.courses.detail":{templateUrl:"modules/course/client/views/staff/syllabus-manage.client.view.html",controller:"TimeLineController",controllerAs:"vm"}},data:{roles:["*"],displayName:"Course Detail"}}).state("profile.courses.detail.syllabus",{url:"",views:{"main@profile.courses.detail":{templateUrl:"modules/course/client/views/staff/syllabus-manage.client.view.html",controller:"TimeLineController",controllerAs:"vm"}},data:{roles:["*"],displayName:"Syllabus"}}).state("profile.courses.detail.submissions",{url:"/submissions",views:{"main@profile.courses.detail":{templateUrl:"modules/course/client/views/staff/problem-submission-manage.client.view.html",controller:"ProblemSubmissionManageController",controllerAs:"vm"}},data:{roles:["*"],displayName:"Submissions"}}).state("profile.courses.detail.classes",{resolve:{classItem:RouteResolverProvider.getClassByCode},url:"/classes",views:{"main@profile.courses.detail":{templateUrl:"modules/course/client/views/staff/class-management.client.view.html",controller:"ClassController",controllerAs:"vm"}},data:{roles:["*"],displayName:"Classes"}})}])}(),function(){angular.module("course").config(["$stateProvider",function($stateProvider){var _baseView="modules/course/client/views";$stateProvider.state("course-results",{parent:"profile",url:"/course/results",views:{"main@profile":{templateUrl:_baseView+"/student/course/course-results.client.view.html",controller:"CourseResultController",controllerAs:"vm"},"main@course-results":{templateUrl:_baseView+"/student/course/course-results-home.client.view.html"}},data:{roles:["student","admin","lecturer"],displayName:"Course Results"}}).state("course-results.detail",{url:"/:courseCode",views:{"main@course-results":{templateUrl:_baseView+"/student/course/course-results-detail.client.view.html"}},data:{roles:["student","admin","lecturer"],displayName:"Detail"}})}])}(),function(){angular.module("course").config(["$stateProvider","RouteResolverProvider",function($stateProvider,RouteResolverProvider){var _baseView="modules/course/client/views";$stateProvider.state("profile.lessons",{url:"/lessons/:slug",views:{"main@profile":{templateUrl:_baseView+"/staff/lesson/edit-lesson.client.view.html",controller:"LessonController",controllerAs:"vm"},"content@profile.lessons":{templateUrl:_baseView+"/staff/lesson/lesson-content.client.view.html"},"problems@profile.lessons":{templateUrl:_baseView+"/staff/lesson/lesson-problems.client.view.html"},"permisstions@profile.lessons":{templateUrl:_baseView+"/staff/lesson/lesson-permissions.client.view.html"}},data:{roles:["student","admin","lecturer"],displayName:"Lesson"}}).state("profile.problems",{url:"/problems/{problem}",views:{"main@profile":{template:'<div class="container" ng-init="vm.loadProblem()" ui-view="content"></div>',controller:"ProblemSolvingController",controllerAs:"vm"},"content@profile.problems":{templateUrl:_baseView+"/staff/problem/problem-create-update.client.view.html"}},data:{roles:["student","admin","lecturer"],displayName:"Problem"}})}])}(),function(){function Controller(AccessCodeService,Authentication){function initUserAccessCodePage(){var _body={user:Authentication.user.id,limit:!1};AccessCodeService.query(_body,function(_codes){vm.codes=_codes})}var vm=this;vm.code={},vm.initUserAccessCodePage=initUserAccessCodePage}angular.module("course").controller("AccessCodeController",Controller),Controller.$inject=["AccessCodeService","Authentication"]}(),function(){function Controller(Authentication,PostService,$rootScope,Utilities,course,_,$stateParams,$state,NotificationService,$timeout){function initPostDetailPage(){var _slug=$stateParams.post||"";return PostService.getBySlug({slug:_slug},function(_post){return vm.post=_post,_post}).$promise}function getPostURL(_post){if(_post){return $state.href("course-learn.activity.post",{post:_post.slug},{absolute:!0})}}function initActivityPage(){$timeout(function(){var _query={discussionId:_.get(course,"id"),limit:!1};return PostService.getPosts(_query,function(_posts){return vm.posts=_posts,Utilities.doHightlightCode(),_posts}).$promise},3e3)}function addPost(){if(vm.postMessage&&0!==vm.postMessage.length){var _msg={content:vm.postMessage,authorUsername:Authentication.user.username||"Guest",authorFullName:Authentication.user.fullName||"Guest",author:Authentication.user.id,source:{href:location.href,pathname:location.pathname,origin:location.origin,host:location.host,hostname:location.hostname,hash:location.hash},discussionId:_.get(course,"id")};return PostService.save(_msg,function(_post){return vm.postMessage="",vm.posts.push(_post),Utilities.doHightlightCode(),_post}).$promise}}function onUserComment(_comment,_discussionId){sendNotication(_comment,_discussionId)}function sendNotication(_comment,_postId){var _post=vm.posts.find(function(_post){return _post.id===_postId});if(_post){var _notification={content:_comment.authorFullName+" replied your post",to:_post.author.id||_post.author,source:{username:_comment.authorUsername,fullName:_comment.authorFullName},target:{href:getPostURL(_post)||_.get(_comment,"source.href")}};return NotificationService.save(_notification).$promise.catch(function(err){})}}var vm=this;vm.tinyMCEconfigs=$rootScope.tinymceOptions,vm.tinyMCEconfigs.toolbar=["insertMediaButton link image codesample"],vm.tinyMCEconfigs.menu=!1,vm.tinyMCEconfigs.menubar=!1,vm.tinyMCEconfigs.height=100,vm.tinyMCEconfigs.autoresize_min_height=100,vm.authentication=Authentication,vm.comments=[],vm.addPost=addPost,vm.initActivityPage=initActivityPage,vm.initPostDetailPage=initPostDetailPage,vm.getPostURL=getPostURL,vm.onUserComment=onUserComment}angular.module("course").controller("CourseActivityController",Controller),Controller.$inject=["Authentication","PostService","$rootScope","Utilities","course","_","$stateParams","$state","NotificationService","$timeout"]}(),function(){function Controller($scope,ChallengeAPIService){function onInitialChallengeSelectionModal(){ChallengeAPIService.getUserChallenges(function(response){vm.challenges=response})}function selectChallenge(index){var _challenge=vm.challenges[index];_challenge||$scope.$dismiss(new Error("Challenge at index "+index+" is undefined.")),ChallengeAPIService.copyChallenge({id:_challenge.id}).$promise.then(function(_newCopyChallnge){$scope.$close(_newCopyChallnge)})}var vm=this;vm.onInitialChallengeSelectionModal=onInitialChallengeSelectionModal,vm.selectChallenge=selectChallenge}angular.module("course").controller("ChallengeSelectionCtrl",Controller),Controller.$inject=["$scope","ChallengeAPIService"]}(),function(){function ChapterModalController(Authentication){}angular.module("course").controller("ChapterModalController",ChapterModalController),ChapterModalController.$inject=["Authentication"]}(),function(){function Controller(CourseService,_,course,$state,AccessCodeService,$q,TimeLineService){function checkingCoursePerrmissions(){CourseService.getUserPermissionsInCourse({course_id:vm.course.id}).$promise.then(function(permissions){vm.isCourseLecturer=hasPermission("course_lecturer",permissions)})}function hasPermission(permissionName,permissions){return-1!==permissions.findIndex(function(permission){return permission.permission_name===permissionName&&"granted"===permission.status})}function updateStudentListBySelectedClass(){var classId=vm.selectedClass?vm.selectedClass.id:null,courseId=vm.course.id;loadClassAccessCodes(classId).then(function(codes){vm.accessCodes=codes}),loadClassSyllabus(courseId,classId).then(function(syllabus){vm.classSyllabus=syllabus})}function loadManagedClassesByUser(){var parmas={course_id:course.id};return CourseService.getAllClassUserHasPermissionInCourse(parmas).$promise}function loadClassAccessCodes(classId){return classId?AccessCodeService.query({class:classId,isActive:!0}).$promise:$q.when([])}function loadClassSyllabus(courseId,classId){return TimeLineService.getClassTimeline({courseCode:courseId,classCode:classId,problem_status:"all"}).$promise}var vm=this;if(vm.course=course,vm.isCourseLecturer=!0,vm.$state=$state,!course&&!course.id)throw new Error("Course for class management page not found.");vm.selectedClass=null,vm.updateStudentListBySelectedClass=updateStudentListBySelectedClass,function(){loadManagedClassesByUser().then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0]||null,updateStudentListBySelectedClass()}),checkingCoursePerrmissions()}()}angular.module("course").controller("ClassController",Controller),Controller.$inject=["CourseService","_","course","$state","AccessCodeService","$q","TimeLineService"]}(),function(){function Controller($scope,ModalItems){function selectAndCloseModal(){for(var selected=[],i=0;i<vm.timeline.chapters.length;i++)for(var j=0;j<vm.timeline.chapters[i].lessons.length;j++)vm.timeline.chapters[i].lessons[j].selected&&selected.push(vm.timeline.chapters[i].lessons[j]);$scope.$close(selected)}var vm=this;vm.selectAndCloseModal=selectAndCloseModal,function(){vm.timeline=ModalItems.timeline}()}angular.module("course").controller("LessonSelectModalController",Controller),Controller.$inject=["$scope","ModalItems"]}(),angular.module("course").controller("CourseCreateModelController",["Authentication","$uibModalInstance","CourseService","ModalItems",function(Authentication,$uibModalInstance,CourseService,ModalItems){var controller=this;if(controller.model={course:{}},!ModalItems.organizationId)throw new Error("Missing organization ID.");controller.createCourse=function(isValid){if(!isValid)return"";controller.model.course.author=Authentication.user.id,controller.model.course.organization=ModalItems.organizationId,CourseService.save(controller.model.course,function(newCourse){$uibModalInstance.close(newCourse)})},controller.closeModal=function(){$uibModalInstance.close()}}]),function(){function Controller(Authentication,CourseService,_,$window,ResourceTrackingService){function incrementViewCount(courseId,info){ResourceTrackingService.save({action:"view_resource",resource_id:courseId,resource_name:"course",info:info})}function loadClassRanking(courseId,classId){CourseService.getClassRanking({course_id:courseId,class_id:classId,limit:30},function(ranks){vm.ranks=ranks})}function initCourseManagePage(){loadAllCourseOfUser(),loadAllUserJoinedCourse(),checkUserRoles()}function checkUserRoles(){var _roles=Authentication.user.roles||[];-1===_roles.indexOf("admin")&&-1===_roles.indexOf("lecturer")||(vm.isLecturer=!0)}function initCourseDetailPage(){var _timeline=$window.timeline||null;_timeline&&(vm.timeline=_timeline,vm.course=vm.timeline.course,incrementViewCount(vm.course.id,{name:vm.course.name,author:_.get(vm,"course.author.username"),courseCode:vm.course.courseCode}),vm.timeline&&vm.timeline.classId&&loadClassRanking(vm.course.id,vm.timeline.classId))}function loadAllCourseOfUser(){return CourseService.getAllCourseUserHasPermission(function(courses){vm.courses=courses})}function loadAllUserJoinedCourse(){return CourseService.getAllUserJoinedCourse(function(_accessCodes){return vm.accessCodes=_accessCodes,_accessCodes})}var vm=this;vm.isLecturer=!1,vm.initCourseManagePage=initCourseManagePage,vm.initCourseDetailPage=initCourseDetailPage}angular.module("course").controller("CourseController",Controller),Controller.$inject=["Authentication","CourseService","_","$window","ResourceTrackingService"]}(),function(){function Controller($scope,CourseService,Authentication,Utilities){var vm=this;!function(){CourseService.getAllCoursesSubmissions().$promise.then(function(_results){vm.results=_results})}()}angular.module("course").controller("CourseResultController",Controller),Controller.$inject=["$scope","CourseService","Authentication","Utilities"]}(),function(){function Controller($scope,Authentication,$stateParams,AccessCodeService,_,$location,$window){function doJoinCourse($valid){if($valid){var _body={username:Authentication.user.username,accessCode:vm.accessCode.trim().toUpperCase()};AccessCodeService.joinCourse(_body,function(_result){_result&&_result.id&&(vm.message="Join course successfully. Please reload page.",alert("You are join course success !. Go to profile page to see."))})}}function doCheckCode($valid){if(vm.message="",$valid){var _criteria={accessCode:vm.accessCode.trim().toUpperCase()};AccessCodeService.getByCode(_criteria,function(_code){if(!_code&&!_code.accessCode)return void alert("Not Found This Access Code.");vm.code=_code})}}var vm=this;Authentication.user||($location.url("/api/user/oauth/v2/signin"),$window.location.reload()),vm.timeline=_.get($scope,"$resolve.timeline"),vm.joinCourse=doJoinCourse,vm.doCheckCode=doCheckCode}angular.module("course").controller("JoinCourseController",Controller),Controller.$inject=["$scope","Authentication","$stateParams","AccessCodeService","_","$location","$window"]}(),function(){function CourseLearningController($scope,$log,Authentication,TimeLineService,$stateParams,CourseService,$state,ChallengeService,_,LessonService,$timeout,Utilities,Menus){function loadSyllabusTree(){TimeLineService.getTimeLinebyCourseCode({courseCode:$stateParams.courseCode}).$promise.then(function(timeline){vm.timeline=timeline,vm.course=vm.timeline.course})}function initCourseLearningPage(){loadSyllabusTree()}function initLessonPage(){loadLessonBookMarkIfExist()}function loadLessonBookMarkIfExist(){if(!$state.params.lesson)throw new Error("Not found lesson bookmark on URL.");var _query={id:$state.params.lesson};return LessonService.get(_query,function(_lesson){return vm.lesson=_lesson,Utilities.doHightlightCode(),_lesson})}function changeLesson(_chapter,_lesson){return vm.lesson=_lesson,updateURLQueryParams(_chapter,_lesson),LessonService.get({id:vm.lesson.id},function(_lesson){return vm.lesson=_lesson,Utilities.doHightlightCode(),_lesson})}function updateURLQueryParams(_chapter,_lesson){var params={courseCourse:vm.course.courseCode,lesson:_lesson.slug};$state.go("course-learn.lesson",params,{notify:!1,reload:!1})}function doProblem(_problem){$state.go("challenge",{courseCode:vm.course.courseCode,problem:_problem.slug},{notify:!1})}function gotoTopPage(){document.body.scrollTop=0,document.documentElement.scrollTop=0}var vm=this;vm.timeline=null,vm.course=null,vm.lesson=null,vm.initCourseLearningPage=initCourseLearningPage,vm.changeLesson=changeLesson,vm.doProblem=doProblem,vm.gotoTopPage=gotoTopPage,vm.initLessonPage=initLessonPage}angular.module("course").controller("CourseLearningController",CourseLearningController),CourseLearningController.$inject=["$scope","$log","Authentication","TimeLineService","$stateParams","CourseService","$state","ChallengeService","_","LessonService","$timeout","Utilities","Menus"]}(),function(){function Controller(ResourceTrackingService,$window){function incrementViewCount(lessonId,info){ResourceTrackingService.save({action:"view_resource",resource_id:lessonId,resource_name:"lesson",info:info})}!function(){$window.lesson_id&&incrementViewCount($window.lesson_id,{name:$window.lesson_name,author:$window.lesson_author,slug:$window.lesson_slug})}()}angular.module("course").controller("LearnLessonController",Controller),Controller.$inject=["ResourceTrackingService","$window"]}(),function(){function Controller($scope,LessonService,ModalItems){var vm=this,lesson_id=ModalItems.id;!function(){if(!lesson_id)throw new Error("lesson_id is undefined.");LessonService.get({id:lesson_id},function(lesson){vm.lesson=lesson})}()}angular.module("course").controller("LessonContentModalController",Controller),Controller.$inject=["$scope","LessonService","ModalItems"]}(),function(){function LessonController($scope,Authentication,LessonService,$uibModal,ApplicationModals,ProblemService,_,$window,$stateParams,toastr){function changeLessonImage(){ApplicationModals.openSingleImageUploadModal().result.then(function(_image){if(_image){var _data={id:vm.lesson.id,image:_image};LessonService.update(_data).$promise.then(function(_lesson){vm.lesson=_lesson})}})}function initLessonController(_lesson,_course){vm.lesson=_lesson,vm.course=_course}function doValidationModel(){if(!vm.lesson){if(!vm.course)throw new Error("Course param is required for create lesson.");if(!vm.chapter)throw new Error("Chapter param is required for create lesson.");$scope.$close()}}function prepareAndValidationData(){vm.lesson.id?LessonService.get({id:vm.lesson.id},function(res){vm.lesson=res}):(doValidationModel(),vm.lesson=new LessonService({chapter:vm.chapter.id||vm.chapter,course:vm.course.id||vm.course}))}function initEditLessonPage(){var _query={id:$stateParams.slug};return LessonService.get(_query,function(_res){return vm.lesson=_res,vm.course=vm.lesson.course,vm.chapter=vm.lesson.chapter,_res})}function submit(isValid){isValid&&(vm.lesson._id||vm.lesson.id?update():create())}function create(){return vm.lesson.author=Authentication.user.id,vm.lesson.courseCode=vm.course.courseCode,vm.lesson.$save(function(res){return isUsingModal?$scope.$close(res):toastr.success("Create new lesson.","Successfully"),res})}function update(){var _data=angular.copy(vm.lesson);return delete _data.problems,delete _data.chapter,delete _data.references,LessonService.update({id:_data.id},_data,function(res){
return isUsingModal?$scope.$close(res):toastr.success("Update lesson.","Successfully"),res}).$promise}var vm=this;vm.loggedUser=Authentication.user;var ModalItems=_.get($scope,"$resolve.ModalItems",{}),isUsingModal=$scope.$close&&$scope.$dismiss;vm.lesson=ModalItems.lesson,vm.chapter=ModalItems.chapter,vm.course=ModalItems.course,vm.init=initLessonController,vm.initModal=prepareAndValidationData,vm.initEditLessonPage=initEditLessonPage,vm.submit=submit,vm.changeLessonImage=changeLessonImage}angular.module("course").controller("LessonController",LessonController),LessonController.$inject=["$scope","Authentication","LessonService","$uibModal","ApplicationModals","ProblemService","_","$window","$stateParams","toastr"]}(),function(){function ControllerController(CourseService){function loadMoreCourses(){var body={limit:limitResults,skip:Math.ceil(vm.courses.length/limitResults)*limitResults};CourseService.query(body,function(results){vm.courses=vm.courses.concat(results)})}var vm=this,limitResults=30;vm.courses=[],vm.loadMoreCourses=loadMoreCourses,function(){CourseService.query({limit:limitResults,sort:"createdAt DESC"},function(courses){vm.courses=courses})}()}angular.module("course").controller("ListCoursesController",ControllerController),ControllerController.$inject=["CourseService"]}(),function(){function Controller($uibModal,_,$window){function initial(course,problems){vm.course=course,vm.problems=problems}function openProblemSolvingCreateOrUpdateModal(problem,selectedChapter){$uibModal.open({templateUrl:"/modules/course/client/views/staff/modals/problem-create-update.modal.html",controller:"ProblemSolvingController",controllerAs:"vm",windowClass:"modal-large",resolve:{ModalItems:function(){return{course:angular.copy(vm.course),problem:angular.copy(problem),selectedChapter:angular.copy(selectedChapter)}}}}).result.then(function(newProblem){if(newProblem)if(problem){var updateIndex=vm.problems.findIndex(function(item){return item.id===newProblem.id});-1!==updateIndex&&_.merge(vm.problems[updateIndex],newProblem)}else vm.problems.push(newProblem)})}function openUserProblemSelect(){alert("This feature not safe at the moment.")}function removeProblem(_problem){$window.confirm("Are you sure you want to delete ?")&&alert("At the moment not safe for delete problem.")}var vm=this;vm.initial=initial,vm.openUserProblemSelect=openUserProblemSelect,vm.openProblemSolvingModal=openProblemSolvingCreateOrUpdateModal,vm.removeProblem=removeProblem}angular.module("course").controller("ProblemManageController",Controller),Controller.$inject=["$uibModal","_","$window"]}(),function(){function Controller(ProblemSubmissionService,_,ApplicationModals,CourseService,course){function initSubmissionManagePage(){loadUserManagedClassList().then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0]||null,loadProblemSubmissionOfClass(vm.selectedClass)}),checkingCoursePerrmissions()}function checkingCoursePerrmissions(){CourseService.getUserPermissionsInCourse({course_id:vm.course.id}).$promise.then(function(permissions){vm.isCourseLecturer=hasPermission("course_lecturer",permissions)})}function hasPermission(permissionName,permissions){return-1!==permissions.findIndex(function(permission){return permission.permission_name===permissionName&&"granted"===permission.status})}function loadUserManagedClassList(){if(vm.course){var parmas={course_id:vm.course.id};return CourseService.getAllClassUserHasPermissionInCourse(parmas).$promise}}function loadProblemSubmissionOfClass(selectedClass){if(selectedClass&&selectedClass.id){var queryConditions={course_id:vm.course.id,class_id:selectedClass.id};ProblemSubmissionService.getClassSubmissions(queryConditions).$promise.then(function(responses){vm.submissions=responses})}}function doEvaluateProblem(submission){submission&&submission.transaction_id?ApplicationModals.openChallengeEvaluationModal(submission.transaction_id):alert("Missing transaction_id.")}var vm=this;vm.course=course,vm.selectedClass=null,vm.isCourseLecturer=!0,vm.initSubmissionManagePage=initSubmissionManagePage,vm.doEvaluateProblem=doEvaluateProblem,vm.loadProblemSubmissionOfClass=loadProblemSubmissionOfClass,initSubmissionManagePage()}angular.module("course").controller("ProblemSubmissionManageController",Controller),Controller.$inject=["ProblemSubmissionService","_","ApplicationModals","CourseService","course"]}(),function(){function Controller($scope,ChallengeCategoryService){function initPage(){getAllChallengeCategories()}function getAllChallengeCategories(){ChallengeCategoryService.query(function(categories){vm.categories=categories})}function selectCategory(selectedCategory){$scope.$close(selectedCategory)}function closeModal(){$scope.$close()}var vm=this;vm.initPage=initPage,vm.selectCategory=selectCategory,vm.closeModal=closeModal}angular.module("core").controller("ChallengeTypeSelectCtrl",Controller),Controller.$inject=["$scope","ChallengeCategoryService"]}(),function(){function Controller(LessonService,ProblemService,toastr,ApplicationModals,$window){function setProblemSelected(problemId){if(!(problemId=problemId||$window.problem_id))throw new Error("problem id is undefined.");ProblemService.get({id:problemId},function(problem){vm.problem=problem})}function searchLessons(){LessonService.query({where:{name:{contains:vm.searchText||""}},limit:15},function(lessons){vm.lessons=lessons})}function openViewLessonDetailModal(lesson){ApplicationModals.openLessonContentModal(lesson.id)}function addLessonToProblem(lesson){vm.problem.lessons=vm.problem.lessons||[],-1===findLessonIndex(vm.problem.lessons,lesson.id)?vm.problem.lessons.push({name:lesson.name,slug:lesson.slug,id:lesson.id}):alert("Lesson already selected.")}function removeLessonFromProblem(lesson){vm.problem.lessons=vm.problem.lessons||[];var index=findLessonIndex(vm.problem.lessons,lesson.id);-1!==index&&vm.problem.lessons.splice(index,1)}function findLessonIndex(colection,lessonId){if(!colection)throw new Error("colection is undefined.");return colection.findIndex(function(item){return item.id===lessonId})}function saveProblemData(){if(!vm.problem)throw new Error("vm.problem is undefined.");ProblemService.update({id:vm.problem.id,lessons:vm.problem.lessons,name:vm.problem.name},function(){toastr.success("Done save problem data.","Successfully")})}var vm=this;vm.setProblemSelected=setProblemSelected,vm.searchLessons=searchLessons,vm.openViewLessonDetailModal=openViewLessonDetailModal,vm.selectLesson=addLessonToProblem,vm.removeLesson=removeLessonFromProblem,vm.saveProblemData=saveProblemData}angular.module("course").controller("ProblemLessonController",Controller),Controller.$inject=["LessonService","ProblemService","toastr","ApplicationModals","$window"]}(),angular.module("course").controller("ProblemSelectionModalCtrl",["$scope","ProblemService","Authentication","ChallengeAPIService",function($scope,ProblemService,Authentication,ChallengeAPIService){var controller=this;controller.model={problems:[]},controller.onInitialProblemSelectionModal=function(){ProblemService.getUserProblems().$promise.then(function(problems){controller.model.problems=problems})},controller.selectProblem=function(selectedIndex){var _problem=controller.model.problems[selectedIndex];if(delete _problem.id,delete _problem.slug,!_problem.challenge)return $scope.$close(_problem);var _challengeId=_problem.challenge.id||_problem.challenge;ChallengeAPIService.copyChallenge({id:_challengeId}).$promise.then(function(_newCopyChallnge){_problem.challenge=_newCopyChallnge,$scope.$close(_problem)})},controller.closeModal=function(){$scope.$close()}}]),function(){function Controller($scope,ProblemService,Authentication,toastr,_,ApplicationModals,$stateParams,ProblemSubmissionService,$window,ChapterService,CourseService){function initController(course,problem){selectedCourse=course,selectedProblem=problem}function loadProblemAndClassList(){if(!selectedCourse)throw new Error("Developer must provider course object when using problem modal.");checkingCoursePerrmissions(selectedCourse.id||selectedCourse.courseCode),selectedProblem&&selectedProblem.id?loadProblem().then(loadClassList):(vm.problem={},vm.selectedChapter&&(vm.problem.chapter=vm.selectedChapter.id)),loadCourseChapters(selectedCourse.id)}function loadCourseChapters(courseId){return ChapterService.query({course:courseId}).$promise.then(function(chapters){vm.chapters=chapters,vm.chapters.push({id:null,name:"No Chapter (Global Problem)"})})}function loadProblem(){var problemId=_.get(selectedProblem,"id");if(problemId||isUsingModal||(problemId=$stateParams.slug||$stateParams.problem),problemId)return ProblemService.getProblemForEdit({id:problemId}).$promise.then(function(problem){return vm.problem=problem,vm.selectedChapter&&(vm.problem.chapter=vm.selectedChapter.id),prepareProblemClassConfigs(vm.problem),vm.problem})}function prepareProblemClassConfigs(problem){var courseId=problem.course.id||problem.course;CourseService.getAllClassUserHasPermissionInCourse({course_id:courseId}).$promise.then(function(classes){vm.classConfigs=problem.classConfigs||[],vm.classConfigs=vm.classConfigs.filter(function(config){return-1!==classes.findIndex(function(classItem){return classItem.id===config.classId})});for(var i=0;i<classes.length;i++){for(var isExists=!1,k=0;k<vm.classConfigs.length;k++)if(vm.classConfigs[k].classId===classes[i].id){isExists=!0;break}isExists||vm.classConfigs.push({classId:classes[i].id,classCode:classes[i].classCode,isActive:!1,startedTime:null,closedTime:null})}for(var j=0;j<vm.classConfigs.length;j++){var config=vm.classConfigs[j];config.startedTime&&(config.startedTime=new Date(config.startedTime)),config.closedTime&&(config.closedTime=new Date(config.closedTime))}})}function updateClassConfig(classConfig){var data={class_id:classConfig.classId,problem_id:vm.problem.id,config:{isLimitTime:!!classConfig.isLimitTime,isActive:classConfig.isActive||!1,startedTime:classConfig.startedTime||void 0,closedTime:classConfig.closedTime||void 0}};ProblemService.updateProblemClassConfig(data).$promise.then(function(response){response.success&&(toastr.success("Done update class config.","Successfully"),classConfig.editMode=!1)})}function checkingCoursePerrmissions(courseId){courseId&&CourseService.getUserPermissionsInCourse({course_id:courseId}).$promise.then(function(permissions){vm.isCourseLecturer=hasPermission("course_lecturer",permissions),vm.isCourseContentManager=hasPermission("course_content_manage",permissions)})}function hasPermission(permissionName,permissions){return-1!==permissions.findIndex(function(permission){return permission.permission_name===permissionName&&"granted"===permission.status})}function loadClassList(problem){if(problem){var courseId=problem.course.id||problem.course;CourseService.getAllClassUserHasPermissionInCourse({course_id:courseId}).$promise.then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0],loadProblemSubmissionOfClass(vm.selectedClass)})}}function loadProblemSubmissionOfClass(_class){if(!_class||!_class.id)throw new Error("class_is is undefined.");var cond={problem_id:vm.problem.id,class_id:_class.id};ProblemSubmissionService.getProblemSubmissions(cond).$promise.then(function(_data){return vm.submissions=_data,_data})}function doEvaluateProblem(submission){submission&&submission.transaction_id?ApplicationModals.openChallengeEvaluationModal(submission.transaction_id):alert("Missing transaction_id.")}function openChallengeEditModal(problem){ApplicationModals.openEditChallengeModal({moduleId:problem.challenge_module_id,challengeTypeCode:problem.challenge_type_code})}function submitForm(isValid){vm.problem.id?updateProblem(isValid):createProblem(isValid)}function updateProblem(isValid){return!!isValid&&(delete vm.problem.classConfigs,ProblemService.update(vm.problem).$promise.then(function(response){return isUsingModal&&$scope.$close(response),response}))}function createProblem(isValid){return!!isValid&&(selectedCourse?(vm.problem.course=selectedCourse.id||selectedCourse,vm.problem.author=Authentication.user.id,ProblemService.save(vm.problem,function(response){return isUsingModal&&$scope.$close(response),response}).$promise):(alert("Can not get course information. Please reload page again or send message to admin"),""))}function openChallengeSelectionModal(problem){alert("So Sorry, this feature not safe at the moment.")}function openAddNewChallengeModal(_problem){ApplicationModals.openCreateChallengeModal({problemId:_problem.id})}function startEditProblemClassTime(rowIndex){classConfigBackups[rowIndex]=angular.copy(vm.classConfigs[rowIndex]),vm.classConfigs[rowIndex].editMode=!0}function cancelEditProblemClassTime(rowIndex){vm.classConfigs[rowIndex]=classConfigBackups[rowIndex],vm.classConfigs[rowIndex].editMode=!1}var vm=this;vm.loggedUser=Authentication.user;var ModalItems=_.get($scope,"$resolve.ModalItems",{}),isUsingModal=$scope.$close&&$scope.$dismiss,selectedCourse=ModalItems.course||null,selectedProblem=ModalItems.problem||{};$window.problem_id=_.get(selectedProblem,"id"),vm.selectedChapter=ModalItems.selectedChapter||null;var classConfigBackups=[];vm.loadProblem=loadProblemAndClassList,vm.init=initController,vm.submitForm=submitForm,vm.openChallengeEditModal=openChallengeEditModal,vm.openAddNewChallengeModal=openAddNewChallengeModal,vm.openChallengeSelectionModal=openChallengeSelectionModal,vm.loadProblemSubmissionOfClass=loadProblemSubmissionOfClass,vm.viewSubmissions=loadProblemSubmissionOfClass,vm.doEvaluateProblem=doEvaluateProblem,vm.updateClassConfig=updateClassConfig,vm.startEditProblemClassTime=startEditProblemClassTime,vm.cancelEditProblemClassTime=cancelEditProblemClassTime,vm.configs={dateOptions:{min:new Date,startingDay:1},format:"dd-MM-yyyy",timePicker:{isMeridian:!0}}}angular.module("course").controller("ProblemSolvingController",Controller),Controller.$inject=["$scope","ProblemService","Authentication","toastr","_","ApplicationModals","$stateParams","ProblemSubmissionService","$window","ChapterService","CourseService"]}(),function(){function Controller($scope,_,dragularService,$timeout,ModalItems,TimeLineService,toastr,LessonService,ChapterService,$window){function initTimelineSettingsPage(){var condition={courseCode:vm.courseId};TimeLineService.getTimeLinebyCourseCodeForEdit(condition).$promise.then(function(timeline){vm.timeline=angular.copy(timeline)})}function saveSettings(){var _timeline=angular.copy(vm.timeline);_timeline.course&&delete _timeline.course.content;for(var i=0;i<_timeline.chapters.length;i++){var _chapter=_timeline.chapters[i];_chapter.index=i,delete _chapter.description;for(var j=0;j<_chapter.lessons.length;j++){var _lesson=_chapter.lessons[j];_lesson.index=j,_lesson.chapter=angular.copy(_chapter.id),delete _lesson.description,delete _lesson.content,delete _lesson.problems}}var t=setTimeout(function(){TimeLineService.update(_timeline,function(_timeline){toastr.success("Done update timeline","Successfully"),$scope.$close(!0),$timeout.cancel(t)})},1e3)}function removeLesson(_lesson){_lesson&&_lesson.id&&getUserConfirm()&&LessonService.remove({id:_lesson.id},function(_res){toastr.success("Done remove lesson "+_res.name,"Successfully")})}function removeChapter(_chapter){_chapter&&_chapter.id&&getUserConfirm()&&ChapterService.remove({id:_chapter.id},function(_res){toastr.success("Done remove chapter "+_res.name,"Successfully")})}function getUserConfirm(msg){return $window.confirm(msg||"Are you sure ?")}function doPrepareDragAndDropLessons(){return{nameSpace:"lessonsNameSpace",revertOnSpill:!0,containersModel:function(){for(var containers=[],parent=vm.timeline.chapters,i=0;i<parent.length;i++)containers.push(parent[i].lessons);return containers}(),accepts:function(el,target,source){return target.classList.contains("list-lessons-space")},moves:function(el,container,handle){return handle.classList.contains("lesson-move-item")}}}var vm=this;vm.courseId=ModalItems.courseId,vm.isDoUpdateTimeline=!1,vm.doPrepareDragAndDropLessons=doPrepareDragAndDropLessons,vm.initTimelineSettingsPage=initTimelineSettingsPage,vm.saveSettings=saveSettings,vm.removeLesson=removeLesson,vm.removeChapter=removeChapter,function(){if(!vm.courseId)throw new Error("Missing course id.")}();var eventListener=$scope.$on("ngRepeatFinished",function(){$timeout(function(){var chaptersDragularOptions={nameSpace:"chaptersNameSpace",revertOnSpill:!0,containersModel:vm.timeline.chapters,moves:function(el,container,handle){return handle.classList.contains("move-chapter-btn")}},_chaptersContainer=angular.element(document.getElementById("chaptersDragSpace")),_lessonContainers=angular.element(document.getElementsByClassName("list-lessons-space"));dragularService(_chaptersContainer,chaptersDragularOptions),dragularService(_lessonContainers,doPrepareDragAndDropLessons()),eventListener()},1e3)})}angular.module("course").controller("SyllabusJouneySettingsController",Controller),Controller.$inject=["$scope","_","dragularService","$timeout","ModalItems","TimeLineService","toastr","LessonService","ChapterService","$window"]}(),function(){function TimeLineController(TimeLineService,_,ApplicationModals,ChapterService,$uibModal,CourseService,$stateParams,course,ProblemService){function initSyllabusMgmPage(){getCourseSyllabusForEdit(),checkingCoursePerrmissions(),getGlobalProblems()}function getCourseSyllabusForEdit(){var queryParamas={courseCode:vm.courseId};return TimeLineService.getTimeLinebyCourseCodeForEdit(queryParamas).$promise.then(function(timeline){vm.timeline=timeline}).catch(function(error){})}function checkingCoursePerrmissions(){CourseService.getUserPermissionsInCourse({course_id:vm.courseId}).$promise.then(function(permissions){vm.isCourseContentManager=hasPermission("course_content_manage",permissions)})}function hasPermission(permissionName,permissions){return-1!==permissions.findIndex(function(permission){return permission.permission_name===permissionName&&"granted"===permission.status})}function getGlobalProblems(){ProblemService.getGlobalProblemsOfCourse({course_id:vm.courseId},function(problems){vm.globalProblems=problems})}function openSyllabusJouneySettingsModal(){$uibModal.open({templateUrl:"modules/course/client/views/staff/syllabus-jouney-settings.client.view.html",controller:"SyllabusJouneySettingsController",controllerAs:"vm",windowClass:"modal-large",size:"lg",resolve:{ModalItems:function(){return{courseId:vm.courseId}}}}).result.then(function(isUpdated){})}function addNewChapterToCourse(){var body={timeline:vm.timeline.id,course:vm.course.id,name:vm.model.chapter.name,description:vm.model.chapter.description};TimeLineService.addChapterToTimeLine(body,function(res){vm.timeline.chapters.push(res),vm.model.chapter.name="",vm.model.chapter.description=""})}function updateChapter(_chapter){ChapterService.update(_chapter,function(_updated){var _index=vm.timeline.chapters.findIndex(function(_item){return _item.id===_updated.id});-1!==_index&&(vm.timeline.chapters[_index].name=_updated.name,vm.timeline.chapters[_index].description=_updated.description)})}function addNewLessonToChapter(_chapter){ApplicationModals.openLessonModal(vm.timeline.course,_chapter,null).result.then(function(newLesson){_chapter.lessons||(_chapter.lessons=[]),newLesson&&_chapter.lessons.push(newLesson)})}function openEditLessonModal(_chapter,_lesson){_chapter.lessons||(_chapter.lessons=[]);var _modal=ApplicationModals.openLessonModal(vm.timeline.course,_chapter,_lesson);return _modal.result.then(function(_updatedLesson){if(_updatedLesson){var _index=_chapter.lessons.findIndex(function(_lesson){return _lesson.id===_updatedLesson.id});return-1!==_index&&_.merge(_chapter.lessons[_index],_updatedLesson),_updatedLesson}}),_modal}var vm=this;vm.timeline=null,vm.course=course,vm.courseId=$stateParams.code||$stateParams.courseCode,vm.isCourseContentManager=!1,vm.model={chapter:{name:"",description:""}},vm.initSyllabusMgmPage=initSyllabusMgmPage,vm.addNewChapterToCourse=addNewChapterToCourse,vm.addNewLessonToChapter=addNewLessonToChapter,vm.openEditLessonModal=openEditLessonModal,vm.updateChapter=updateChapter,vm.openSyllabusJouneySettingsModal=openSyllabusJouneySettingsModal}angular.module("course").controller("TimeLineController",TimeLineController),TimeLineController.$inject=["TimeLineService","_","ApplicationModals","ChapterService","$uibModal","CourseService","$stateParams","course","ProblemService"]}(),function(){angular.module("course").directive("post",function(){return{restrict:"AE",scope:{post:"=data",href:"@"},templateUrl:"/modules/course/client/templates/post-item.client.tmpl.html"}})}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/accesscode/:id",{id:"@id"},{update:{method:"PUT"},joinCourse:{url:$rootScope.socissAPI+"/accesscode/joinCourse",method:"POST",isArray:!1},approve:{url:$rootScope.socissAPI+"/accesscode/approval",method:"PUT",isArray:!1},getByCode:{url:$rootScope.socissAPI+"/accesscode/getByCode",method:"GET",isArray:!1}})}angular.module("course").factory("AccessCodeService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/challengecategories/:id",{id:"@id"},{update:{method:"PUT"}})}angular.module("course").factory("ChallengeCategoryService",Service),Service.$inject=["$resource","$rootScope"]}(),angular.module("course").factory("ChapterService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/chapter/:id",{id:"@id"},{update:{method:"PUT"},create:{url:$rootScope.socissAPI+"/chapter",method:"POST"}})}]),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/class";return $resource("",{},{createMember:{method:"POST",url:_baseUrl+"/:class_id/members"},updateMember:{method:"PUT",url:_baseUrl+"/:class_id/members"},removeMember:{method:"DELETE",url:_baseUrl+"/:class_id/members"}})}angular.module("course").factory("ClassMemberService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/class/:id",{id:"@id"},{update:{method:"PUT"}})}angular.module("course").factory("ClassService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/course";return $resource("",{},{createMember:{method:"POST",url:_baseUrl+"/:course_id/members"},updateMember:{method:"PUT",url:_baseUrl+"/:course_id/members"},removeMember:{method:"DELETE",url:_baseUrl+"/:course_id/members"}})}angular.module("course").factory("CourseMemberService",Service),Service.$inject=["$resource","$rootScope"]}(),angular.module("course").factory("CourseService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/course/:id",{id:"@id"},{update:{method:"PUT"},getAllCoursesSubmissions:{url:$rootScope.socissAPI+"/course/results",method:"GET",isArray:!0},getUserPermissionsInCourse:{url:$rootScope.socissAPI+"/course/:course_id/permissions",method:"GET",isArray:!0},getAllCourseUserHasPermission:{url:$rootScope.socissAPI+"/user/courses",method:"GET",isArray:!0},getAllClassUserHasPermissionInCourse:{url:$rootScope.socissAPI+"/course/:course_id/user-manage-classes",method:"GET",isArray:!0},getAllUserJoinedCourse:{url:$rootScope.socissAPI+"/user/courses/joined",method:"GET",isArray:!0},getByCode:{url:$rootScope.socissAPI+"/course/find-one",method:"GET",isArray:!1},getClassRanking:{url:$rootScope.socissAPI+"/course/rank",method:"GET",isArray:!0}})}]),angular.module("course").factory("LessonService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/lesson/:id",{id:"@id"},{update:{method:"PUT"}})}]),angular.module("course").factory("ProblemService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/problem/:id",{id:"@id"},{update:{method:"PUT"},getCourseProblemsForEdit:{method:"GET",url:$rootScope.socissAPI+"/course/problems/:course_id/secure",isArray:!0},getGlobalProblemsOfCourse:{method:"GET",url:$rootScope.socissAPI+"/course/problems/:course_id/global",isArray:!0},getUserProblems:{method:"GET",url:$rootScope.socissAPI+"/user/problems",isArray:!0},getProblemForDoChallenge:{method:"GET",url:$rootScope.socissAPI+"/problem/do",isArray:!1},getProblemForEdit:{method:"GET",url:$rootScope.socissAPI+"/problem/edit/:id",isArray:!1},updateProblemClassConfig:{method:"POST",url:$rootScope.socissAPI+"/problem/class-configs"}})}]),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/problem-submission";return $resource("",{},{getClassSubmissions:{url:_baseUrl+"/class",method:"GET"},getProblemSubmissions:{url:_baseUrl+"/problem",method:"GET"}})}angular.module("course").factory("ProblemSubmissionService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){angular.module("core").provider("RouteResolver",function(){function getTimeline($stateParams,TimeLineService){var _query={courseCode:$stateParams.code||$stateParams.courseCode};return TimeLineService.getTimeLinebyCourseCode(_query,function(_timeline){return _timeline}).$promise}function getTimeLineForEdit($stateParams,TimeLineService,$state){var _query={courseCode:$stateParams.code||$stateParams.courseCode};return TimeLineService.getTimeLinebyCourseCodeForEdit(_query,function(_timeline){return _timeline},function(error){$state.go("notFound")}).$promise}function getCourse($stateParams,CourseService){var getCourseBody={courseCode:$stateParams.courseCode};return CourseService.getByCode(getCourseBody)}function getClassByCode($stateParams,ClassService,AccessCodeService){if($stateParams.classCode){var _query={classCode:$stateParams.classCode};return ClassService.query(_query).$promise.then(function(_classes){return _classes[0]}).then(function(_class){if(_class)return _query.isActive=!0,AccessCodeService.query(_query).$promise.then(function(_accessCodes){return _class.accessCodes=_accessCodes,_class})})}}var self=this;self.$get=function(){return{}},self.getTimeline=getTimeline,self.getTimeLineForEdit=getTimeLineForEdit,self.getCourse=getCourse,self.getClassByCode=getClassByCode,getTimeline.$inject=["$stateParams","TimeLineService"],getTimeLineForEdit.$inject=["$stateParams","TimeLineService","$state"],getCourse.$inject=["$stateParams","CourseService"],getClassByCode.$inject=["$stateParams","ClassService","AccessCodeService"]})}(),angular.module("course").factory("TimeLineService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/timeline/:id",{id:"@id"},{update:{method:"PUT"},getTimeLinebyCourseCode:{method:"GET",params:{courseCode:"@courseCode"},url:$rootScope.socissAPI+"/timeline/course/:courseCode"},getTimeLinebyCourseCodeForEdit:{method:"GET",params:{courseCode:"@courseCode"},url:$rootScope.socissAPI+"/timeline/course/:courseCode/secure"},getClassTimeline:{method:"GET",params:{courseCode:"@courseCode",classCode:"@classCode"},url:$rootScope.socissAPI+"/timeline/course/:courseCode/:classCode"},addChapterToTimeLine:{method:"POST",url:$rootScope.socissAPI+"/chapter"}})}]),angular.module("game-crossword").config(["$stateProvider",function($stateProvider){$stateProvider.state("game-crossword",{url:"/game-crossword",abstract:!0,template:"<ui-view/>"}).state("game-crossword.play",{url:"/play",templateUrl:"modules/game-crossword/client/views/player/game-crossword.client.view.html",controller:"GameCrosswordController"})}]),function(){function GameCrosswordController($rootScope,$scope,$stateParams){}angular.module("game-crossword").controller("GameCrosswordController",GameCrosswordController),GameCrosswordController.$inject=["$rootScope","$scope","$stateParams"]}(),angular.module("game-vocabulary").config(["$stateProvider",function($stateProvider){$stateProvider.state("game-vocabulary",{url:"/game-vocabulary",abstract:!0,views:{"main@challenge-manage":{template:'<div ui-view="main"></div>'},"top@challenge-manage":{template:"<div/>"}},data:{breadcrumbProxy:"game-vocabulary.admin"}}).state("game-vocabulary.admin",{url:"/admin",views:{main:{templateUrl:"modules/game-vocabulary/client/views/game-vocabulary-admin.client.view.html",controller:"GameVocabularyAdminController",controllerAs:"vm"},"top@challenge-manage":{template:"<div/>"}},data:{displayName:"Game Vocabulary"}}).state("game-vocabulary.play",{url:"/play/:slug?problem",views:{main:{templateUrl:"modules/game-vocabulary/client/views/player/game-vocabulary-player.client.view.html",controller:"GameVocabularyPlayerController",controllerAs:"vm"}},data:{displayName:"Game Vocabulary"}})}]),function(){function GameVocabularyAdminController($window,$uibModal,GameVocabularyApiService,Authentication,Utilities,toastr,ChallengeService){function loadAllGameCreatedByUser(){GameVocabularyApiService.query({author:Authentication.user.id},function(_games){vm.model.games=_games})}function initAdminPage(){loadAllGameCreatedByUser()}function initCreateOrUpdatePage(){module_id?initUpdatePage():initCreatePage()}function initCreatePage(){if(!problem_id)throw new Error("problem_id not found.")}function initUpdatePage(){if(!module_id)throw new Error("module_id not found.");GameVocabularyApiService.get({id:module_id},function(res){vm.model.game=res})}function openGameVocabularyCreateOrUpdateModal(_game){var modalInstance=$uibModal.open({templateUrl:"/modules/game-vocabulary/client/views/admin/game-vocabulary-create.modal.client.view.html",controller:"GameVocabularyAdminController",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg",resolve:{ResolveItems:function(){return{game:_game}}}});_game||modalInstance.result.then(function(_newGame){_newGame&&vm.model.games.push(_newGame)})}function submitForm($valid){if($valid)return vm.model.game.id?update():create()}function addMoreVocabulary(){vm.model.game.vocabularies||(vm.model.game.vocabularies=[]),vm.model.game.vocabularies.push({id:Utilities.randomString(20,"a#"),word:"Your word",question:"Question for user to guess the word",meanings:"Meanings or definition of the word",pronunciation:"Only Use for learning English word game"})}function removeVocabulary(_vocabulary){var _index=vm.model.game.vocabularies.findIndex(function(item){return item.id===_vocabulary.id});-1!==_index&&vm.model.game.vocabularies.splice(_index,1)}function create($valid){var name=vm.model.game.name,description=vm.model.game.description,tag=vm.model.game.tag,gameType=vm.model.game.gameType,vocabularies=vm.model.game.vocabularies,body={name:name,description:description,tag:tag,author:Authentication.user.id,gameType:gameType,vocabularies:vocabularies};GameVocabularyApiService.save(body,function(response){vm.model.game.id=response.id;var challenge={problemId:problem_id,moduleId:response.id,challengeTypeCode:"GAME_VOCABULARY"};ChallengeService.createChallenge(challenge).then(function(res){toastr.success("Create new vocabulary game completed.","Successfully")})})}function update($valid){var id=vm.model.game.id,name=vm.model.game.name,description=vm.model.game.description,tag=vm.model.game.tag,gameType=vm.model.game.gameType,vocabularies=vm.model.game.vocabularies,body={id:id,name:name,description:description,tag:tag,gameType:gameType,vocabularies:vocabularies};GameVocabularyApiService.update(body,function(response){toastr.success("Save your vocabulary completed.","Successfully")})}function remove(_selected){if($window.confirm("Are you sure you want to delete?"))return GameVocabularyApiService.remove({id:_selected.id},function(_vocabulary){return vm.model.games.splice(_selected.id,1),toastr.success("Remove open question success.","Successfully"),_vocabulary})}var vm=this,problem_id=$window.problem_id,module_id=$window.module_id;vm.initAdminPage=initAdminPage,vm.initCreateOrUpdatePage=initCreateOrUpdatePage,vm.openGameVocabularyCreateOrUpdateModal=openGameVocabularyCreateOrUpdateModal,vm.addMoreVocabulary=addMoreVocabulary,vm.removeVocabulary=removeVocabulary,
vm.removeGame=remove,vm.submitForm=submitForm,vm.model={game:{},games:[]}}angular.module("game-vocabulary").controller("GameVocabularyAdminController",GameVocabularyAdminController),GameVocabularyAdminController.$inject=["$window","$uibModal","GameVocabularyApiService","Authentication","Utilities","toastr","ChallengeService"]}(),function(){function GameVocabularyPlayerController($window,$stateParams,$uibModal,GameVocabularyApiService,Authentication,_,toastr,ChallengeAPIService){function initPlayerPage(){if(!transaction_id)throw new Error("transaction_id not found.");getGameByTransactionId(transaction_id)}function getGameByTransactionId(transactionId){ChallengeAPIService.getTransaction({transaction_id:transactionId}).$promise.then(function(transaction){GameVocabularyApiService.get({id:transaction.module_id},function(_game){vm.model.game=_game})})}function calculateScore(_results){for(var correctAnswer=0,numQuestions=vm.model.game.vocabularies.length,i=0;i<_results.length;i++)"won"===_results[i].stage&&correctAnswer++;return Math.round(correctAnswer/numQuestions*100)}function submitGame(){var body={transaction_id:transaction_id,game_id:vm.model.game.id,results:vm.gameResults,comments:"",scores:calculateScore(vm.gameResults),user_id:Authentication.user.id,username:Authentication.user.username};GameVocabularyApiService.submitSolution(body,function(data){toastr.success("Submit vocabulary game completed.","Successfully")})}var vm=this,transaction_id=$window.transaction_id+"";vm.gameResults=[],vm.model={game:{}},vm.initPlayerPage=initPlayerPage,vm.submitGame=submitGame}angular.module("game-vocabulary").controller("GameVocabularyPlayerController",GameVocabularyPlayerController),GameVocabularyPlayerController.$inject=["$window","$stateParams","$uibModal","GameVocabularyApiService","Authentication","_","toastr","ChallengeAPIService"]}(),angular.module("game-vocabulary").directive("flashcardGame",[function(){return{restrict:"AE",scope:{game:"="},templateUrl:"modules/game-vocabulary/client/directives/templates/flashcard-game-directive-template.html",controller:function($scope){function onInitGame(){getWordAtIndex(currentWordIndex)}function getWordAtIndex(_index){var secretWordData=$scope.game.vocabularies[_index];$scope.guessingWordGame.secretWord=secretWordData.word,$scope.guessingWordGame.hint=secretWordData.question,$scope.guessingWordGame.definition=secretWordData.meanings,$scope.guessingWordGame.stage="play",$scope.guessingWordGame.answer="",$scope.guessingWordGame.failedGuess=[]}function moveToNextWord(){currentWordIndex++,getWordAtIndex(currentWordIndex)}function isTheLastWord(){return(currentWordIndex+1).toString()===$scope.game.vocabularies.length.toString()}$scope.onInitGame=onInitGame,$scope.moveToNextWord=moveToNextWord,$scope.isTheLastWord=isTheLastWord,$scope.guessingWordGame={secretWord:"Secret word",hint:"Some hint to guess",definition:"Definition of the word",stage:"play",answer:"",failedGuess:[],maximumNumberOfGuess:8};var currentWordIndex=0}}}]),angular.module("game-vocabulary").directive("guessingwordGame",[function(){return{restrict:"AE",scope:{game:"="},templateUrl:"modules/game-vocabulary/client/directives/templates/guessingword-game-directive-templatey.html",controller:function($scope){}}}]),angular.module("game-vocabulary").directive("hangmanGame1",[function(){return{restrict:"AE",scope:{game:"=",results:"="},templateUrl:"/modules/game-vocabulary/client/directives/templates/hangman-game1-directive-template.html",controller:function($scope){function onInitGame(){initAlphabet(),onPlayGame()}function onPlayGame(){resetAlphabet(),playSecretWordAtIndex(currentSecretWordIndex),initGameSettings()}function initGameSettings(){for(var secretWord=$scope.guessingWordGame.secretWord.toLowerCase(),i=0;i<secretWord.length;i++)$scope.guessingWordGame.answer+=" "===secretWord[i]?" ":"-";$scope.guessingWordGame.stage="play"}function initAlphabet(){for(var charCode=65;charCode<91;charCode++)$scope.alphabet.push({label:String.fromCharCode(charCode),isClicked:"no"})}function resetAlphabet(){$scope.alphabet.forEach(function(letter){letter.isClicked="no"})}function onPlayerGuessACharecter(guessCharacter){guessCharacter.isClicked="failed",!0===guessACharacter(guessCharacter.label)&&(guessCharacter.isClicked="correct")}function guessACharacter(guessCharacter){if(guessCharacter=guessCharacter.toLowerCase(),1!==guessCharacter.length)return void(guessCharacter.length>1&&alert("Please only enter one character at a time"));for(var i in $scope.guessingWordGame.failedGuess)if(guessCharacter===$scope.guessingWordGame.failedGuess[i])return;var found=!1;$scope.guessingWordGame.answer=$scope.guessingWordGame.answer.split("");for(var j in $scope.guessingWordGame.secretWord)$scope.guessingWordGame.secretWord[j]===guessCharacter&&(found=!0,$scope.guessingWordGame.answer[j]=guessCharacter);return $scope.guessingWordGame.answer=$scope.guessingWordGame.answer.join(""),found||$scope.guessingWordGame.failedGuess.push(guessCharacter),hasWon()&&($scope.guessingWordGame.stage="won",pushPlayedGameToResults()),hasLost()&&($scope.guessingWordGame.stage="lost",pushPlayedGameToResults()),!0===found}function getNumberOfFailedGuess(){return $scope.guessingWordGame.failedGuess.length}function hasWon(){return-1===$scope.guessingWordGame.answer.search(/-/)}function hasLost(){return $scope.guessingWordGame.failedGuess.length>=$scope.guessingWordGame.maximumNumberOfGuess}function hasWonStage(){return"won"===$scope.guessingWordGame.stage}function hasLostStage(){return"lost"===$scope.guessingWordGame.stage}function moveToNextSecretWordOfTheGame(){++currentSecretWordIndex<$scope.game.vocabularies.length&&onPlayGame()}function isTheLastSecretWordOfTheGame(){return(currentSecretWordIndex+1).toString()===$scope.game.vocabularies.length.toString()}function isGameEnded(){return currentSecretWordIndex+1>$scope.game.vocabularies.length}function playSecretWordAtIndex(_index){var secretWordData=$scope.game.vocabularies[_index];$scope.guessingWordGame.secretWord=secretWordData.word,$scope.guessingWordGame.hint=secretWordData.question,$scope.guessingWordGame.definition=secretWordData.meanings,$scope.guessingWordGame.stage="play",$scope.guessingWordGame.answer="",$scope.guessingWordGame.failedGuess=[]}function pushPlayedGameToResults(){var _guessingWordGame=angular.copy($scope.guessingWordGame);$scope.results.push(_guessingWordGame)}$scope.onInitGame=onInitGame,$scope.onPlayerGuessACharecter=onPlayerGuessACharecter,$scope.hasWonStage=hasWonStage,$scope.hasLostStage=hasLostStage,$scope.getNumberOfFailedGuess=getNumberOfFailedGuess,$scope.moveToNextSecretWordOfTheGame=moveToNextSecretWordOfTheGame,$scope.isTheLastSecretWordOfTheGame=isTheLastSecretWordOfTheGame,$scope.isGameEnded=isGameEnded,$scope.alphabet=[],$scope.guessingWordGame={secretWord:"Secret word",hint:"Some hint to guess",definition:"Definition of the word",stage:"play",answer:"",failedGuess:[],maximumNumberOfGuess:8};var currentSecretWordIndex=0}}}]),angular.module("game-vocabulary").directive("letterscrambleGame",[function(){return{restrict:"AE",scope:{game:"="},templateUrl:"modules/game-vocabulary/client/directives/templates/letterscramble-game-directive-template.html",controller:function($scope){function onInitGame(){}$scope.onInitGame=onInitGame}}}]),angular.module("game-vocabulary").directive("wordsearchGame",[function(){return{restrict:"AE",scope:{game:"="},templateUrl:"modules/game-vocabulary/client/directives/templates/wordsearch-game-directive-template.html",controller:function($scope){function onInitGame(){}$scope.onInitGame=onInitGame}}}]),angular.module("game-vocabulary").factory("GameVocabularyApiService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/gamevocabulary/:id/",{id:"@id"},{update:{method:"PUT"},submitSolution:{method:"POST",url:"/api/game-vocabulary/submission"}})}]),angular.module("guessing-word").config(["$stateProvider",function($stateProvider){$stateProvider.state("guessing-word-play",{parent:"challenge",url:"/guessing-word/play/:slug?problem",views:{"main@challenge":{templateUrl:"modules/guessing-word/client/views/player/guessing-word.client.view.html",controller:"GuessingWordController",controllerAs:"vm"}},data:{displayName:"Guessing Word Play"}}).state("guessing-word",{parent:"challenge-manage",url:"/guessing-word",abstract:!0,views:{"main@challenge-manage":{template:'<div ui-view="main"></div>'},"top@challenge-manage":{template:"<div/>"}},data:{breadcrumbProxy:"guessing-word.admin"}}).state("guessing-word.admin",{url:"/admin",views:{main:{templateUrl:"modules/guessing-word/client/views/admin/guessing-word-admin.client.view.html",controller:"GuessingWordAdminController"},"top@challenge-manage":{template:"<div/>"}},data:{displayName:"Guessing Word Admin"}}).state("guessing-word.game",{url:"/game/:id/:slug",views:{main:{templateUrl:"modules/guessing-word/client/views/admin/guessing-word-details.client.view.html",controller:"GuessingWordAdminDetailsController"}},data:{displayName:"Guessing Word Game Detail"}})}]),function(){function GuessingWordAdminController($scope,$window,$stateParams,$uibModal,GuessingWordApiService,SecretWordApiService,Authentication,_,ApplicationModals){function loadAllGameCreatedByUser(){GuessingWordApiService.getAllGameCreatedByUser({user:Authentication.user.id}).$promise.then(function(games){$scope.model.games=games})}function initGamePage(){loadAllGameCreatedByUser()}function _openAddNewGameModal(){return $uibModal.open({templateUrl:"/modules/guessing-word/client/views/admin/modal/guessing-word-add-new-game.client.view.html",controller:"GuessingWordAdminController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",resolve:{ResolveItems:function(){return{}}}})}function openAddNewGameModal(){_openAddNewGameModal().result.then(function(_newGame){_newGame&&$scope.model.games.push(_newGame)})}function _openPreviewGameModal(_previewedSlug){return $uibModal.open({templateUrl:"/modules/guessing-word/client/views/player/guessing-word.client.view.html",controller:"GuessingWordController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",windowClass:"modal-large",resolve:{ResolveItems:function(){return{previewedSlug:_previewedSlug}}}})}function openPreviewGameModal(_previewedSlug){_openPreviewGameModal(_previewedSlug)}function createNewGame($valid){var name=$scope.newGame.name,description=$scope.newGame.description,category=$scope.newGame.category,body={name:name,description:description,category:category,author:Authentication.user.id};GuessingWordApiService.save(body,function(response){$scope.$close(response)})}function removeGame(gameId){$window.confirm("Are you sure you want to delete?")&&GuessingWordApiService.delete({id:gameId}).$promise.then(function(){UpdateViewAfterRemovingGameById(gameId)})}function UpdateViewAfterRemovingGameById(id){for(var i=0;i<$scope.model.games.length;i++)if($scope.model.games[i].id===id){$scope.model.games.splice(i,1);break}}_.get($scope,"$resolve.ResolveItems",{});$scope.initGamePage=initGamePage,$scope.openAddNewGameModal=openAddNewGameModal,$scope.openPreviewGameModal=openPreviewGameModal,$scope.createNewGame=createNewGame,$scope.removeGame=removeGame,$scope.model={games:[]}}angular.module("guessing-word").controller("GuessingWordAdminController",GuessingWordAdminController),GuessingWordAdminController.$inject=["$scope","$window","$stateParams","$uibModal","GuessingWordApiService","SecretWordApiService","Authentication","_","ApplicationModals"]}(),function(){function GuessingWordAdminDetailsController($scope,$window,$stateParams,$uibModal,GuessingWordApiService,SecretWordApiService,_,$log){function initGameDetailsPage(){getGameById(),getSecretWordByGameId()}function getGameById(){GuessingWordApiService.get({id:ResolveItems.id||$stateParams.id}).$promise.then(function(game){$scope.model.gameInstance=game})}function getSecretWordByGameId(){SecretWordApiService.getSecretWordByGameId({gameId:$stateParams.id}).$promise.then(function(secretWords){$scope.model.secretWords=secretWords})}function openAddNewSecretWordModal(){$uibModal.open({templateUrl:"/modules/guessing-word/client/views/admin/modal/guessing-word-add-new-secret-word.client.view.html",controller:"GuessingWordAdminDetailsController",controllerAs:"ctrl",backdrop:"static",keyboard:!1,size:"lg",resolve:{ResolveItems:function(){return{}}}}).result.then(function(_newWord){$scope.model.secretWords.push(_newWord)})}function openEditSecretWordModal(_game,_updateIndex){var _gameCopy=angular.copy(_game);$uibModal.open({templateUrl:"/modules/guessing-word/client/views/admin/modal/guessing-word-edit-secret-word.client.view.html",controller:"GuessingWordEditCtrl",controllerAs:"vm",backdrop:"static",keyboard:!1,size:"lg",resolve:{ResolveItems:function(){return{secretword:_gameCopy}}}}).result.then(function(updatedWord){updatedWord&&($scope.model.secretWords[_updateIndex]=updatedWord)})}function updateGame(){var body={id:ResolveItems.id||$stateParams.id,name:$scope.model.gameInstance.name,description:$scope.model.gameInstance.description,category:$scope.model.gameInstance.category};GuessingWordApiService.update(body,function(response){$scope.isUsingModal&&$scope.$close(response)})}function createNewSecretWord(){var body={gameId:$stateParams.id,gameSlug:$stateParams.slug,secretWord:$scope.newSecretWord.SecretWord.toLowerCase(),hint:$scope.newSecretWord.Hint,definition:$scope.newSecretWord.Definition,gameType:$scope.newSecretWord.Type};SecretWordApiService.save(body,function(response){$scope.isUsingModal&&$scope.$close(response)})}function updateSecretWord(){$log.debug("::updateSecretWord")}function removeSecretWord(_id){$window.confirm("Are you sure you want to delete ?")&&SecretWordApiService.delete({id:_id}).$promise.then(function(response){updateViewAfterRemovingGameById(_id)})}function updateViewAfterRemovingGameById(id){for(var i=0;i<$scope.model.secretWords.length;i++)if($scope.model.secretWords[i].id===id){$scope.model.secretWords.splice(i,1);break}}var ResolveItems=_.get($scope,"$resolve.ResolveItems",{}),vm=this;$scope.isUsingModal=$scope.$close&&$scope.$dismiss,$scope.initGameDetailsPage=initGameDetailsPage,$scope.openAddNewSecretWordModal=openAddNewSecretWordModal,$scope.openEditSecretWordModal=openEditSecretWordModal,$scope.updateGame=updateGame,$scope.createNewSecretWord=createNewSecretWord,$scope.removeSecretWord=removeSecretWord,$scope.updateSecretWord=updateSecretWord,$scope.model={gameInstance:null,secretWords:[]},vm.game=ResolveItems.game}angular.module("guessing-word").controller("GuessingWordAdminDetailsController",GuessingWordAdminDetailsController),GuessingWordAdminDetailsController.$inject=["$scope","$window","$stateParams","$uibModal","GuessingWordApiService","SecretWordApiService","_","$log"]}(),function(){function Controller(ResolveItems,$log,SecretWordApiService,$scope){function initGuessingWordEdit(){vm.secretWord=ResolveItems.secretword||{}}function updateSecretWord(){$log.debug("updateSecretWord:: Do update word."),$log.debug(vm.secretWord),SecretWordApiService.save(vm.secretWord,function(response){$scope.$close(response)})}var vm=this;vm.active=initGuessingWordEdit,vm.updateSecretWord=updateSecretWord}angular.module("guessing-word").controller("GuessingWordEditCtrl",Controller),Controller.$inject=["ResolveItems","$log","SecretWordApiService","$scope"]}(),function(){function GuessingWordController($rootScope,$scope,$stateParams,GuessingWordApiService,SecretWordApiService,GuessingWordFactory,_){function initGame(){var gameSlug=$stateParams.slug;vm.previewedSlug&&(gameSlug=vm.previewedSlug),getGameBySlug(gameSlug),getSecretWordByGameSlug(gameSlug)}function startGame(){$scope.model.secretWords.length>0?($scope.isGameStarted=!0,playSecretWordAtIndex(currentSecretWordIndex)):alert("There is no secret word to play")}function playSecretWordAtIndex(secretWordIndex){var secretWordData=$scope.model.secretWords[currentSecretWordIndex],secretWordObject=GuessingWordFactory.createGuessingWordGameTypeInstance(secretWordData.gameType);secretWordObject.setSecretWordInfo({secretWord:secretWordData.secretWord,hint:secretWordData.hint,definition:secretWordData.definition,gameType:secretWordData.gameType}),$scope.guessingWordGame=secretWordObject,$scope.guessingWordGame.onInitGame()}function moveToNextSecretWordOfTheGame(){++currentSecretWordIndex<$scope.model.secretWords.length&&playSecretWordAtIndex(currentSecretWordIndex)}function isTheLastSecretWordOfTheGame(){return(currentSecretWordIndex+1).toString()===$scope.model.secretWords.length.toString()}function isGameEnded(){return currentSecretWordIndex+1>$scope.model.secretWords.length}function getSecretWordByGameSlug(gameSlug){SecretWordApiService.getSecretWordByGameSlug({gameSlug:gameSlug}).$promise.then(function(secretWords){$scope.model.secretWords=secretWords})}function getGameBySlug(gameSlug){GuessingWordApiService.getGameBySlug({gameSlug:gameSlug}).$promise.then(function(game){$scope.model.gameInstance=game[0]})}var vm=this,ResolveItems=_.get($scope,"$resolve.ResolveItems",{});$scope.model={gameInstance:null,secretWords:null},vm.previewedSlug=ResolveItems.previewedSlug;var currentSecretWordIndex=0;$scope.score=0,$scope.guessingWordGame=null,$scope.isGameStarted=!1,$scope.initGame=initGame,$scope.startGame=startGame,$scope.isGameEnded=isGameEnded,$scope.moveToNextSecretWordOfTheGame=moveToNextSecretWordOfTheGame,$scope.isTheLastSecretWordOfTheGame=isTheLastSecretWordOfTheGame}angular.module("guessing-word").controller("GuessingWordController",GuessingWordController),GuessingWordController.$inject=["$rootScope","$scope","$stateParams","GuessingWordApiService","SecretWordApiService","GuessingWordFactory","_"]}(),function(){function GuessingWordFactory($rootScope,HangmanGuessingWordModel,ScrambleGuessingWordModel){function createGuessingWordGameTypeInstance(gameType){var guessingWordGameTypeInstance=null;return"hangman"===gameType?(guessingWordGameTypeInstance=new HangmanGuessingWordModel,guessingWordGameTypeInstance.gameType="hangman"):"scramble"===gameType&&(guessingWordGameTypeInstance=new ScrambleGuessingWordModel,guessingWordGameTypeInstance.gameType="scramble"),guessingWordGameTypeInstance}return{createGuessingWordGameTypeInstance:createGuessingWordGameTypeInstance}}angular.module("guessing-word").factory("GuessingWordFactory",GuessingWordFactory),GuessingWordFactory.$inject=["$rootScope","HangmanGuessingWordModel","ScrambleGuessingWordModel"]}(),angular.module("guessing-word").factory("GuessingWordUtil",["$rootScope",function($rootScope){var guessingWordUtil={};return guessingWordUtil.shuffleArray=function(array){for(var tempElement,randomPosition,currentPosition=array.length;currentPosition;)randomPosition=Math.floor(Math.random()*currentPosition--),tempElement=array[currentPosition],array[currentPosition]=array[randomPosition],array[randomPosition]=tempElement;return array},guessingWordUtil}]),angular.module("guessing-word").directive("hangmanGame",[function(){return{restrict:"AE",scope:{guessingWordGame:"="},templateUrl:"/modules/guessing-word/client/directives/templates/hangman-game-directive-template.html",controller:function($scope){$scope.alphabet=[],$scope.onInitAlphabet=function(){for(var charCode=65;charCode<91;charCode++)$scope.alphabet.push({label:String.fromCharCode(charCode),isClicked:"no"})},$scope.onPlayerGuessACharecter=function(guessCharacter){guessCharacter.isClicked="failed",!0===$scope.guessingWordGame.guessACharacter(guessCharacter.label)&&(guessCharacter.isClicked="correct")}}}}]),angular.module("guessing-word").directive("scrambleGame",[function(){return{restrict:"AE",scope:{guessingWordGame:"="},templateUrl:"/modules/guessing-word/client/directives/templates/scramble-game-directive-template.html",controller:function($scope){$scope.numberOfFailedGuess=0,$scope.dragularOptions={scope:$scope,nameSpace:"scrable-232-232-anything-unique",revertOnSpill:!0,containersModel:[$scope.guessingWordGame.gameResultInfo.answer]},$scope.$on("dragulardrop",function(Event,el,targetContainer,sourceContainer,containerModel,elIndex,targetModel,dropIndex){$scope.guessingWordGame.hasWon()?$scope.guessingWordGame.setStageAsWon():++$scope.numberOfFailedGuess>=$scope.guessingWordGame.gameResultInfo.maximumNumberOfGuess&&$scope.guessingWordGame.setStageAsLost()})}}}]),angular.module("guessing-word").factory("GuessingWordModel",["$rootScope",function($rootScope){function GuessingWordModel(){this.secretWordInfo={secretWord:"",hint:"",definition:"",gameType:""},this.gameResultInfo={stage:"play",answer:"",failedGuess:[],maximumNumberOfGuess:8},this.gameType=""}return GuessingWordModel.prototype.setSecretWordInfo=function(theData){this.secretWordInfo.secretWord=theData.secretWord,this.secretWordInfo.hint=theData.hint,this.secretWordInfo.definition=theData.definition,this.secretWordInfo.gameType=theData.gameType},GuessingWordModel.prototype.hasWonStage=function(){return"won"===this.gameResultInfo.stage},GuessingWordModel.prototype.hasLostStage=function(){return"lost"===this.gameResultInfo.stage},GuessingWordModel.prototype.setStageAsPlay=function(){this.gameResultInfo.stage="play"},GuessingWordModel.prototype.setStageAsWon=function(){this.gameResultInfo.stage="won"},GuessingWordModel.prototype.setStageAsLost=function(){this.gameResultInfo.stage="lost"},GuessingWordModel}]),angular.module("guessing-word").factory("HangmanGuessingWordModel",["$rootScope","GuessingWordModel",function($rootScope,GuessingWordModel){function HangmanGuessingWordModel(){GuessingWordModel.call(this)}return HangmanGuessingWordModel.prototype=Object.create(GuessingWordModel.prototype),HangmanGuessingWordModel.prototype.onInitGame=function(){for(var secretWord=this.secretWordInfo.secretWord.toLowerCase(),i=0;i<secretWord.length;i++)this.gameResultInfo.answer+=" "===this.secretWordInfo.secretWord[i]?" ":"-";this.setStageAsPlay()},HangmanGuessingWordModel.prototype.guessACharacter=function(guessCharacter){if(guessCharacter=guessCharacter.toLowerCase(),1!==guessCharacter.length)return void(guessCharacter.length>1&&alert("Please only enter one character at a time"));for(var i in this.gameResultInfo.failedGuess)if(guessCharacter===this.gameResultInfo.failedGuess[i])return;var found=!1;this.gameResultInfo.answer=this.gameResultInfo.answer.split("");for(var j in this.secretWordInfo.secretWord)this.secretWordInfo.secretWord[j]===guessCharacter&&(found=!0,this.gameResultInfo.answer[j]=guessCharacter);return this.gameResultInfo.answer=this.gameResultInfo.answer.join(""),found||this.gameResultInfo.failedGuess.push(guessCharacter),this.hasWon()&&this.setStageAsWon(),this.hasLost()&&this.setStageAsLost(),!0===found},HangmanGuessingWordModel.prototype.getNumberOfFailedGuess=function(){return this.gameResultInfo.failedGuess.length},HangmanGuessingWordModel.prototype.hasWon=function(){return-1===this.gameResultInfo.answer.search(/-/)},HangmanGuessingWordModel.prototype.hasLost=function(){return this.gameResultInfo.failedGuess.length>=this.gameResultInfo.maximumNumberOfGuess},HangmanGuessingWordModel}]),angular.module("guessing-word").factory("ScrambleGuessingWordModel",["$rootScope","GuessingWordModel","GuessingWordUtil",function($rootScope,GuessingWordModel,GuessingWordUtil){function ScrambleGuessingWordModel(){GuessingWordModel.call(this)}return ScrambleGuessingWordModel.prototype=Object.create(GuessingWordModel.prototype),ScrambleGuessingWordModel.prototype.onInitGame=function(){this.gameResultInfo.answer=this.secretWordInfo.secretWord.split(""),this.gameResultInfo.answer=GuessingWordUtil.shuffleArray(this.gameResultInfo.answer),this.setStageAsPlay()},ScrambleGuessingWordModel.prototype.hasWon=function(){return this.gameResultInfo.answer.join("")===this.secretWordInfo.secretWord&&this.setStageAsWon(),this.hasWonStage()},ScrambleGuessingWordModel.prototype.hasLost=function(){return this.gameResultInfo.answer.join("")!==this.secretWordInfo.secretWord},ScrambleGuessingWordModel}]),angular.module("course").factory("GuessingWordApiService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/guessingwordgame/:id",{id:"@id"},{update:{method:"PUT"},getAllGameCreatedByUser:{url:$rootScope.socissAPI+"/guessingWordGame",method:"GET",isArray:!0},getGameBySlug:{url:$rootScope.socissAPI+"/guessingWordGame",method:"GET",isArray:!0}})}]),angular.module("course").factory("SecretWordApiService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.socissAPI+"/guessingWordSecretWord/:id",{id:"@id"},{update:{method:"PUT"},getSecretWordByGameId:{url:$rootScope.socissAPI+"/guessingWordGame/SecretWord",method:"GET",isArray:!0},getSecretWordByGameSlug:{url:$rootScope.socissAPI+"/guessingWordGame/SecretWord",method:"GET",isArray:!0}})}]),function(){function RoutesConfigs($stateProvider,RouteResolverProvider){}angular.module("open-question").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider","RouteResolverProvider"]}(),function(){function Controller($resource,$window,OpenQuestionService,toastr,Utilities){function getQuestionByTransactionId(){if(!transaction_id)throw new Error("transaction_id not found.");OpenQuestionService.getChallengeQuestion({transaction_id:transaction_id},function(question){vm.model=question,Utilities.doHightlightCode()})}function submitDraft(){OpenQuestionService.submitDraft(getSubmitData(),function(){toastr.success("Save your answer completed.","Successfully")})}function submitQuestion(){$window.confirm("Are you sure you want to submit? \nAfter you are submit you never can change anymore !!!")&&OpenQuestionService.submitSolution(getSubmitData(),function(){toastr.success("Submit answer completed.","Successfully")})}function getSubmitData(){return{question_id:vm.model.question_id,transaction_id:transaction_id,submission_content:vm.model.submission_content}}var vm=this,transaction_id=$window.transaction_id+"";vm.submitQuestion=submitQuestion,vm.submitDraft=submitDraft,function(){getQuestionByTransactionId()}()}angular.module("open-question").controller("OpenQuestionChallengeController",Controller),Controller.$inject=["$resource","$window","OpenQuestionService","toastr","Utilities"]}(),function(){function Controller($scope,_,OpenQuestionService,toastr,Utilities,$timeout,$window){function getSolutionByTransactionId(){if(!transaction_id)throw new Error("transaction_id not found.");OpenQuestionService.getSubmissionOfUserForEvaluating({transaction_id:transaction_id},function(submission){vm.submission=submission})}function saveEvaluation(){vm.submission.transaction_id=transaction_id,vm.submission.question_id=vm.submission.question_id,OpenQuestionService.saveEvaluation(vm.submission).$promise.then(function(){toastr.success("Save Evaluation Completed.","Successfully")})}var vm=this,transaction_id=$window.transaction_id;vm.saveEvaluation=saveEvaluation,function(){getSolutionByTransactionId()}();$scope.$watch("vm.submission",function(){vm.submission&&(vm.submission.scores=0,_.forEach(vm.submission.checklist,function(item){item.evaluate&&(vm.submission.scores+=Math.ceil(item.scores*item.evaluate.coefficient))}))},!0)}angular.module("open-question").controller("OpenQuestionEvaluationController",Controller),Controller.$inject=["$scope","_","OpenQuestionService","toastr","Utilities","$timeout","$window"]}(),function(){function Controller($scope,Authentication,OpenQuestionService,toastr,$window,Utilities,ChallengeService){function initOpenQuestionPage(){$window.module_id?initUpdatePage():initCreatePage()}function initUpdatePage(){if(!$window.module_id)throw new Error("module_id not found.");OpenQuestionService.get({id:$window.module_id},function(res){vm.model=res})}function initCreatePage(){if(!$window.problem_id)throw new Error("problem_id not found.");vm.model={},vm.model.checklist=[],vm.model.checklist.push({id:Utilities.randomString(20,"a#"),name:"Your Criteria Name",description:"Describe how student can get it 10 scores for this criteria.",scores:10})}function addMoreCriteria(){vm.model.checklist||(vm.model.checklist=[]),vm.model.checklist.push({id:Utilities.randomString(20,"a#"),name:"Your Criteria Name",description:"Describe how student can get it 10 scores for this criteria.",scores:10})}function removeCriteria(_criteria){var _index=vm.model.checklist.findIndex(function(item){return item.id===_criteria.id});-1!==_index&&vm.model.checklist.splice(_index,1)}function submitForm($valid){$valid&&(vm.model.id?update():create())}function update(){var _data=getOpenQuestionDataModel(vm.model);OpenQuestionService.update(_data,function(_question){toastr.success("Update open question success.","Successfully")})}function create(){var _data=getOpenQuestionDataModel(vm.model);OpenQuestionService.save(_data,function(_question){vm.model=_question;var challenge={problemId:$window.problem_id,moduleId:_question.id,challengeTypeCode:"OPEN_QUESTION"};ChallengeService.createChallenge(challenge).then(function(res){toastr.success("Create new open question success.","Successfully")})})}function getOpenQuestionDataModel(viewModel){return{id:viewModel.id||void 0,name:viewModel.name,author:Authentication.user.id,description:viewModel.description||"",questionContent:viewModel.questionContent||null,checklist:viewModel.checklist||[]}}var vm=this;vm.initOpenQuestionPage=initOpenQuestionPage,vm.initUpdatePage=initUpdatePage,vm.initCreatePage=initCreatePage,vm.submitForm=submitForm,vm.addMoreCriteria=addMoreCriteria,vm.removeCriteria=removeCriteria,vm.model={},vm.questions=[]}angular.module("open-question").controller("OpenQuestionManagementController",Controller),Controller.$inject=["$scope","Authentication","OpenQuestionService","toastr","$window","Utilities","ChallengeService"]}(),function(){function Controller($resource,$window,OpenQuestionService){function getSolutionByTransactionId(){if(!transaction_id)throw new Error("transaction_id not found.");OpenQuestionService.getSubmissionOfUser({transaction_id:transaction_id},function(submission){vm.submission=submission})}var vm=this,transaction_id=$window.transaction_id+"";!function(){getSolutionByTransactionId()}()}angular.module("open-question").controller("OpenQuestionSolutionController",Controller),Controller.$inject=["$resource","$window","OpenQuestionService"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/open-question";return $resource($rootScope.socissAPI+"/openquestion/:id",{id:"@id"},{update:{method:"PUT"},getChallengeQuestion:{method:"GET",url:"/api/open-question"},submitSolution:{url:"/api/open-question/submission",method:"POST"},submitDraft:{url:_baseUrl+"/submit-draft",method:"POST"},getSubmissionOfUser:{url:_baseUrl+"/user-submission",method:"GET"},getSubmissionOfUserForEvaluating:{url:_baseUrl+"/user-submission/evaluate",method:"GET"},saveEvaluation:{url:"/api/open-question/evaluation",method:"POST"}})}angular.module("open-question").factory("OpenQuestionService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function RoutesConfigs($stateProvider){$stateProvider.state("organization-homepage",{url:"/organization/:organization_id",views:{main:{controllerAs:"vm",controller:"OrganizationHomepageController",templateUrl:"modules/organization/client/views/organization-homepage.client.view.html"}},resolve:{OrganizationUserPermissions:getUserOrganizationPermissions},data:{displayName:"Organization"}}).state("organization-dashboard",{url:"/organization/:organization_id/dashboard",views:{main:{controllerAs:"vm",controllerProvider:dashboardControllerProvider,templateProvider:dashboardTemplateProvider}},resolve:{OrganizationUserPermissions:getUserOrganizationPermissions},data:{displayName:"Dashboard"}}).state("organization-dashboard.access-code-management",{url:"/access-code",views:{"dashboard-content@organization-dashboard":{controllerAs:"vm",controller:"OrganizationAccessCodeManagementController",templateUrl:"modules/organization/client/views/organization-access-code-management.client.view.html"}},data:{
displayName:"Access Code Management"}}).state("organization-dashboard.memberships-management",{url:"/memberships",views:{"dashboard-content@organization-dashboard":{controllerAs:"vm",controller:"OrganizationMembershipsController",templateUrl:"modules/organization/client/views/organization-memberships-management.client.view.html"}},data:{displayName:"Membership Management"}}).state("organization-dashboard.course-management",{url:"/:course_id",views:{"dashboard-content@organization-dashboard":{controllerAs:"vm",controller:"OrganizationCourseManagementController",templateUrl:"modules/organization/client/views/organization-course-management.client.view.html"}},data:{displayName:"Course Management"}}).state("organization-dashboard.course-management.preferences",{url:"/preferences",views:{"course-management-content@organization-dashboard.course-management":{controllerAs:"vm",controller:"OrganizationCoursePreferencesController",templateUrl:"modules/organization/client/views/organization-course-preferences.client.view.html"}},data:{displayName:"Preferences"}}).state("organization-dashboard.course-management.permissions",{url:"/permissions",views:{"course-management-content@organization-dashboard.course-management":{controllerAs:"vm",controller:"OrganizationCoursePermissionsController",templateUrl:"modules/organization/client/views/organization-course-permissions.client.view.html"}},data:{displayName:"Permissions"}}).state("organization-dashboard.course-management.classes",{url:"/classes",views:{"course-management-content@organization-dashboard.course-management":{controllerAs:"vm",controller:"OrganizationCourseClassesController",templateUrl:"modules/organization/client/views/organization-course-classes.client.view.html"}},data:{displayName:"Classes"}})}function getUserOrganizationPermissions(OrganizationService,$stateParams){function hasPermission(permissionName){var permission=self.permissions.find(function(pers){return pers.permission_name===permissionName});return!!permission&&"granted"===permission.status}var self={};return self.permissions=[],OrganizationService.getOrganizationPermissions({organization_id:$stateParams.organization_id}).$promise.then(function(permissions){return self.permissions=permissions,{permissions:permissions,has:hasPermission}})}function dashboardTemplateProvider($templateRequest,OrganizationUserPermissions){if(OrganizationUserPermissions.has("organization_manager"))return $templateRequest("modules/organization/client/views/organization-manager-dashboard.client.view.html");if(OrganizationUserPermissions.has("organization_member"))return $templateRequest("modules/organization/client/views/organization-member-dashboard.client.view.html");throw new Error("Do not have default view template for other role !")}function dashboardControllerProvider(OrganizationUserPermissions){if(OrganizationUserPermissions.has("organization_manager"))return"OrganizationManagerDashboardController";if(OrganizationUserPermissions.has("organization_member"))return"OrganizationMemberDashboardController";throw new Error("Do not have default controller for other role !")}angular.module("organization").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider"],getUserOrganizationPermissions.$inject=["OrganizationService","$stateParams"],dashboardTemplateProvider.$inject=["$templateRequest","OrganizationUserPermissions"],dashboardControllerProvider.$inject=["OrganizationUserPermissions"]}(),function(){function Controller($scope,Authentication,AccessCodeService,toastr,$q,ModalItems,Utilities){function submitCreationForm($valid){$valid&&createAccessCodes()}function createAccessCodes(){vm.numbers=vm.numbers||1;for(var tasks=[],i=1;i<=vm.numbers;i++){var code=getAccessCodeDataFromFormModel(vm.code);code.author=Authentication.user.id,code.authorUsername=Authentication.user.username,code.name=vm.code.name+"-"+Utilities.randomString(5,"A"),tasks.push(AccessCodeService.save(code))}return $q.all(tasks).then(function(results){return toastr.success("Done Create Access Code.","Successfully"),$scope.$close(results)})}function getAccessCodeDataFromFormModel(formData){if(!formData)throw new Error("Form data of access code is null.");return{id:formData.id,name:formData.name,course:vm.course.id,courseCode:vm.course.courseCode,class:vm.class.id,classCode:vm.class.classCode,receiverName:formData.receiverName,startTime:formData.startTime,expiryTime:formData.expiryTime,unitPrice:formData.unitPrice,isNeedApproval:formData.isNeedApproval,isApproved:!formData.isNeedApproval,isFree:formData.isFree,isNoExpiry:formData.isNoExpiry,currencyUnit:formData.currencyUnit,discountPercent:formData.discountPercent}}var vm=this;vm.course=ModalItems.course||null,vm.class=ModalItems.class||null,vm.code={},vm.code.isFree=!0,vm.code.isNoExpiry=!0,vm.numbers=1,function(){if(!vm.course)throw new Error("Missing course.");if(!vm.class)throw new Error("Missing class.")}(),vm.submitCreationForm=submitCreationForm}angular.module("organization").controller("OrganizationAccessCodeCreateModalController",Controller),Controller.$inject=["$scope","Authentication","AccessCodeService","toastr","$q","ModalItems","Utilities"]}(),function(){function Controller($stateParams,ClassService,AccessCodeService,$q,toastr,OrganizationService,$window,$uibModal){function updateClassListBySelectedCourse(){loadCourseClassList(vm.selectedCourse.id).then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0]||null,updateStudentListBySelectedClass()})}function updateStudentListBySelectedClass(){var classId=vm.selectedClass?vm.selectedClass.id:null;loadClassAccessCodes(vm.selectedCourse?vm.selectedCourse.id:null,classId).then(function(codes){vm.accessCodes=codes})}function loadCourseClassList(courseId){return ClassService.query({course:courseId}).$promise.then(function(classes){return classes})}function loadOrganizationCourses(organizationId){return OrganizationService.getOrganizationCourses({organization_id:organizationId}).$promise}function loadClassAccessCodes(courseId,classId){return classId&&courseId?AccessCodeService.query({course:courseId,class:classId}).$promise:$q.when([])}function approveAccessCode(code){if(!code||!code.accessCode)throw new Error("code.accessCode param not found for approve.");var body={accessCode:code.accessCode};return AccessCodeService.approve(body,function(accessCode){return code.isApproved=accessCode.isApproved,toastr.success("Done approve access code","Successfully"),accessCode})}function removeAccessCode(code){if($window.confirm("Are you sure you want to delete? \nCode with name "+code.accessCode+" of course "+code.course.courseCode))return AccessCodeService.remove({id:code.id},function(code){toastr.success("Done remove access code","Successfully");var index=vm.accessCodes.findIndex(function(item){return item.id===code.id});return-1!==index&&vm.accessCodes.splice(index,1),code})}function openCreateAccessCodesModal(){$uibModal.open({templateUrl:"modules/organization/client/views/organization-access-code-create-modal.client.view.html",controller:"OrganizationAccessCodeCreateModalController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{course:vm.selectedCourse,class:vm.selectedClass}}}}).result.then(function(codes){codes&&(vm.accessCodes=vm.accessCodes.concat(codes))})}var vm=this;vm.organizationId=$stateParams.organization_id,vm.courses=[],vm.classes=[],vm.selectedCourse=null,vm.selectedClass=null,vm.updateClassListBySelectedCourse=updateClassListBySelectedCourse,vm.updateStudentListBySelectedClass=updateStudentListBySelectedClass,vm.approveAccessCode=approveAccessCode,vm.removeAccessCode=removeAccessCode,vm.openCreateAccessCodesModal=openCreateAccessCodesModal,function(){loadOrganizationCourses(vm.organizationId).then(function(courses){vm.courses=courses,vm.selectedCourse=courses[0]||null,vm.selectedCourse&&loadCourseClassList(vm.selectedCourse.id).then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0]||null,updateStudentListBySelectedClass()})})}()}angular.module("organization").controller("OrganizationAccessCodeManagementController",Controller),Controller.$inject=["$stateParams","ClassService","AccessCodeService","$q","toastr","OrganizationService","$window","$uibModal"]}(),function(){function ControllerController($stateParams,ClassService,CourseService,AccessCodeService,$q,Authentication,toastr,ClassMemberService,ApplicationModals,$window){function submitCreateClassForm($valid){if($valid){var classData={};classData.name=vm.newClass.name,classData.classCode=vm.newClass.code,classData.description=vm.newClass.description,classData.author=Authentication.user.id,classData.course=vm.course.id,ClassService.save(classData,function(newClass){toastr.success("Done create class","Successfully"),vm.showCreateClassForm=!1,vm.classes.push(newClass)})}}function updateStudentListBySelectedClass(){loadClassAccessCodes(vm.selectedClass?vm.selectedClass.id:null).then(function(codes){vm.accessCodes=codes})}function loadCourseClassList(courseId){return ClassService.query({course:courseId}).$promise.then(function(classes){return classes})}function loadCourse(courseId){return CourseService.getByCode({course_id:courseId}).$promise}function loadClassAccessCodes(classId){return classId?AccessCodeService.query({class:classId,isActive:!0}).$promise:$q.when([])}function removeMember(userId,username){if($window.confirm("Are you sure you want to remove member "+username+" ?")){var member={class_id:vm.selectedClass.id,user_id:userId};ClassMemberService.removeMember(member).$promise.then(function(response){response.success&&(toastr.success("Remove class member.","Successfully"),removeMemberViewModels(userId))})}}function removeMemberViewModels(userId){var index=vm.selectedClass.membership.findIndex(function(member){return member.id===userId});-1!==index&&vm.selectedClass.membership.splice(index,1)}function addClassMember(permissions){ApplicationModals.openUserSelectModal().result.then(function(users){if(users&&0!==users.length)for(var i=0;i<users.length;i++)createClassMember(users[i].id||users[i]._id,permissions,users[i].username)})}function createClassMember(userId,permissions,username){permissions||(permissions=[]);var member={user_id:userId,permissions:permissions,username:username};return ClassMemberService.createMember({class_id:vm.selectedClass.id},member).$promise.then(function(response){response.success&&(vm.selectedClass.membership||(vm.selectedClass.membership=[]),vm.selectedClass.membership.push(member))})}var vm=this;vm.courseId=$stateParams.course_id,vm.showCreateClassForm=!1,vm.course=null,vm.newClass=null,vm.selectedClass=null,vm.updateStudentListBySelectedClass=updateStudentListBySelectedClass,vm.submitCreateClassForm=submitCreateClassForm,vm.addClassMember=addClassMember,vm.removeMember=removeMember,function(){loadCourse(vm.courseId).then(function(course){vm.course=course,loadCourseClassList(course.id).then(function(classes){vm.classes=classes,vm.selectedClass=vm.classes[0]||null,loadClassAccessCodes(vm.selectedClass?vm.selectedClass.id:null).then(function(codes){vm.accessCodes=codes})})})}()}angular.module("organization").controller("OrganizationCourseClassesController",ControllerController),ControllerController.$inject=["$stateParams","ClassService","CourseService","AccessCodeService","$q","Authentication","toastr","ClassMemberService","ApplicationModals","$window"]}(),function(){function Controller($stateParams,$state){var vm=this;vm.courseId=$stateParams.course_id,vm.$state=$state}angular.module("organization").controller("OrganizationCourseManagementController",Controller),Controller.$inject=["$stateParams","$state"]}(),function(){function ControllerController($stateParams,ApplicationModals,CourseService,CourseMemberService,$q,toastr,$window){function loadCourse(courseId){return CourseService.getByCode({course_id:courseId}).$promise}function filterMemberByPermission(members,permission){return members=members||[],members.filter(function(member){return member.permissions=member.permissions||[],-1!==member.permissions.indexOf(permission)})}function addCourseContentManager(){ApplicationModals.openUserSelectModal().result.then(function(users){if(users&&0!==users.length)for(var i=0;i<users.length;i++)createCourseContentManager(users[i].id||users[i]._id,users[i].username)})}function removeMember(userId,username){if($window.confirm("Are you sure you want to remove member "+username+" ?")){var member={course_id:vm.courseId,user_id:userId};CourseMemberService.removeMember(member).$promise.then(function(response){response.success&&(toastr.success("Remove course member.","Successfully"),removeMemberViewModels(userId))})}}function removeMemberViewModels(userId){var index=-1;if(-1!==(index=vm.contentManagers.findIndex(function(user){return user.id===userId})))return void vm.contentManagers.splice(index,1)}function createCourseContentManager(userId,username){var member={course_id:vm.courseId,user_id:userId,username:username,permissions:["course_content_manage"]};return CourseMemberService.createMember({course_id:vm.courseId},member).$promise.then(function(response){response.success&&vm.contentManagers.push(member)})}var vm=this;vm.courseId=$stateParams.course_id,vm.contentManagers=[],vm.lecturers=[],vm.addCourseContentManager=addCourseContentManager,vm.removeMember=removeMember,function(){loadCourse($stateParams.course_id).then(function(course){vm.course=course,vm.contentManagers=filterMemberByPermission(course.membership,"course_content_manage")})}()}angular.module("organization").controller("OrganizationCoursePermissionsController",ControllerController),ControllerController.$inject=["$stateParams","ApplicationModals","CourseService","CourseMemberService","$q","toastr","$window"]}(),function(){function ControllerController($scope,$stateParams,CourseService,ApplicationModals,toastr,Utilities,$window,$timeout){function loadSelectedCourseForUpdate(){CourseService.getByCode({course_id:vm.courseId},function(course){vm.course=course,setupDragularOptions()})}function setupDragularOptions(){vm.outcomeElementUUID=Utilities.generateUUID(),vm.outcomesDragularOptions={scope:$scope,nameSpace:vm.outcomeElementUUID,revertOnSpill:!0,containersModel:[vm.course.outcomes]},$scope.$on("dragulardrop",function(e,el){e.stopPropagation(),$timeout(function(){CourseService.update({id:vm.course.id,outcomes:vm.course.outcomes})},0)})}function changeCourseImage(){ApplicationModals.openSingleImageUploadModal().result.then(function(image){if(image){var updateData={id:vm.course.id,image:image};CourseService.update(updateData).$promise.then(function(updatedCourse){vm.course=updatedCourse})}})}function updateCoursePreferences(isValid){if(isValid){var updateData={id:vm.course.id,name:vm.course.name,description:vm.course.description,content:vm.course.content,type:vm.course.type,outcomes:vm.course.outcomes};return CourseService.update(updateData).$promise.then(function(updatedCourse){return toastr.success("Update course completed.","Successfully"),updatedCourse})}}function removeOutcome(removeIndex){$window.confirm("Are you sure you want to remove this outcome ?")&&(vm.course.outcomes.splice(removeIndex,1),CourseService.update({id:vm.course.id,outcomes:vm.course.outcomes}))}function addOutCome(outcome){outcome&&""!==outcome&&(vm.course.outcomes=vm.course.outcomes||[],vm.course.outcomes.push({id:Utilities.generateUUID(),content:outcome}),CourseService.update({id:vm.course.id,outcomes:vm.course.outcomes}))}var vm=this;vm.courseId=$stateParams.course_id,vm.course=null,vm.changeCourseImage=changeCourseImage,vm.updateCoursePreferences=updateCoursePreferences,vm.addOutCome=addOutCome,vm.removeOutcome=removeOutcome,function(){loadSelectedCourseForUpdate()}()}angular.module("organization").controller("OrganizationCoursePreferencesController",ControllerController),ControllerController.$inject=["$scope","$stateParams","CourseService","ApplicationModals","toastr","Utilities","$window","$timeout"]}(),function(){function ControllerController(OrganizationService,OrganizationUserPermissions){this.permissions=OrganizationUserPermissions||[]}angular.module("organization").controller("OrganizationHomepageController",ControllerController),ControllerController.$inject=["OrganizationService","OrganizationUserPermissions"]}(),function(){function ControllerController(OrganizationService,OrganizationUserPermissions,$stateParams,ApplicationModals){function loadOrganizationOwnedCourses(){OrganizationService.getOrganizationCourses({organization_id:vm.organizationId}).$promise.then(function(courses){vm.organizationCourses=courses,vm.organizationCourses=vm.organizationCourses.sort(sortDateDesc)})}function sortDateDesc(A,B){return A.createdAt<B.createdAt}function openCourseCreateModal(){return OrganizationService.query({code:vm.organizationId}).$promise.then(function(organiations){if(!organiations[0])throw new Error("Not found organization with id "+vm.organiationId);if(organiations.lenght>1)throw new Error("Error found many organizations with id"+vm.organiationId);var params={organizationId:organiations[0].id};return ApplicationModals.openCourseCreateModal(params).result.then(function(newCourse){if(newCourse)return vm.organizationCourses.push(newCourse),newCourse})})}var vm=this;vm.permissions=OrganizationUserPermissions||[],vm.organizationId=$stateParams.organization_id,vm.openCourseCreateModal=openCourseCreateModal,function(){loadOrganizationOwnedCourses()}()}angular.module("organization").controller("OrganizationManagerDashboardController",ControllerController),ControllerController.$inject=["OrganizationService","OrganizationUserPermissions","$stateParams","ApplicationModals"]}(),function(){function ControllerController(OrganizationService,OrganizationUserPermissions,$stateParams){var vm=this;vm.organizationId=$stateParams.organization_id,vm.permissions=OrganizationUserPermissions||[]}angular.module("organization").controller("OrganizationMemberDashboardController",ControllerController),ControllerController.$inject=["OrganizationService","OrganizationUserPermissions","$stateParams"]}(),function(){function Controller(OrganizationMemberService,$stateParams,ApplicationModals,$q,$window,toastr){function loadMoreStudents(){var skip=Math.ceil(vm.students.length/PAGE_SIZE)*PAGE_SIZE;loadOrganizationMembers(vm.organizationId,"organization_student",PAGE_SIZE,skip).then(function(students){vm.students=vm.students.concat(students)})}function loadMoreManagers(){var skip=Math.ceil(vm.managers.length/PAGE_SIZE)*PAGE_SIZE;loadOrganizationMembers(vm.organizationId,"organization_manager",PAGE_SIZE,skip).then(function(managers){vm.managers=vm.managers.concat(managers)})}function loadOrganizationMembers(organizationId,permissions,limit,skip){return OrganizationMemberService.getMembers({organization_id:organizationId,permissions:permissions||void 0,limit:limit||PAGE_SIZE,skip:skip||0}).$promise}function addOrganizationManagers(){var modal=ApplicationModals.openUserSelectModal(),tasks=[];modal.result.then(function(users){if(users&&0!==users.length){for(var i=0;i<users.length;i++){var userId=users[i].id||users[i]._id;tasks.push(createOrigazationMember(userId,["organization_manager"]))}$q.all(tasks).then(function(responses){for(var i=0;i<responses.length;i++)responses[i].success&&vm.managers.push({user:users[i]})})}})}function addOrganizationStudents(){var modal=ApplicationModals.openUserSelectModal(),tasks=[];modal.result.then(function(users){if(users&&0!==users.length){for(var i=0;i<users.length;i++){var userId=users[i].id||users[i]._id;tasks.push(createOrigazationMember(userId,null))}$q.all(tasks).then(function(responses){for(var i=0;i<responses.length;i++)responses[i].success&&vm.students.push({user:users[i]})})}})}function createOrigazationMember(userId,permissions){var params={organization_id:vm.organizationId},data={organization_id:vm.organizationId,user_id:userId,permissions:permissions?permissions.join(","):void 0};return OrganizationMemberService.createMember(params,data).$promise}function removeMember(user){if($window.confirm("Are you sure you want to remove member "+user.username+" ?")){var params={organization_id:vm.organizationId,user_id:user.id};OrganizationMemberService.removeMember(params).$promise.then(function(response){response.success&&(toastr.success("Removed member.","Successfully"),removeMemberViewModels(user.id))})}}function removeMemberViewModels(userId){var index=-1;return-1!==(index=vm.students.findIndex(function(member){return member.user.id===userId}))?void vm.students.splice(index,1):(index=vm.managers.findIndex(function(member){return member.user.id===userId}),-1!==index?void vm.managers.splice(index,1):void 0)}var vm=this;vm.organizationId=$stateParams.organization_id;var PAGE_SIZE=50;vm.students=[],vm.managers=[],vm.loadMoreStudents=loadMoreStudents,vm.loadMoreManagers=loadMoreManagers,vm.addOrganizationStudents=addOrganizationStudents,vm.addOrganizationManagers=addOrganizationManagers,vm.removeMember=removeMember,function(){var getStudents=loadOrganizationMembers(vm.organizationId,"organization_student",PAGE_SIZE,0),getManagers=loadOrganizationMembers(vm.organizationId,"organization_manager",PAGE_SIZE,0);getStudents.then(function(students){vm.students=students}),getManagers.then(function(managers){vm.managers=managers})}()}angular.module("organization").controller("OrganizationMembershipsController",Controller),Controller.$inject=["OrganizationMemberService","$stateParams","ApplicationModals","$q","$window","toastr"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/organization";return $resource("",{},{getMembers:{method:"GET",isArray:!0,url:_baseUrl+"/:organization_id/members"},createMember:{method:"POST",url:_baseUrl+"/:organization_id/members"},updateMember:{method:"PUT",url:_baseUrl+"/:organization_id/members"},removeMember:{method:"DELETE",url:_baseUrl+"/:organization_id/members"}})}angular.module("organization").factory("OrganizationMemberService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function Service($resource,$rootScope){var _baseUrl=$rootScope.socissAPI+"/organization";return $resource(_baseUrl,{},{getMemberJoinedCourses:{method:"GET",isArray:!0,url:_baseUrl+"/:organization_id/member-joined-courses"},getOrganizationCourses:{method:"GET",isArray:!0,url:_baseUrl+"/:organization_id/courses"},getOrganizationPosts:{method:"GET",isArray:!0,url:_baseUrl+"/:organization_id/posts"},getOrganizationPermissions:{method:"GET",isArray:!0,url:_baseUrl+"/:organization_id/permissions"}})}angular.module("organization").factory("OrganizationService",Service),Service.$inject=["$resource","$rootScope"]}(),angular.module("question").config(["$stateProvider",function($stateProvider){}]),angular.module("question").controller("QuestionPreviewController",["$scope","ApplicationModals","$uibModalInstance","_",function($scope,ApplicationModals,$uibModalInstance,_){var controller=this,ModalItems=_.get($scope,"$resolve.ModalItems",{});controller.model={question:ModalItems.question||null},controller.isShowEvaluatePane=!1,controller.doEvaluatingQuestion=function(){controller.isShowEvaluatePane=!0},controller.reDoEvaluatingQuestion=function(){controller.isShowEvaluatePane=!1},controller.closeModal=function(){$uibModalInstance.dismiss("cancel")}}]),angular.module("question").controller("QuestionController",["$scope","QuestionService","EvaluatingService",function($scope,QuestionService,EvaluatingService){var controller=this;controller.model={questionSelected:{}},controller.initQuestionPage=function(){controller.model.questionSelected=QuestionService.getTrueFalseQuestionInstance()},controller.onSubmitQuiz=function(){alert("Your answer is "+EvaluatingService.doEvaluateTrueFalseQuestion(controller.model.questionSelected))}}]),angular.module("question").directive("callOutMessage",["EvaluatingService",function(EvaluatingService){var services={},scopeVariables={question:"=questionItem"};return services.controllerFunction=function($scope){$scope.type||($scope.type="DEFAULT"),$scope.title="",$scope.type="DEFAULT";var questionType=$scope.question.questionType.type,result=services.doEvaluateResultByQuestionType($scope.question);if(result==={})return $scope.title="You don't have any answer !!",void($scope.type="WARNING");3===questionType||5===questionType||6===questionType||8===questionType?services.doEvaluateMultipleMessage($scope,result):services.doEvaluateSimpleMessage($scope,result)},services.doEvaluateMultipleMessage=function($scope,result){result.correct===result.totalCorrectAnswer?($scope.title=$scope.question.configs.onCorrectMessage,$scope.type="SUCCESS"):result.incorrect>0?($scope.title=$scope.question.configs.onIncorrectMessage,$scope.type="DANGER"):0===result.incorrect&&0===result.correct&&($scope.title="You don't have any answer !!",$scope.type="WARNING"),$scope.message="You have {0} correct answers, {1} incorrect answers on {2} correct answer.",$scope.message=$scope.message.format(result.correct,result.incorrect,result.totalCorrectAnswer)},services.doEvaluateResultByQuestionType=function(question){question.questionType||(question.questionType={type:-1});var result={};switch(question.questionType.type){case 1:result=EvaluatingService.doEvaluateTrueFalseQuestion(question);break;case 2:result=EvaluatingService.doEvaluateMultipleChoiceQuestion(question);break;case 3:result=EvaluatingService.doEvaluateMultipleResponseQuestion(question);break;case 4:result=EvaluatingService.doEvaluateTypeInQuestion(question);break;case 5:result=EvaluatingService.doEvaluateFillInBlankQuestion(question);break;case 6:result=EvaluatingService.doEvaluateMultipleChoiceTextQuestion(question);break;case 7:result=EvaluatingService.doEvaluateSequenceQuestion(question);break;case 8:result=EvaluatingService.doEvaluateWordBankQuestion(question)}return result},services.doEvaluateSimpleMessage=function($scope,result){result?($scope.title=$scope.question.configs.onCorrectMessage,$scope.type="SUCCESS"):($scope.title=$scope.question.configs.onIncorrectMessage,$scope.type="DANGER")},{restrict:"AE",scope:scopeVariables,templateUrl:"/modules/question/client/directives/templates/components/callout-message.html",controller:services.controllerFunction}}]),angular.module("question").directive("inputAnswerList",["Utilities","$interval","QuestionService",function(Utilities,$interval,QuestionService){return{restrict:"AE",scope:{answers:"=",index:"=",questionType:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/components/input-answer-list.html",controller:function($scope){var controller=this;controller.models={isShowCHeckBox:!1,isShowRadioButton:!1,isShowHTMLTextInput:!1,isShowCopyIDButton:!1,newAnswer:"",fieldMarkTemplate:""},$scope.answerData={answerId:void 0,items:[]};var nameSpaceUUID=Utilities.generateUUID();controller.dragularOptions={classes:{mirror:"gu-mirror",hide:"gu-hide",transit:"gu-transit",overActive:"gu-over-active",overAccepts:"gu-over-accept",overDeclines:"gu-over-decline"},lockY:!0,scope:$scope,nameSpace:nameSpaceUUID,revertOnSpill:!0,containersModel:[$scope.answerData.items]},controller.onInitInputAnswerList=function(){controller.prepareFieldMarkTemplateForCopy(),controller.coverInputData(),controller.checkQuestionType()},controller.prepareFieldMarkTemplateForCopy=function(){$scope.answers&&$scope.answers.answerId&&(controller.models.fieldMarkTemplate=QuestionService.getAnswerMarkUUID($scope.answers))};var getEmptyItem=function(){return{answerId:void 0,content:void 0,isCorrect:void 0}};controller.coverInputData=function(){var item={},answer=$scope.answers;switch(item=getEmptyItem(),$scope.questionType.type){case 1:case 2:case 3:answer.forEach(function(data){item=getEmptyItem(),item.answerId=data.answerId,item.content=data.content,item.isCorrect=data.isCorrect,$scope.answerData.items.push(item)});break;case 4:answer.forEach(function(text){item=getEmptyItem(),item.content=text,$scope.answerData.items.push(item)});break;case 5:item.answerId=answer.answerId,answer.texts=answer.texts||[],answer.texts.forEach(function(text){item=getEmptyItem(),item.content=text,$scope.answerData.items.push(item)});break;case 6:$scope.answerData.answerId=answer.answerId,answer.items.forEach(function(element){item=getEmptyItem(),item.answerId=element.id,item.content=element.text,item.isCorrect=element.isCorrect,$scope.answerData.items.push(item)});break;case 7:$scope.answerData.answerId=answer.answerId,answer.forEach(function(element){item=getEmptyItem(),item.answerId=element.id,item.content=element.text,$scope.answerData.items.push(item)});break;case 8:$scope.answerData.answerId=answer.answerId,answer.items.forEach(function(element){item=getEmptyItem(),item.answerId=element.id,item.content=element.text,item.isCorrect=element.isCorrect,$scope.answerData.items.push(item)})}},controller.checkQuestionType=function(){switch($scope.questionType.type){case 1:case 2:controller.models.isShowRadioButton=!0;break;case 3:controller.models.isShowCHeckBox=!0;break;case 6:controller.models.isShowRadioButton=!0,controller.models.isShowCopyIDButton=!0;break;case 4:break;case 5:controller.models.isShowRadioButton=!1,controller.models.isShowCHeckBox=!1,controller.models.isShowHTMLTextInput=!0,controller.models.isShowCopyIDButton=!0;break;case 8:controller.models.isShowCHeckBox=!0,controller.models.isShowHTMLTextInput=!0,controller.models.isShowCopyIDButton=!0;break;case 7:controller.models.isShowRadioButton=!1,controller.models.isShowCHeckBox=!1}},controller.addAnswer=function(){var type=$scope.questionType.type;if(""!==controller.models.newAnswer){var item=getEmptyItem();item.answerId=Utilities.generateUUID(),item.content=controller.models.newAnswer,item.isCorrect=0===$scope.answerData.items.length&&4!==type&&5!==type,$scope.answerData.items.push(item),controller.models.newAnswer=""}},controller.coverOutputData=function(items){items=items||[];var item={};switch($scope.questionType.type){case 1:case 2:case 3:$scope.answers=[],items.forEach(function(data){item={},item.answerId=data.answerId,item.content=data.content,item.isCorrect=data.isCorrect,$scope.answers.push(item)});break;case 4:$scope.answers=[],items.forEach(function(element){item=element.content,$scope.answers.push(item)});break;case 5:$scope.answers.texts=[],items.forEach(function(element){$scope.answers.texts.push(element.content)});break;case 6:$scope.answers.items=[],items.forEach(function(element){item={},item.id=element.answerId,item.text=element.content,item.isCorrect=element.isCorrect,$scope.answers.items.push(item)});break;case 7:$scope.answers=[],items.forEach(function(element){item={},item.id=element.answerId,item.text=element.content,$scope.answers.push(item)});break;case 8:$scope.answers.items=[],items.forEach(function(element){item={},item.id=element.answerId,item.text=element.content,item.isCorrect=element.isCorrect,$scope.answers.items.push(item)})}},controller.removeItem=function(index){$scope.answerData.items.splice(index,1)};var watchItemsChange=$scope.$watchCollection("answerData.items",function(items){controller.coverOutputData(items)}),autoSavingDataLoop=$interval(function(){controller.coverOutputData($scope.answerData.items)},500);$scope.onChangeItemStatus=function(){controller.coverOutputData($scope.answerData.items)},$scope.onChangeItemRadioButton=function(itemIndex){$scope.answerData.items.forEach(function(item,index){item.isCorrect=index===Number(itemIndex)}),controller.coverOutputData($scope.answerData.items)},$scope.$on("$destroy",function(){watchItemsChange(),$interval.cancel(autoSavingDataLoop)})}}}]),angular.module("question").directive("fillInBlankQuestion",function(){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/fill-in-blank-question-directive-template.html",controller:function($scope){this.onInitFillBankQuestion=function(){var question=$scope.question||{};question!=={}&&question.answers.forEach(function(answer){question.userAnswer.push({answerId:answer.answerId,text:""})})}}}
}).directive("fillInBlankContent",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:!1,link:function($scope,$element){var contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[];""!==contentQuestion&&(answers.forEach(function(answer,$index){var fieldMark=QuestionService.getAnswerMarkUUID(answer),FIELD_TEMPLATE='<input type="text" ng-model="question.userAnswer['+$index+'].text"  class="form-control  input-sm" placeholder="Enter an answer"/>';contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]),angular.module("question").directive("multipleChoiceQuestion",["_",function(_){return{restrict:"AE",scope:{question:"="},link:function($scope){$scope.question.userAnswer||($scope.question.userAnswer={}),$scope.question.answers=_.shuffle($scope.question.answers)},templateUrl:"/modules/question/client/directives/templates/multiple-choice-question-directive-template.html"}}]),angular.module("question").directive("multipleChoiceTextQuestion",function(){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/multiple-choice-text-question-directive-template.html",controller:function($scope){this.onInitMultipleChoiceTextQuestion=function(){var question=$scope.question||{};question!=={}&&question.answers.forEach(function(answer){question.userAnswer.push({answerId:answer.answerId,selectedItem:{}})})}}}}).directive("comboBoxContent",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:!1,link:function($scope,$element){var contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[];""!==contentQuestion&&(answers.forEach(function(answer,$index){var fieldMark=QuestionService.getAnswerMarkUUID(answer),FIELD_TEMPLATE=' <select ng-model="question.userAnswer['+$index+'].selectedItem"  ng-options="item.text for item in question.answers['+$index+'].items"  class="input-sm"/> ';contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]),angular.module("question").directive("multipleResponseQuestion",function(){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/multiple-response-question-directive-template.html",controller:function($scope){var controller=this,index=-1;controller.onSelectedAnswer=function(answer){index=controller.isExitOnUserAnswerList(answer),-1===index?$scope.question.userAnswer.push(answer):$scope.question.userAnswer.splice(index,1)},controller.isExitOnUserAnswerList=function(answer){for(var i=0;i<$scope.question.userAnswer.length;i++)if($scope.question.userAnswer[i].answerId===answer.answerId)return i;return-1},controller.isSelectedAnswer=function(answer){return-1!==controller.isExitOnUserAnswerList(answer)}}}}),angular.module("question").directive("questionCreate",["QuestionService","ApplicationModals","$rootScope",function(QuestionService,ApplicationModals,$rootScope){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/question-create/question-create.html",controller:function($scope){var controller=this;controller.models={questionTypes:[]},$scope.tinymceOptions=$rootScope.tinymceOptions,controller.openPreviewQuestionModal=function(){ApplicationModals.openPreviewQuestionModal($scope.question)},controller.onInitQuestionCreateDirective=function(){},controller.addNewAnswer=function(){$scope.question.answers.push(QuestionService.getNewAnswerItemByType($scope.question.questionType.type))}}}}]),angular.module("question").directive("fillInBlankQuestionEvaluate",["EvaluatingService",function(EvaluatingService){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/fill-in-blank-question.html",controller:function($scope){this.onInitFillBankQuestionEvaluate=function(){}}}}]).directive("fillInBlankContentEvaluate",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:!1,link:function($scope,$element){var contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[];""!==contentQuestion&&(answers.forEach(function(answer,$index){var fieldMark=QuestionService.getAnswerMarkUUID(answer),userAnswer="",isCorrectAnswer=!1;try{userAnswer=$scope.question.userAnswer[$index]||""}catch(err){}answer.texts=answer.texts||[],answer.texts.some(function(text){if(text===userAnswer.text)return isCorrectAnswer=!0,!0});var FIELD_TEMPLATE='<div class="form-group {0}" style="display: inline-block"><b>'+($index+1)+'.</b><input type="text" ng-model="question.userAnswer['+$index+'].text"  class="form-control  input-sm" placeholder="Enter an answer" disabled/></div>';FIELD_TEMPLATE=isCorrectAnswer?FIELD_TEMPLATE.format("has-success"):FIELD_TEMPLATE.format("has-error"),contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]),angular.module("question").directive("multipleChoiceQuestionEvaluate",function(){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/multiple-choice-question.html",controller:function($scope){$scope.answers=[],$scope.isCorrect=!1,$scope.initEvaluateMultipleChoiceQuestion=function(){var userAnswer=$scope.question.userAnswer||{};($scope.question.answers||[]).forEach(function(answer){answer.answerId===userAnswer.answerId?($scope.isCorrect=answer.isCorrect,$scope.answers.push({isSelected:!0,isCorrect:answer.isCorrect,content:answer.content})):$scope.answers.push({isSelected:!1,isCorrect:answer.isCorrect,content:answer.content})})}}}}),angular.module("question").directive("multipleChoiceTextQuestionEvaluate",function(){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/multiple-choice-text-question.html",controller:function($scope){this.onInitMultipleChoiceTextQuestion=function(){var question=$scope.question||{};question!=={}&&question.answers.forEach(function(answer){question.userAnswer.push({answerId:answer.answerId,selectedItem:{}})})}}}}).directive("comboBoxContentEvaluate",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:!1,link:function($scope,$element){var contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[];""!==contentQuestion&&(answers.forEach(function(answer,$index){var fieldMark=QuestionService.getAnswerMarkUUID(answer),isUserCorrect=!1;try{isUserCorrect=answer.items.some(function(item){if(item.id===$scope.question.userAnswer[$index].selectedItem.id&&item.isCorrect)return!0})}catch(err){}var FIELD_TEMPLATE="<b>"+($index+1)+'.</b><div class="form-group {0}" style="display: inline-block"> <select ng-model="question.userAnswer['+$index+'].selectedItem"  ng-options="item.text for item in question.userAnswer['+$index+']"  class="form-control input-sm" disabled/></div>';FIELD_TEMPLATE=isUserCorrect?FIELD_TEMPLATE.format("has-success"):FIELD_TEMPLATE.format("has-error"),contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]),angular.module("question").directive("multipleResponseQuestionEvaluate",function(){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/multiple-response-question.html",controller:function($scope){$scope.answers=[],$scope.result={totalCorrectAnswer:0,correct:0,incorrect:0},$scope.initEvaluateMultipleResponseQuestion=function(){var userAnswers=$scope.question.userAnswer||[];($scope.question.answers||[]).forEach(function(answer,index){answer.isCorrect&&$scope.result.totalCorrectAnswer++,$scope.answers.push({isSelected:!1,isCorrect:answer.isCorrect,content:answer.content}),userAnswers.forEach(function(userAnswer){answer.answerId===userAnswer.answerId&&($scope.isCorrect=answer.isCorrect,answer.isCorrect?$scope.result.correct++:$scope.result.incorrect++,$scope.answers[index]={isSelected:!0,isCorrect:answer.isCorrect,content:answer.content})})})}}}}),angular.module("question").directive("sequenceQuestionEvaluate",["Utilities",function(Utilities){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/sequence-question.html",controller:function($scope){$scope.ElementUUIDClass=Utilities.generateUUID(),$scope.onInitSequenceQuestion=function(){}}}}]),angular.module("question").directive("trueFalseQuestionEvaluate",function(){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/true-false-question.html",controller:function($scope){$scope.answers=[],$scope.isCorrect=!1,$scope.initEvaluateTrueFalseQuestion=function(){var userAnswer=$scope.question.userAnswer||{};($scope.question.answers||[]).forEach(function(answer){answer.answerId===userAnswer.answerId?($scope.isCorrect=answer.isCorrect,$scope.answers.push({isSelected:!0,isCorrect:answer.isCorrect,content:answer.content})):$scope.answers.push({isSelected:!1,isCorrect:answer.isCorrect,content:answer.content})})}}}}),angular.module("question").directive("typeInQuestionEvaluate",function(){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/type-in-question.html",controller:function($scope){$scope.answers=[],$scope.isCorrect=!1,$scope.initEvaluateTypeInQuestion=function(){var userAnswer=$scope.question.userAnswer||"";($scope.question.answers||[]).forEach(function(answer){answer===userAnswer&&($scope.isCorrect=!0)})}}}}),angular.module("question").directive("wordBankQuestionEvaluate",["Utilities",function(Utilities){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/question-result-evaluate/words-bank-question.html",controller:function($scope){var controller=this;$scope.nameSpaceUUID=Utilities.generateUUID(),$scope.sourceAnswerContainerID=Utilities.generateUUID(),$scope.items=[],controller.onInitWordsBankQuestionEvaluate=function(){var question=$scope.question||{};question.userAnswer=question.userAnswer||[],question!=={}&&question.answers.forEach(function(answer){answer.items=answer.items||[],answer.items.forEach(function(item){-1===question.userAnswer.findIndex(function(userItem){return item.id===userItem.id})&&$scope.items.push({answerId:answer.answerId,id:item.id,content:item.text})})})}}}}]).directive("wordBankQuestionContentEvaluate",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:{question:"=questionItem"},link:function($scope,$element){var correctAnswer,userSelectedItem,contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[],userAnswerData=$scope.question.userAnswer||[];""!==contentQuestion&&(answers.forEach(function(answer,index){var fieldMark=QuestionService.getAnswerMarkUUID(answer),userAnswer=userAnswerData[index]||null;userAnswer?(correctAnswer=answers.find(function(answer){return answer.answerId===userAnswer.answerId}))&&(userSelectedItem=correctAnswer.items.find(function(item){return item.id===userAnswer.id})):userSelectedItem={text:"Not Selected",isCorrect:!1};var FIELD_TEMPLATE="<b>"+(index+1)+'.</b><div class="drag-and-drop-item" style="border-color: {0}"><p>{1}</p></div>';userSelectedItem&&(FIELD_TEMPLATE=userSelectedItem.isCorrect?FIELD_TEMPLATE.format("#5cb85c",userSelectedItem.text):FIELD_TEMPLATE.format("#d9534f",userSelectedItem.text)),contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]),angular.module("question").directive("sequenceQuestion",["Utilities",function(Utilities){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/sequence-question-directive-template.html",controller:function($scope){var nameSpaceUUID=Utilities.generateUUID();$scope.ElementUUIDClass=Utilities.generateUUID(),$scope.onInitSequenceQuestion=function(){var question=$scope.question||{};if(question!=={}){if(question.userAnswer&&question.userAnswer.length>0)return;question.answers.forEach(function(answer){question.userAnswer.push({id:answer.id,text:answer.text})}),question.userAnswer=Utilities.shuffleArray(question.userAnswer)}},$scope.dragularOptions={scope:$scope,nameSpace:nameSpaceUUID,revertOnSpill:!0,containersModel:[$scope.question.userAnswer]}}}}]),angular.module("question").directive("trueFalseQuestion",["_",function(_){return{restrict:"AE",scope:{question:"="},link:function($scope){$scope.question.answers=_.shuffle($scope.question.answers)},templateUrl:"/modules/question/client/directives/templates/true-false-question-directive-template.html"}}]),angular.module("question").directive("typeInQuestion",function(){return{restrict:"AE",scope:{question:"="},templateUrl:"/modules/question/client/directives/templates/type-in-question-directive-template.html"}}),angular.module("question").directive("wordBankQuestion",["Utilities",function(Utilities){return{restrict:"AE",scope:{question:"="},controllerAs:"ctrl",templateUrl:"/modules/question/client/directives/templates/words-bank-question-directive-template.html",controller:function($scope){var controller=this;$scope.nameSpaceUUID=Utilities.generateUUID(),$scope.sourceAnswerContainerID=Utilities.generateUUID(),$scope.items=[],controller.onInitWordsBankQuestion=function(){var question=$scope.question||{};question!=={}&&question.answers.forEach(function(answer){answer.items=answer.items||[],answer.items.forEach(function(item){$scope.items.push({answerId:answer.answerId,id:item.id,content:item.text})})})},$scope.dragularOptions={classes:{mirror:"gu-mirror",hide:"gu-hide",transit:"gu-transit",overActive:"gu-over-active",overAccepts:"gu-over-accept",overDeclines:"gu-over-decline"},containersModel:[$scope.items],scope:$scope,revertOnSpill:!0},$scope.$on("dragulardrop",function(Event,el,targetContainer,sourceContainer,containerModel,elIndex,targetModel,dropIndex){var sourceItems=containerModel||[],items=targetModel||[],newDropIndex=Number(dropIndex);if((angular.element(targetContainer).attr("id")||"")!==$scope.sourceAnswerContainerID){items.length>1&&(0===newDropIndex&&(sourceItems.push(items[1]),items.splice(1,1)),1===newDropIndex&&(sourceItems.push(items[0]),items.splice(0,1)));var newEl=angular.element(targetContainer),answerId=newEl.parent().attr("id");if(answerId){var item={answerId:answerId,id:items[0].id,content:items[0].content},indexUpdate=$scope.question.userAnswer.findIndex(function(answer){return answer.answerId===item.answerId});-1!==indexUpdate?$scope.question.userAnswer[indexUpdate]=item:$scope.question.userAnswer.push(item)}}1===sourceItems.length&&angular.element(sourceContainer).removeClass("border"),1===items.length&&angular.element(targetContainer).removeClass("border")}),$scope.$on("dragulardrag",function(Event,el,targetContainer){angular.element(targetContainer).hasClass("border")||angular.element(targetContainer).addClass("border")}),$scope.$on("dragularcancel",function(Event,el,container){angular.element(container).hasClass("border")&&angular.element(container).removeClass("border")})}}}]).directive("wordBankQuestionContent",["$compile","QuestionService",function($compile,QuestionService){return{restrict:"AE",scope:{question:"=questionItem"},link:function($scope,$element){var contentQuestion=$scope.question.content||"",answers=$scope.question.answers||[];""!==contentQuestion&&(answers.forEach(function(answer){var fieldMark=QuestionService.getAnswerMarkUUID(answer),FIELD_TEMPLATE='<drag-and-drop-bag id="'+answer.answerId+'" />';contentQuestion=contentQuestion.replace(fieldMark,FIELD_TEMPLATE)}),$element.replaceWith($compile(contentQuestion)($scope)))}}}]).directive("dragAndDropBag",["Utilities",function(Utilities){return{restrict:"AE",scope:{},templateUrl:"/modules/question/client/directives/templates/drag-and-drop-bag-component.html",controller:function($scope){$scope.ElementUUIDClass=Utilities.generateUUID(),$scope.items=[],$scope.Options={classes:{mirror:"gu-mirror",hide:"gu-hide",transit:"gu-transit",overActive:"gu-over-active",overAccepts:"gu-over-accept",overDeclines:"gu-over-decline"},containersModel:[$scope.items],scope:$scope,nameSpace:$scope.nameSpaceUUID,revertOnSpill:!0}}}}]),angular.module("question").factory("EvaluatingService",[function(){function compareTwoStringAnswer(a,b){return!(!a||!b)&&(a=trimAnserString(a),b=trimAnserString(b),a===b)}function trimAnserString(s){return s?s.toString().trim().toLowerCase().replace(/\s+/g,""):""}var evaluatingService={};return evaluatingService.doEvaluateTrueFalseQuestion=function(question){for(var userAnswerData=question.userAnswer.answerId||"",i=0;i<question.answers.length;i++)if(userAnswerData===question.answers[i].answerId)return!0===question.answers[i].isCorrect},evaluatingService.doEvaluateMultipleChoiceQuestion=function(question){for(var userAnswerData=question.userAnswer.answerId||"",i=0;i<question.answers.length;i++)if(userAnswerData===question.answers[i].answerId)return!0===question.answers[i].isCorrect},evaluatingService.doEvaluateMultipleResponseQuestion=function(question){var userAnswerData=question.userAnswer||[],answers=question.answers||[],result={totalCorrectAnswer:0,correct:0,incorrect:0};return answers.forEach(function(answer){answer.isCorrect&&result.totalCorrectAnswer++}),0!==userAnswerData.length&&userAnswerData.forEach(function(userAnswer){userAnswer.isCorrect?result.correct++:result.incorrect++}),result},evaluatingService.doEvaluateTypeInQuestion=function(question){var userAnswerData=question.userAnswer||[],answers=question.answers||[];if(0!==userAnswerData.length){return answers.some(function(text){return compareTwoStringAnswer(userAnswerData,text)})}return!1},evaluatingService.doEvaluateFillInBlankQuestion=function(question){var userAnswerData=question.userAnswer||[],result={totalCorrectAnswer:0,correct:0,incorrect:0};return result.totalCorrectAnswer=question.answers.length||0,0!==userAnswerData.length&&userAnswerData.forEach(function(userAnswer){var correctAnswer=question.answers.find(function(answer){return answer.answerId===userAnswer.answerId});correctAnswer||(correctAnswer=[]),correctAnswer.texts||(correctAnswer.texts=[]),correctAnswer.texts.some(function(text){return compareTwoStringAnswer(userAnswer.text,text)})?result.correct++:result.incorrect++}),result},evaluatingService.doEvaluateMultipleChoiceTextQuestion=function(question){var userAnswerData=question.userAnswer||[],result={totalCorrectAnswer:0,correct:0,incorrect:0};return result.totalCorrectAnswer=question.answers.length||0,0!==userAnswerData.length&&userAnswerData.forEach(function(userAnswer){var correctAnswer=question.answers.find(function(answer){return answer.answerId===userAnswer.answerId});correctAnswer||(correctAnswer=[]),correctAnswer.items||(correctAnswer.items=[]);var userSelectedItem=correctAnswer.items.find(function(item){return item.id===userAnswer.selectedItem.id});userSelectedItem&&(userSelectedItem.isCorrect?result.correct++:result.incorrect++)}),result},evaluatingService.doEvaluateSequenceQuestion=function(question){var userAnswerData=question.userAnswer||[];return question.answers=question.answers||[],question.answers.every(function(correctAnswer,index){return correctAnswer.id===userAnswerData[index].id})},evaluatingService.doEvaluateWordBankQuestion=function(question){var result={totalCorrectAnswer:0,correct:0,incorrect:0},userAnswerData=question.userAnswer||[];return question.answers=question.answers||[],result.totalCorrectAnswer=question.answers.length,userAnswerData.forEach(function(userAnswer){var correctAnswer=question.answers.find(function(answer){return answer.answerId===userAnswer.answerId});if(correctAnswer){var userSelectedItem=correctAnswer.items.find(function(item){return item.id===userAnswer.id});userSelectedItem&&userSelectedItem.isCorrect?result.correct++:result.incorrect++}}),result},evaluatingService}]),angular.module("question").factory("QuestionService",["Utilities","$resource","$rootScope",function(Utilities,$resource,$rootScope){var questionService={};return questionService.DAO=function(){return $resource($rootScope.socissAPI+"/question/:questionId",{questionId:"@id"},{update:{method:"PUT"}})},questionService.getAnswerMarkUUID=function(answer){var fieldMark="$F{{0}}";return fieldMark=fieldMark.format(answer.answerId)},questionService.getAnswerMarkUUIDHTML=function(answer){var fieldMark='<div id="{0}" class="{1}"><p>Answer</p></div>';return fieldMark=fieldMark.format(answer.answerId,"display: inline-block;height: 35px;padding: 6px 13px;font-size: 14px;line-height: 1;color: green;background-color: #fff;border: 1px solid #ccc;border-radius: 4px;min-width: 70px;font-weight: 600;margin: 2px;")},questionService.getNewAnswerItemByType=function(type){var newAnswerItem={};switch(type){case 1:case 2:case 3:newAnswerItem={answerId:Utilities.generateUUID(),content:"New answer",isCorrect:!1};break;case 4:newAnswerItem="New answer";break;case 5:newAnswerItem={answerId:Utilities.generateUUID(),texts:["Response A","Response B","Response C"]};break;case 6:newAnswerItem={answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Response A",isCorrect:!0},{id:Utilities.generateUUID(),text:"Response B",isCorrect:!1},{id:Utilities.generateUUID(),text:"Response C",isCorrect:!1}]};break;case 7:newAnswerItem={id:Utilities.generateUUID(),text:"New answer"};break;case 8:newAnswerItem={answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Response A",isCorrect:!0},{id:Utilities.generateUUID(),text:"Response B",isCorrect:!1},{id:Utilities.generateUUID(),text:"Response C",isCorrect:!1}]}}return newAnswerItem},questionService.getQuestionByType=function(type){var newQuestion;switch(type){case 1:newQuestion=questionService.getTrueFalseQuestionInstance();break;case 2:newQuestion=questionService.getMultipleChoiceQuestionInstance();break;case 3:newQuestion=questionService.getMultipleResponseQuestion();break;case 4:newQuestion=questionService.getTypeInQuestionInstance();break;case 5:newQuestion=questionService.getFillInBlankQuestionInstance();break;case 6:newQuestion=questionService.getMultipleChoiceTextQuestion();break;case 7:newQuestion=questionService.getSequenceQuestion();break;case 8:newQuestion=questionService.getWordBankQuestion()}return newQuestion},questionService.getAllQuestionType=function(){return[{type:1,name:"True False Question.",description:"User only can create two response of this type question. And only one is correct."},{type:2,name:"Multiple choice Question.",description:"User can create many response of this type question. And only one is correct."},{type:3,name:"Multiple Response Question.",description:"User can create many response of this type question. And can has many response correct."},{type:4,name:"Type In Question.",description:"User can create many response of this type question for exactly one text location. And only one answer text is enter by user."},{type:5,name:"Fill In The Blank Question.",description:"User can create many response of this type question for exactly text location. May many answers text is enter by user for each text fields."},{type:6,name:"Multiple Choice Text Question.",description:"User can create many response of this type question for exactly text location. And user can select correct answer in combo box. Only one response is true."},{type:7,name:"Sequence Question.",description:"User can create many response of this type question adn define correct order.And user can select correct order of answer by drag and drop. Only one order is true."},{type:8,name:"Word Bank Question.",description:"User can create many response of this type question for exactly text location. And user can select correct answer word bank and drop to correct location."}]},questionService.getQuestionTypeByType=function(type){return questionService.getAllQuestionType().find(function(item){if(item.type===type)return item})||{}},questionService.getQuestionInstance=function(){return{id:Utilities.generateUUID(),title:"",description:"",content:"",answers:{},questionType:{},isAnswered:!1,userAnswer:{},configs:questionService.setDefaultQuestionConfig(),createdAt:new Date,updatedAt:new Date}},questionService.setDefaultQuestionConfig=function(){return{attemptTimes:1,allowShuffle:!0,onCorrectMessage:"You are correct !",onIncorrectMessage:"You are incorrect !"}},questionService.getTrueFalseQuestionInstance=function(){var trueFalseQuestion;return trueFalseQuestion=questionService.getQuestionInstance(),trueFalseQuestion.questionType=questionService.getQuestionTypeByType(1),trueFalseQuestion.title="The sun is only one ?",trueFalseQuestion.answers=[{answerId:Utilities.generateUUID(),content:"True",isCorrect:!0},{answerId:Utilities.generateUUID(),content:"False",isCorrect:!1}],trueFalseQuestion.userAnswer={},trueFalseQuestion},questionService.getMultipleChoiceQuestionInstance=function(){var multipleChoiceQuestion;return multipleChoiceQuestion=questionService.getQuestionInstance(),multipleChoiceQuestion.questionType=questionService.getQuestionTypeByType(2),multipleChoiceQuestion.title="The sea has color ?",multipleChoiceQuestion.answers=[{answerId:Utilities.generateUUID(),content:"Blue",isCorrect:!0},{answerId:Utilities.generateUUID(),content:"Red",isCorrect:!1},{answerId:Utilities.generateUUID(),content:"Yellow",isCorrect:!1}],multipleChoiceQuestion.userAnswer={},multipleChoiceQuestion},questionService.getMultipleResponseQuestion=function(){var multipleResponseQuestion;return multipleResponseQuestion=questionService.getQuestionInstance(),multipleResponseQuestion.questionType=questionService.getQuestionTypeByType(3),multipleResponseQuestion.title="What is exits version of USB ?",multipleResponseQuestion.answers=[{answerId:Utilities.generateUUID(),content:"2.0",isCorrect:!0},{answerId:Utilities.generateUUID(),content:"3.0",isCorrect:!0},{answerId:Utilities.generateUUID(),content:"6.0",isCorrect:!1}],multipleResponseQuestion.userAnswer=[],multipleResponseQuestion},questionService.getTypeInQuestionInstance=function(){var typeInQuestion=questionService.getQuestionInstance();return typeInQuestion.title="Fill in gap with correct word.",typeInQuestion.description="Selected one or multiple word and enter to text field.",typeInQuestion.content="The sea has color ______",typeInQuestion.questionType=questionService.getQuestionTypeByType(4),typeInQuestion.answers=["blue","mau xanh","mau xanh duong"],typeInQuestion.userAnswer="",typeInQuestion},questionService.getFillInBlankQuestionInstance=function(){var fillInBlankQuestion=questionService.getQuestionInstance();return fillInBlankQuestion.title="Fill in gap with correct word.",fillInBlankQuestion.description="Selected one or multiple word and enter to text field.",fillInBlankQuestion.questionType=questionService.getQuestionTypeByType(5),fillInBlankQuestion.answers=[{answerId:Utilities.generateUUID(),texts:["blue","mau xanh","mau xanh duong"]},{answerId:Utilities.generateUUID(),texts:["yellow","mau vang"]}],fillInBlankQuestion.content="<p>The sea has color</p> "+questionService.getAnswerMarkUUID(fillInBlankQuestion.answers[0])+"<p> and the sun has color </p>"+questionService.getAnswerMarkUUID(fillInBlankQuestion.answers[1]),fillInBlankQuestion.userAnswer=[],fillInBlankQuestion},questionService.getMultipleChoiceTextQuestion=function(){var multipleChoiceTextQuestion=questionService.getQuestionInstance();return multipleChoiceTextQuestion.title="Fill in gap with correct word from combo box.",multipleChoiceTextQuestion.description="Selected one word from combo box.",multipleChoiceTextQuestion.questionType=questionService.getQuestionTypeByType(6),multipleChoiceTextQuestion.answers=[{answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Blue",isCorrect:!0},{id:Utilities.generateUUID(),text:"Pink",isCorrect:!1},{id:Utilities.generateUUID(),text:"Red",isCorrect:!1}]},{answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Yellow",isCorrect:!0},{id:Utilities.generateUUID(),text:"Green",isCorrect:!1},{id:Utilities.generateUUID(),text:"Violent",isCorrect:!1}]}],multipleChoiceTextQuestion.content="<p>The sea has color</p> "+questionService.getAnswerMarkUUID(multipleChoiceTextQuestion.answers[0])+"<p> and the sun has color </p>"+questionService.getAnswerMarkUUID(multipleChoiceTextQuestion.answers[1]),multipleChoiceTextQuestion.userAnswer=[],multipleChoiceTextQuestion},questionService.getSequenceQuestion=function(){var sequence=questionService.getQuestionInstance();return sequence.title="What is correct order of steps create file and change that file name on OS ?",sequence.description="Drag and drop correct order responses.",sequence.questionType=questionService.getQuestionTypeByType(7),sequence.answers=[{id:Utilities.generateUUID(),text:"Define path"},{id:Utilities.generateUUID(),text:"Create file"},{id:Utilities.generateUUID(),text:"Change name"}],sequence.userAnswer=[],sequence},questionService.getWordBankQuestion=function(){var wordBankQuestion=questionService.getQuestionInstance();return wordBankQuestion.title="Fill in gap with correct word from word bank.",wordBankQuestion.description="Selected one word from word bank.",wordBankQuestion.questionType=questionService.getQuestionTypeByType(8),wordBankQuestion.answers=[{answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Blue",isCorrect:!0},{id:Utilities.generateUUID(),text:"Green",isCorrect:!1},{id:Utilities.generateUUID(),text:"Violent",isCorrect:!1}]},{answerId:Utilities.generateUUID(),items:[{id:Utilities.generateUUID(),text:"Yellow",isCorrect:!0},{id:Utilities.generateUUID(),text:"Gray",isCorrect:!1},{id:Utilities.generateUUID(),text:"Red",isCorrect:!1}]}],wordBankQuestion.content="<p>The sea has color</p> "+questionService.getAnswerMarkUUID(wordBankQuestion.answers[0])+"<p> and the sun has color </p>"+questionService.getAnswerMarkUUID(wordBankQuestion.answers[1]),wordBankQuestion.userAnswer=[],wordBankQuestion},questionService}]);!function(){function RoutesConfigs($stateProvider,RouteResolverProvider){}angular.module("quiz").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider","RouteResolverProvider"]}(),function(){function Controller($resource,$window,QuizService,_,$interval,Utilities,$scope,QuizScores,toastr){function getQuestionByTransactionId(){if(!transaction_id)throw new Error("transaction_id not found.");QuizService.API().getChallengeQuestion({transaction_id:transaction_id},function(quiz){quiz.questions=_.shuffle(quiz.questions),vm.quiz=quiz,Utilities.doHightlightCode()})}function submitSolution(){var result=QuizScores.doDefaultCalculateStrategy(vm.quiz);QuizService.API().submitSolution({transaction_id:transaction_id,quiz_id:vm.quiz.id,scores:result.scores,questions:vm.quiz.questions,calculate_strategy:{code:"default_strategy",name:"Default Scores Calculate Strategy."}},function(){toastr.success("Submit answer completed.","Successfully")})}var vm=this,transaction_id=$window.transaction_id+"";vm.submitSolution=submitSolution,function(){getQuestionByTransactionId()}();var autoSaveQuizInterval=$interval(function(){if(vm.quiz&&vm.quiz.id){var _key="SUPER_QUIZ_"+transaction_id;Utilities.sessionStorageManager.setValue(_key,vm.quiz)}},5e3);$scope.$on("$destroy",function(){$interval.cancel(autoSaveQuizInterval)})}angular.module("quiz").controller("QuizChallengeController",Controller),Controller.$inject=["$resource","$window","QuizService","_","$interval","Utilities","$scope","QuizScoresCalculationService","toastr"]}(),
angular.module("quiz").controller("QuizManagementController",["QuizService","QuestionService","$scope","Authentication","ChallengeService","$window","toastr",function(QuizService,QuestionService,$scope,Authentication,ChallengeService,$window,toastr){function initQuizPage(){$window.module_id?initUpdateQuizPage():initCreateQuizPage()}function initUpdateQuizPage(){if(vm.models.questionTypes=QuestionService.getAllQuestionType(),!$window.module_id)throw new Error("module_id not found.");QuizService.API().get({id:$window.module_id},function(quiz){vm.models.quiz=quiz[0]||quiz})}function initCreateQuizPage(){vm.models.quiz=QuizService.getQuizInstance(),vm.models.questionTypes=QuestionService.getAllQuestionType()}function addNewQuestion(questionType){var newQuestion=QuestionService.getQuestionByType(questionType.type);newQuestion&&vm.models.quiz.questions.push(newQuestion)}function quizFormSubmit($valid){$valid&&(vm.models.quiz.id?updateQuiz():createQuiz())}function createQuiz(){delete vm.models.quiz.id,vm.models.quiz.author=vm.authentication.user.id,QuizService.API().save(vm.models.quiz,function(_quiz){vm.models.quiz=_quiz;var challenge={problemId:$window.problem_id,moduleId:_quiz.id,challengeTypeCode:"SUPER_QUIZ"};ChallengeService.createChallenge(challenge).then(function(res){toastr.success("Create new quiz success.","Successfully")})})}function updateQuiz(){vm.models.quiz.author||(vm.models.quiz.author=Authentication.user.id),vm.models.quiz.author.id&&(vm.models.quiz.author=vm.models.quiz.author.id),QuizService.API().update(vm.models.quiz,function(quiz){toastr.success("Update quiz success.","Successfully")})}var vm=this;vm.addNewQuestion=addNewQuestion,vm.quizFormSubmit=quizFormSubmit,vm.initQuizPage=initQuizPage,vm.authentication=Authentication,vm.models={quiz:{}},$scope.removeQuestion=function(question){var index=vm.models.quiz.questions.findIndex(function(item){return item.id===question.id});confirm("Are you sure ? \nDelete selected question. !!")&&-1!==index&&vm.models.quiz.questions.splice(index,1)}}]),angular.module("quiz").controller("QuizPreviewController",["$scope","_","$timeout","Utilities",function($scope,_,$timeout,Utilities){function doEvaluatingQuiz(){vm.isShowEvaluatePane=!0}function reDoEvaluatingQuiz(){vm.isShowEvaluatePane=!1}var ModalItems=_.get($scope,"$resolve.ModalItems",{}),vm=this;Utilities.doHightlightCode(),vm.doEvaluatingQuiz=doEvaluatingQuiz,vm.reDoEvaluatingQuiz=reDoEvaluatingQuiz,vm.model={quiz:ModalItems.quiz||null},vm.isShowEvaluatePane=!1}]),function(){function Controller($resource,$window,QuizService){function getSolutionByTransactionId(){if(!transaction_id)throw new Error("transaction_id not found.");QuizService.API().getSubmissionOfUser({transaction_id:transaction_id},function(quiz){vm.quiz=quiz})}var vm=this,transaction_id=$window.transaction_id+"";!function(){getSolutionByTransactionId()}()}angular.module("quiz").controller("QuizSolutionController",Controller),Controller.$inject=["$resource","$window","QuizService"]}(),angular.module("quiz").directive("quizQuestionEvaluateDirective",["$compile",function($compile){var directive={},service={};return directive.restrict="AE",directive.scope={questionItem:"=question"},directive.link=function($scope,$element){var question=$scope.questionItem||{};if(question.questionType||(question.questionType={type:-1}),question!=={})switch(question.questionType.type){case 1:$element.replaceWith($compile(service.getTrueFalseQuestionTemplate())($scope));break;case 2:$element.replaceWith($compile(service.getMultipleChoiceQuestionTemplate())($scope));break;case 3:$element.replaceWith($compile(service.getMultipleResponseQuestionTemplate())($scope));break;case 4:$element.replaceWith($compile(service.getTypeInQuestionTemplate())($scope));break;case 5:$element.replaceWith($compile(service.getFillInBlankQuestionTemplate())($scope));break;case 6:$element.replaceWith($compile(service.getMultipleChoiceTextQuestionTemplate())($scope));break;case 7:$element.replaceWith($compile(service.getSequenceQuestionTemplate())($scope));break;case 8:$element.replaceWith($compile(service.getWordBankQuestionTemplate())($scope))}},service.getTrueFalseQuestionTemplate=function(){return'<true-false-question-evaluate question="questionItem"></true-false-question-evaluate>'},service.getMultipleChoiceQuestionTemplate=function(){return'<multiple-choice-question-evaluate question="questionItem"></multiple-choice-question-evaluate>'},service.getMultipleResponseQuestionTemplate=function(){return'<multiple-response-question-evaluate question="questionItem"></multiple-response-question-evaluate>'},service.getTypeInQuestionTemplate=function(){return'<type-in-question-evaluate question="questionItem"></type-in-question-evaluate>'},service.getFillInBlankQuestionTemplate=function(){return'<fill-in-blank-question-evaluate question="questionItem"></fill-in-blank-question-evaluate>'},service.getMultipleChoiceTextQuestionTemplate=function(){return'<multiple-choice-text-question-evaluate question="questionItem"></multiple-choice-text-question-evaluate>'},service.getSequenceQuestionTemplate=function(){return'<sequence-question-evaluate question="questionItem"></sequence-question-evaluate>'},service.getWordBankQuestionTemplate=function(){return'<word-bank-question-evaluate question="questionItem"></word-bank-question-evaluate>'},directive}]),angular.module("quiz").directive("quizQuestionDirective",["$compile","$timeout",function($compile,$timeout){var directive={},service={};return directive.restrict="AE",directive.scope={questionItem:"=question"},directive.link=function($scope,$element){var question=$scope.questionItem||{};if(question.questionType||(question.questionType={type:-1}),question!=={})switch(question.questionType.type){case 1:$element.replaceWith($compile(service.getTrueFalseQuestionTemplate())($scope));break;case 2:$element.replaceWith($compile(service.getMultipleChoiceQuestionTemplate())($scope));break;case 3:$element.replaceWith($compile(service.getMultipleResponseQuestionTemplate())($scope));break;case 4:$element.replaceWith($compile(service.getTypeInQuestionTemplate())($scope));break;case 5:$element.replaceWith($compile(service.getFillInBlankQuestionTemplate())($scope));break;case 6:$element.replaceWith($compile(service.getMultipleChoiceTextQuestionTemplate())($scope));break;case 7:$element.replaceWith($compile(service.getSequenceQuestionTemplate())($scope));break;case 8:$element.replaceWith($compile(service.getWordBankQuestionTemplate())($scope))}},directive.controller=function(){$timeout(function(){Prism.highlightAll()},500)},service.getTrueFalseQuestionTemplate=function(){return'<true-false-question question="questionItem"></true-false-question>'},service.getMultipleChoiceQuestionTemplate=function(){return'<multiple-choice-question question="questionItem"></multiple-choice-question>'},service.getMultipleResponseQuestionTemplate=function(){return'<multiple-response-question question="questionItem"></multiple-response-question>'},service.getTypeInQuestionTemplate=function(){return'<type-in-question question="questionItem"></type-in-question>'},service.getFillInBlankQuestionTemplate=function(){return'<fill-in-blank-question question="questionItem"></fill-in-blank-question>'},service.getMultipleChoiceTextQuestionTemplate=function(){return'<multiple-choice-text-question question="questionItem"></multiple-choice-text-question>'},service.getSequenceQuestionTemplate=function(){return'<sequence-question question="questionItem"></sequence-question>'},service.getWordBankQuestionTemplate=function(){return'<word-bank-question question="questionItem"></word-bank-question>'},directive}]),angular.module("quiz").factory("QuizScoresCalculationService",["EvaluatingService",function(EvaluatingService){var services={};return services.doDefaultCalculateStrategy=function(quiz){var scores=0,questions=quiz.questions||[];return questions.forEach(function(question){question.questionType||(question.questionType={type:-1});var result={};switch(question.questionType.type){case 1:EvaluatingService.doEvaluateTrueFalseQuestion(question)&&scores++;break;case 2:EvaluatingService.doEvaluateMultipleChoiceQuestion(question)&&scores++;break;case 3:result=EvaluatingService.doEvaluateMultipleResponseQuestion(question),result.correct>=1&&scores++;break;case 4:EvaluatingService.doEvaluateTypeInQuestion(question)&&scores++;break;case 5:result=EvaluatingService.doEvaluateFillInBlankQuestion(question),result.correct>=1&&scores++;break;case 6:result=EvaluatingService.doEvaluateMultipleChoiceTextQuestion(question),result.correct>=1&&scores++;break;case 7:EvaluatingService.doEvaluateSequenceQuestion(question)&&scores++;break;case 8:result=EvaluatingService.doEvaluateWordBankQuestion(question),result.correct>=1&&scores++}}),questions.length>0?quiz.scores=Math.ceil(scores/questions.length*100):quiz.scores=0,quiz.calculateStrategyInfo={name:"Default Scores Calculate Strategy.",calculatedAt:new Date},quiz},services}]),angular.module("quiz").factory("QuizService",["Utilities","QuestionService","$resource","$rootScope",function(Utilities,QuestionService,$resource,$rootScope){var quizService={};return quizService.API=function(){return $resource($rootScope.socissAPI+"/quiz/:id",{id:"@id"},{update:{method:"PUT"},getChallengeQuestion:{method:"GET",url:"/api/quiz"},submitSolution:{method:"POST",url:"/api/quiz/submission"},getSubmissionOfUser:{method:"GET",url:$rootScope.socissAPI+"/quiz/user-submission"}})},quizService.getQuizInstance=function(){return{title:"",description:"",questions:[],author:{},scores:0,owner:{},createdAt:new Date,updatedAt:new Date,calculateStrategyInfo:{name:"Default Scores Calculate Strategy.",calculatedAt:null}}},quizService.getSampleQuizForTest=function(){var quiz=quizService.getQuizInstance();quiz.title="Sample Quiz",quiz.description="This is sample quiz make by hard code.",quiz.author={name:"Quyen Nguyen Huu",username:"nghuuquyen",email:"nghuuquyen@gmail.com"},quiz.owner={name:"Quyen Nguyen Huu",username:"nghuuquyen",email:"nghuuquyen@gmail.com",type:"user"};var trueFalseQuestion=QuestionService.getTrueFalseQuestionInstance(),multipleChoiceQuestion=QuestionService.getMultipleChoiceQuestionInstance(),multipleResponseQuestion=QuestionService.getMultipleResponseQuestion(),typeInQuestion=QuestionService.getTypeInQuestionInstance(),fillInBlankQuestion=QuestionService.getFillInBlankQuestionInstance(),multipleChoiceTextQuestion=QuestionService.getMultipleChoiceTextQuestion(),sequenceQuestion=QuestionService.getSequenceQuestion(),wordBankQuestion=QuestionService.getWordBankQuestion();return quiz.questions.push(trueFalseQuestion),quiz.questions.push(multipleChoiceQuestion),quiz.questions.push(multipleResponseQuestion),quiz.questions.push(typeInQuestion),quiz.questions.push(fillInBlankQuestion),quiz.questions.push(multipleChoiceTextQuestion),quiz.questions.push(sequenceQuestion),quiz.questions.push(wordBankQuestion),quiz},quizService}]),function(){function ControllerController(SocialPostService){function loadMorePosts(){var body={limit:limitResults,skip:Math.ceil(vm.posts.length/limitResults)*limitResults};SocialPostService.query(body,function(results){vm.posts=vm.posts.concat(results)})}var vm=this,limitResults=30;vm.posts=[],vm.loadMorePosts=loadMorePosts,function(){SocialPostService.query({limit:limitResults,sort:"createdAt DESC",status:"public"},function(posts){vm.posts=posts})}()}angular.module("social-posts").controller("ListSocialPostsController",ControllerController),ControllerController.$inject=["SocialPostService"]}(),function(){function Controller(SocialPostService,$state,toastr,Authentication,$stateParams){function submit($valid){$valid&&create()}function create(){var _datas={title:vm.post.title||"No title",description:vm.post.description||"",author:Authentication.user.id,status:vm.post.status||"draft",ownership:$stateParams.team_id?"team":"individual",team:$stateParams.team_id||null,hashtags:vm.post.hashtags||[],logs:["Created at "+(new Date).toString()],items:[],notes:[],tasks:[]};SocialPostService.save(_datas,function(res){toastr.success("Done create post","Successfully"),$state.go("social-posts-manage.edit",{post_id:res.id})})}var vm=this;vm.submit=submit}angular.module("social-posts").controller("SocialPostCreateController",Controller),Controller.$inject=["SocialPostService","$state","toastr","Authentication","$stateParams"]}(),function(){function Controller(SocialPostService,$uibModal,$state,toastr,Authentication,Utilities,$stateParams,$scope,ApplicationModals){function submit($valid){$valid&&update(vm.post).then(function(){toastr.success("Done update post","Successfully")})}function saveChange(){update(vm.post).then(function(updatedPost){toastr.success("Done update post","Successfully")})}function updateNotes(notes){notes&&(vm.post.notes=notes,update(vm.post))}function updateTodos(todos){todos&&(vm.post.todos=todos,update(vm.post))}function update(post){if(!post.id)throw new Error("Update post required object ID.");post.logs||(post.logs=[]),post.logs.push("Updated at "+(new Date).toString()+"by "+Authentication.user.username);var _datas={id:post.id,title:post.title||"No title",description:post.description||"",author:Authentication.user.id,status:post.status||"draft",hashtags:post.hashtags||[],image:post.image||{},logs:post.logs||[],todos:post.todos||[],notes:post.notes||[],items:post.items||[]};return SocialPostService.update(_datas).$promise.then(function(updatedPost){return vm.post.slug=updatedPost.slug,updatedPost})}function editPostItem(item,type){switch(type){case"quiz":openQuizModal(item);break;case"article":openPostModal(item);break;case"questions":openQuestionsModal(item);break;default:throw new Error("Do not support type "+type)}}function openQuizModal(quiz){$uibModal.open({templateUrl:"modules/social-posts/client/views/sociss-quiz.client.modal.view.html",controller:"SocissQuizModalController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{quiz:quiz}}}}).result.then(function(quiz){if(quiz){if(vm.post.items=vm.post.items||[],quiz.id){for(var i=0;i<vm.post.items;i++)if(vm.post.items[i].id===quiz.id){vm.post.items[i]=quiz;break}}else quiz.id=Utilities.generateUUID(),quiz.author_username=Authentication.user.username,quiz.type="quiz",vm.post.items.push(quiz);update(vm.post)}})}function openQuestionsModal(question){$uibModal.open({templateUrl:"modules/social-posts/client/views/sociss-questions.client.modal.view.html",controller:"SocissQuestionsController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{question:question}}}}).result.then(function(question){if(question){if(vm.post.items=vm.post.items||[],question.id){for(var i=0;i<vm.post.items;i++)if(vm.post.items[i].id===question.id){vm.post.items[i]=question;break}}else question.id=Utilities.generateUUID(),question.author_username=Authentication.user.username,question.type="questions",vm.post.items.push(question);update(vm.post)}})}function openPostModal(post){$uibModal.open({templateUrl:"modules/social-posts/client/views/series-posts-modal.client.view.html",controller:"SocialPostsModalController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{post:post}}}}).result.then(function(post){if(post){if(vm.post.items=vm.post.items||[],post.id){for(var i=0;i<vm.post.items;i++)if(vm.post.items[i].id===post.id){vm.post.items[i].content=post.content,vm.post.items[i].title=post.title,vm.post.items[i].type="article";break}}else post.id=Utilities.generateUUID(),post.author_username=Authentication.user.username,post.type="article",vm.post.items.push(post);update(vm.post)}})}function changeImage(){ApplicationModals.openSingleImageUploadModal().result.then(function(_image){_image&&(vm.post.image=_image,update(vm.post).then(function(){toastr.success("Done update post image.","Successfully")}))})}var vm=this,post_id=$stateParams.post_id;vm.editPostItem=editPostItem,vm.submit=submit,vm.updateNotes=updateNotes,vm.updateTodos=updateTodos,vm.saveChange=saveChange,vm.changeImage=changeImage,function(){post_id&&SocialPostService.get({id:post_id},function(post){vm.post=post,vm.post.items||(vm.post.items=[]),vm.itemsDragularOptions={scope:$scope,revertOnSpill:!0,containersModel:[vm.post.items]}})}(),$scope.$on("dragulardrop",function(){update(vm.post)})}angular.module("social-posts").controller("SocialPostEditController",Controller),Controller.$inject=["SocialPostService","$uibModal","$state","toastr","Authentication","Utilities","$stateParams","$scope","ApplicationModals"]}(),function(){function Controller(SocialPostService,Authentication){var vm=this;!function(){SocialPostService.query({author:Authentication.user.id},function(posts){vm.posts=posts})}()}angular.module("social-posts").controller("SocialPostListController",Controller),Controller.$inject=["SocialPostService","Authentication"]}(),function(){function Controller($scope,ModalItems){function submit($valid){$valid&&$scope.$close(vm.post)}var vm=this;vm.post=ModalItems.post||{title:"",content:""},vm.submit=submit}angular.module("social-posts").controller("SocialPostsModalController",Controller),Controller.$inject=["$scope","ModalItems"]}(),function(){function Controller(ResourceTrackingService,$window,SocialPostService,toastr){function incrementViewPostCount(postId,info){ResourceTrackingService.save({action:"view_resource",resource_id:postId,resource_name:"social_posts",info:info})}function onUserAnswerQuestions(questionAnswer){questionAnswer&&(questionAnswer.post_id=$window.post_id,SocialPostService.savePostAnswer(questionAnswer,function(){toastr.success("Cảm ơn bạn đã trả lời câu hỏi.","Successfully")}))}this.onUserAnswerQuestions=onUserAnswerQuestions,function(){$window.post_id&&incrementViewPostCount($window.post_id,{name:$window.post_name,slug:$window.post_slug})}()}angular.module("social-posts").controller("SocialPostController",Controller),Controller.$inject=["ResourceTrackingService","$window","SocialPostService","toastr"]}(),function(){function Controller(Authentication){function selectOption(option){var pollAnswer={option_id:option.id,option_title:option.title,author:Authentication.user.id||Authentication.randomSessionId,author_name:vm.authorName||"No name",author_email:vm.authorEmail||"",comments:vm.comments||"",created_at:new Date};vm.onUserAnswer({pollAnswer:pollAnswer})}var vm=this;vm.selectOption=selectOption}angular.module("social-posts").component("socissPollBox",function(){return{templateUrl:"modules/social-posts/client/views/sociss-poll.component.view.html",controller:Controller,controllerAs:"vm",bindings:{poll:"=",onUserAnswer:"&"}}}()),Controller.$inject=["Authentication"]}(),function(){function Controller($scope,ModalItems,Utilities){function submit($valid){$valid&&$scope.$close(vm.poll)}function addNewOptionItem(){vm.poll.options||(vm.poll.options=[]),vm.question.questions.push({id:Utilities.generateUUID(),content:"",answers:[]})}function removeOptionItem(option){var index=vm.poll.options.findIndex(function(item){return item.id===option.id});confirm("Are you sure ? \nDelete selected option. !!")&&-1!==index&&vm.poll.options.splice(index,1)}var vm=this;vm.poll=ModalItems.poll,vm.addNewOptionItem=addNewOptionItem,vm.removeOptionItem=removeOptionItem,vm.submit=submit,function(){vm.poll||(vm.poll={title:"",description:"",content:"",options:[]})}()}angular.module("social-posts").controller("SocissPollModalController",Controller),Controller.$inject=["$scope","ModalItems","Utilities"]}(),function(){function Controller(Authentication,_){function submit(){for(var questionAnswer={question_id:_.get(vm.question,"id"),author:_.get(Authentication,"user.id",Authentication.randomSessionId),author_name:vm.authorName||"No name",author_email:vm.authorEmail||"",created_at:new Date,answers:[]},i=0;i<vm.question.questions.length;i++){var q=vm.question.questions[i];questionAnswer.answers.push({question_id:_.get(q,"id"),question_title:_.get(q,"title","No title"),question_content:_.get(q,"content",""),answer:_.get(q,"answer","")})}vm.onUserAnswer({questionAnswer:questionAnswer}),vm.showQuestions=!1}var vm=this;vm.showQuestions=!0,vm.submit=submit}angular.module("social-posts").component("socissQuestionsBox",function(){return{templateUrl:"modules/social-posts/client/views/sociss-questions-box.component.view.html",controller:Controller,controllerAs:"vm",bindings:{question:"=",onUserAnswer:"&"}}}()),Controller.$inject=["Authentication","_"]}(),function(){function Controller($scope,ModalItems,Utilities){function submit($valid){$valid&&$scope.$close(vm.question)}function addNewQuestionItem(){vm.question.questions||(vm.question.questions=[]),vm.question.questions.push({id:Utilities.generateUUID(),title:"",content:""})}function removeQuestionItem(question){var index=vm.question.questions.findIndex(function(item){return item.id===question.id});confirm("Are you sure ? \nDelete selected question. !!")&&-1!==index&&vm.question.questions.splice(index,1)}var vm=this;vm.question=ModalItems.question,vm.addNewQuestionItem=addNewQuestionItem,vm.removeQuestionItem=removeQuestionItem,vm.submit=submit,function(){vm.question||(vm.question={title:"",description:"",questions:[]})}()}angular.module("social-posts").controller("SocissQuestionsController",Controller),Controller.$inject=["$scope","ModalItems","Utilities"]}(),function(){function Controller(){function doEvaluatingQuiz(){vm.isShowEvaluatePane=!0}function reDoEvaluatingQuiz(){vm.isShowEvaluatePane=!1}var vm=this;vm.doEvaluatingQuiz=doEvaluatingQuiz,vm.reDoEvaluatingQuiz=reDoEvaluatingQuiz,vm.isShowEvaluatePane=!1}angular.module("social-posts").component("socissQuizBox",function(){return{templateUrl:"modules/social-posts/client/views/sociss-quiz-box.component.view.html",controller:Controller,controllerAs:"vm",bindings:{quiz:"="}}}()),Controller.$inject=[]}(),function(){function Controller($scope,ModalItems,QuestionService,QuizService){function prepareCreateNewQuiz(){vm.quiz=QuizService.getQuizInstance()}function quizFormSubmit($valid){$valid&&$scope.$close(vm.quiz)}function removeQuestion(question){var index=vm.quiz.questions.findIndex(function(item){return item.id===question.id});confirm("Are you sure ? \nDelete selected question. !!")&&-1!==index&&vm.quiz.questions.splice(index,1)}function addNewQuestion(questionType){var newQuestion=QuestionService.getQuestionByType(questionType.type);newQuestion&&vm.quiz.questions.push(newQuestion)}var vm=this;vm.quiz=ModalItems.quiz,vm.addNewQuestion=addNewQuestion,vm.quizFormSubmit=quizFormSubmit,$scope.removeQuestion=removeQuestion,function(){vm.questionTypes=QuestionService.getAllQuestionType(),vm.quiz||prepareCreateNewQuiz()}()}angular.module("social-posts").controller("SocissQuizModalController",Controller),Controller.$inject=["$scope","ModalItems","QuestionService","QuizService"]}(),function(){function Controller($scope,ModalItems,Authentication){function submit($valid){$valid&&$scope.$close(vm.note)}var vm=this;vm.colors=[{name:"yellow",color:"#ffd694"},{name:"blue",color:"#5ad3f7"},{name:"green",color:"#0fbb6c"},{name:"gray",color:"#dddddd"},{name:"purple",color:"#f59fff"},{name:"orange",color:"#f37a12"}],vm.submit=submit,vm.note=ModalItems.note||{title:"",content:"",hashtags:[],author:Authentication.user.id,username:Authentication.user.username}}angular.module("social-posts").controller("StickyNoteModalController",Controller),Controller.$inject=["$scope","ModalItems","Authentication"]}(),function(){function Controller(SocialPostService,toastr,Utilities,$uibModal,Authentication){function openNoteCreateOrUpdateModal(note){$uibModal.open({templateUrl:"modules/social-posts/client/views/sticky-notes-modal.client.view.html",controller:"StickyNoteModalController",controllerAs:"vm",size:"lg",resolve:{ModalItems:function(){return{note:note}}}}).result.then(function(note){if(note){if(note.id){for(var i=0;i<vm.notes;i++)if(vm.notes[i].id===note.id){vm.notes[i].content=note.content,vm.notes[i].title=note.title;break}}else note.id=Utilities.generateUUID(),vm.notes.push(note);update()}})}function createNewNote($valid){if($valid){var newNote={id:Utilities.generateUUID(),title:vm.note.title,content:vm.note.content,author:Authentication.user.id,color:vm.note.color,status:vm.note.status};vm.notes||(vm.notes=[]),vm.notes.push(newNote),vm.note.title="",vm.note.content="",update()}}function update(){vm.onUpdate({notes:vm.notes})}var vm=this;vm.colors=[{name:"yellow",color:"#ffd694"},{name:"blue",color:"#5ad3f7"},{name:"green",color:"#0fbb6c"},{name:"gray",color:"#dddddd"},{name:"purple",color:"#f59fff"},{name:"orange",color:"#f37a12"}],vm.createNewNote=createNewNote,vm.openNoteCreateOrUpdateModal=openNoteCreateOrUpdateModal}angular.module("social-posts").component("socissNotes",function(){return{templateUrl:"modules/social-posts/client/views/sticky-notes.client.view.html",controller:Controller,controllerAs:"vm",bindings:{notes:"=",onUpdate:"&"}}}()),Controller.$inject=["SocialPostService","toastr","Utilities","$uibModal","Authentication"]}(),function(){function Controller($scope,Utilities){function addNewTodo(title,description){title&&(vm.todos=vm.todos||[],vm.todos.push({id:Utilities.generateUUID(),title:title,description:description||"",done:!1}))}function addSubtask(todo,subtask){todo&&(todo.tasks=todo.tasks||[],todo.tasks.push({id:Utilities.generateUUID(),name:subtask,done:!1}))}function removeItem(collection,idFieldName,itemId){if(collection&&itemId){var index=collection.findIndex(function(item){return item[idFieldName]===itemId});-1!==index&&collection.splice(index,1)}}var vm=this;vm.todos=vm.todos||[],vm.addNewTodo=addNewTodo,vm.addSubtask=addSubtask,vm.removeItem=removeItem;var watchTodos=$scope.$watch("vm.todos",function(oldValue,newValue){newValue&&(vm.todos.forEach(function(todo){todo.nTaskDone=0,todo.tasks=todo.tasks||[],todo.tasks.forEach(function(task){task.done&&todo.nTaskDone++})}),vm.onUpdate({todos:vm.todos}))},!0);$scope.$on("$destroy",function(){watchTodos()})}angular.module("social-posts").component("todosBox",function(){return{templateUrl:"modules/social-posts/client/views/todos-box.client.view.html",controller:Controller,controllerAs:"vm",bindings:{todos:"=",onUpdate:"&"}}}()),Controller.$inject=["$scope","Utilities"]}(),function(){function Controller(SocialPostService){var vm=this;!function(){SocialPostService.getTopSocialPosts(function(posts){vm.posts=posts})}()}angular.module("social-posts").component("topSocialPostsBox",function(){return{templateUrl:"modules/social-posts/client/views/top-social-posts-box.client.view.html",controller:Controller,controllerAs:"vm"}}()),Controller.$inject=["SocialPostService"]}(),function(){function RoutesConfigs($stateProvider){$stateProvider.state("posts",{url:"/posts",templateUrl:"modules/social-posts/client/views/list-social-posts.client.view.html",controller:"ListSocialPostsController",controllerAs:"vm"}).state("social-posts-manage",{parent:"profile",url:"/posts",views:{"main@profile":{templateUrl:"modules/social-posts/client/views/social-post-list.client.view.html"}},data:{displayName:"Post Management"}}).state("social-posts-manage.create",{url:"/create?team_id",views:{"main@profile":{templateUrl:"modules/social-posts/client/views/social-posts-create.client.view.html"}},data:{displayName:"Post Creation"}}).state("social-posts-manage.edit",{url:"/:post_id",views:{"main@profile":{templateUrl:"modules/social-posts/client/views/social-post-edit.client.view.html"}},data:{displayName:"Post Edition"}})}angular.module("social-posts").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/socialposts/:id",{id:"@id"},{update:{method:"PUT"},getTopSocialPosts:{method:"GET",url:$rootScope.socissAPI+"/socialposts/top",isArray:!0},savePostAnswer:{method:"POST",url:$rootScope.socissAPI+"/socialposts/post-answer"}})}angular.module("social-posts").factory("SocialPostService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function RoutesConfigs($stateProvider){$stateProvider.state("team-management",{parent:"profile",url:"/teams",views:{"main@profile":{templateUrl:"modules/team/client/views/team-management.client.view.html"}},data:{displayName:"Team Management"}}).state("team-management.create",{url:"/create",views:{"main@profile":{templateUrl:"modules/team/client/views/team-create.client.view.html"}},data:{displayName:"Team Creation"}}).state("team-management.edit",{url:"/:team_id",views:{"main@profile":{templateUrl:"modules/team/client/views/team-edit.client.view.html"}},data:{displayName:"Team Edition"}})}angular.module("team").config(RoutesConfigs),RoutesConfigs.$inject=["$stateProvider"]}(),function(){function Controller(TeamService,$state,Authentication,toastr,_){function createTeamFormSubmit($valid){$valid&&createNewTeam(vm.team).then(function(team){$state.go("team-management.edit",{team_id:team.id||team._id})}).catch(function(err){toastr.error(_.get(err,"data.message","Something error.","Error"))})}function createNewTeam(_team){if(!_team)throw new Error("team data is undefined.");return TeamService.save({name:_team.name,code:_team.code,author:_team.author}).$promise}var vm=this;vm.team={name:"",code:"",author:Authentication.user.id},vm.createTeamFormSubmit=createTeamFormSubmit}angular.module("team").controller("TeamCreateController",Controller),Controller.$inject=["TeamService","$state","Authentication","toastr","_"]}(),function(){function Controller(TeamService,toastr,$stateParams,UserService){function addMemberToTeam(userId){if(userId){if(userId=userId.toString().trim(),isExistInTeam(userId))return void toastr.error("This user already exist in team.","Already Joined !");UserService.getByUsername({id:userId},function(user){vm.team.members.push({id:user.user_id,username:user.username,full_name:user.full_name,roles:["member"]}),updateTeam(vm.team)},function(err){toastr.error("Sorry, we can not found user.","Not Found User")})}}function removeMember(memberId){if(window.confirm("Are you sure you want to delete member ?")){var index=vm.team.members.findIndex(function(item){return item.id===memberId});-1!==index&&(vm.team.members.splice(index,1),updateTeam(vm.team))}}function isExistInTeam(userId){for(var i=0;i<vm.team.members.length;i++){var u=vm.team.members[i];if(u.username===userId||u.id===userId)return!0}return!1}function loadTeamInformation(){TeamService.get({id:$stateParams.team_id},function(team){vm.team=team})}function loadTeamPosts(){TeamService.getTeamPosts({team_id:$stateParams.team_id},function(posts){vm.posts=posts})}function updateTeamFormSubmit($valid){$valid&&updateTeam(vm.team).then(function(team){toastr.success("Done update team","Successfully")})}function updateTeam(_team){if(!_team)throw new Error("team data is undefined.");return TeamService.update({id:_team.id||_team._id,name:_team.name||"",profile:_team.profile||"",members:_team.members||[]}).$promise}var vm=this;vm.updateTeamFormSubmit=updateTeamFormSubmit,vm.addMemberToTeam=addMemberToTeam,vm.removeMember=removeMember,function(){loadTeamInformation(),loadTeamPosts()}()}angular.module("team").controller("TeamEditController",Controller),Controller.$inject=["TeamService","toastr","$stateParams","UserService"]}(),function(){function Controller(TeamService,Authentication){var vm=this;!function(){TeamService.getUserJoinedTeams({user_id:Authentication.user.id},function(teams){vm.teams=teams})}()}angular.module("team").controller("TeamManagementController",Controller),Controller.$inject=["TeamService","Authentication"]}(),function(){function Service($resource,$rootScope){var base=$rootScope.socissAPI;return $resource(base+"/team/:id",{id:"@id"},{update:{method:"PUT"},getUserJoinedTeams:{method:"GET",url:base+"/team/joined/:user_id",isArray:!0},getTeamPosts:{method:"GET",url:base+"/team/:team_id/posts",isArray:!0}})}angular.module("team").factory("TeamService",Service),Service.$inject=["$resource","$rootScope"]}(),function(){function profileConfigs($stateProvider){$stateProvider.state("profile",{url:"/profile",views:{"@":{
templateUrl:"modules/user/client/views/settings/profile.client.view.html",controller:"UserProfileController"},"sidebar@profile":{templateUrl:"modules/user/client/views/settings/profile-sidebar.client.tmp.html"},"main@profile":{templateUrl:"modules/user/client/views/settings/user-profile.client.view.html",controller:"UserProfileController",controllerAs:"vm"},"notifications@profile":{templateUrl:"modules/core/client/views/notification.client.view.html",controller:"NotificationController",controllerAs:"vm"},"messages@profile":{templateUrl:"modules/core/client/views/messages/messages.client.view.html",controller:"MessageController",controllerAs:"vm"},"settings@profile":{templateUrl:"modules/user/client/views/settings/user-settings.client.view.html"},"accesscodes@profile":{templateUrl:"modules/user/client/views/settings/user-access-code-manage.client.view.html"}},data:{displayName:"User Dashboard"}}).state("profile.gallery",{url:"/gallery",views:{"main@profile":{controller:"GalleryController",controllerAs:"vm",templateUrl:"modules/core/client/views/gallerys/gallery.client.view.tmpl.html"}},resolve:{images:getUserImages},data:{displayName:"Gallery"}}).state("profile.share-with-me",{url:"/share-with-me",views:{"main@profile":{controller:"ShareWithMeController",controllerAs:"vm",templateUrl:"modules/core/client/views/share-with-me.client.view.html"}},data:{displayName:"Share with me"}}).state("profile.image-upload",{url:"/gallery/uploads",views:{"main@profile":{controller:"ImagesUploadController",templateUrl:"modules/core/client/views/images-upload.client.view.html"}},data:{displayName:"Upload Images"}})}function getUserImages(ImageService,Authentication){var body={author:Authentication.user.id,limit:0};return ImageService.query(body)}angular.module("user").config(profileConfigs),profileConfigs.$inject=["$stateProvider"],getUserImages.$inject=["ImageService","Authentication"]}(),angular.module("user").run(["Menus",function(Menus){Menus.addMenu("profile",{title:"Profile Management",state:"profile"}),Menus.addMenuItem("profile",{title:"Course Management",state:"profile.courses",icon:"fa fa-book",roles:["*"]}),Menus.addMenuItem("profile",{title:"Gallerys",state:"profile.gallery",icon:"fa fa-picture-o"}),Menus.addMenuItem("profile",{title:"Access Code",state:"profile.accessCode",icon:"fa fa-id-card-o"}),Menus.addMenuItem("profile",{title:"Share",state:"profile.shares",icon:"fa fa-share-alt"}),Menus.addSubMenuItem("profile","profile.accessCode",{title:"My Access Code",state:"profile.accessCode",roles:["*"]}),Menus.addSubMenuItem("profile","profile.courses",{title:"My Course",state:"profile.courses",roles:["*"]}),Menus.addSubMenuItem("profile","profile.gallery",{title:"My Gallerys",state:"profile.gallery"}),Menus.addSubMenuItem("profile","profile.gallery",{title:"Upload Images",state:"profile.image-upload"}),Menus.addSubMenuItem("profile","profile.shares",{title:"Share with me",state:"profile.share-with-me"}),Menus.addSubMenuItem("profile","profile.shares",{title:"Social Post",state:"social-posts-manage"}),Menus.addSubMenuItem("profile","profile.shares",{title:"Teamwork",state:"team-management"})}]),angular.module("user").config(["$stateProvider",function($stateProvider){}]),angular.module("user").controller("UserAuthenticationController",["$scope","$http","Authentication","$state",function($scope,$http,Authentication,$state){$scope.authentication=Authentication,$scope.authentication.user&&$state.go("home"),$scope.signUp=function(isValid){if($scope.error=null,!isValid)return!1;$http.post("/api/user/signup",$scope.credentials).then(function(){$state.go("user.view")},function(response){$scope.error=response.message})},$scope.signIn=function(isValid){if($scope.error=null,!isValid)return!1;$http.post("/api/user/signin",$scope.credentials).then(function(){$state.go("user.view")},function(response){$scope.error=response.message})}}]),function(){function ControllerController($scope,ModalItems){function submitForm($valid){$valid&&$scope.$close(vm.education)}function addInformation(information){information&&information.length&&vm.education.informations.push(information)}var vm=this;vm.education={title:"",description:"",start:"",end:"",informations:[]},vm.addInformation=addInformation,vm.submitForm=submitForm,function(){ModalItems.education&&(vm.education=ModalItems.education),vm.education.informations||(vm.education.informations=[])}()}angular.module("user").controller("EducationFormModalCtrl",ControllerController),ControllerController.$inject=["$scope","ModalItems"]}(),function(){function ControllerController($scope,ModalItems){function submitForm($valid){$valid&&$scope.$close(vm.experience)}function addInformation(information){information&&information.length&&vm.experience.informations.push(information)}var vm=this;vm.experience={title:"",description:"",start:"",end:"",informations:[]},vm.addInformation=addInformation,vm.submitForm=submitForm,function(){ModalItems.experience&&(vm.experience=ModalItems.experience),vm.experience.informations||(vm.experience.informations=[])}()}angular.module("user").controller("PrefessionalExperienceModalCtrl",ControllerController),ControllerController.$inject=["$scope","ModalItems"]}(),function(){function ControllerController($scope,ModalItems){function submitForm($valid){$valid&&$scope.$close(vm.skill)}function addInformation(information){information&&information.length&&vm.skill.informations.push(information)}var vm=this;vm.skill={title:"",description:"",start:"",end:"",informations:[]},vm.addInformation=addInformation,vm.submitForm=submitForm,function(){ModalItems.skill&&(vm.skill=ModalItems.skill),vm.skill.informations||(vm.skill.informations=[])}()}angular.module("user").controller("UserSkillsModalCtrl",ControllerController),ControllerController.$inject=["$scope","ModalItems"]}(),function(){function ControllerController($rootScope,$scope,Authentication,Menus,CourseService,UserService,toastr,ApplicationModals,$uibModal){function initProfilePage(){loadAllUserJoinedCourse(),Authentication.getUserProfile().then(function(user){vm.user=user})}function loadAllUserJoinedCourse(){return CourseService.getAllUserJoinedCourse(function(_accessCodes){return vm.accessCodes=_accessCodes,_accessCodes})}function submitUserProfileForm($valid){if(!$valid)return!1;var _user={id:vm.user.id,email:vm.user.email,fullName:vm.user.fullName,aboutMe:vm.user.aboutMe,educations:vm.user.educations,experience:vm.user.experience,skills:vm.user.skills,contact:vm.user.contact,official:vm.user.official,profile:vm.user.profile};return UserService.update(_user,function(response){return vm.user=response,toastr.success("Update profile user completed.","Successfully"),response}).$promise}function changeProfilePhoto(){var _promise=ApplicationModals.openImageUploadModal();return _promise.result.then(function(_image){if(_image){var _user={id:Authentication.user.id,profileImage:_image};return UserService.update(_user,function(response){return vm.user=response,Authentication.user.profileImage=response.profileImage,toastr.success("Update profile image completed.","Successfully"),response}).$promise}}),_promise}function openEducationItemModal(education){$uibModal.open({templateUrl:"modules/user/client/views/settings/education-form.modal.client.view.html",controller:"EducationFormModalCtrl",controllerAs:"vm",resolve:{ModalItems:function(){return{education:education}}}}).result.then(function(education){education&&(vm.user.educations||(vm.user.educations=[]),vm.user.educations.push(education))})}function openUserSkillItemModal(skill){$uibModal.open({templateUrl:"modules/user/client/views/settings/user-skill-form.modal.client.view.html",controller:"UserSkillsModalCtrl",controllerAs:"vm",resolve:{ModalItems:function(){return{skill:skill}}}}).result.then(function(skill){skill&&(vm.user.skills||(vm.user.skills=[]),vm.user.skills.push(skill))})}function openUserExperienceItemModal(experience){$uibModal.open({templateUrl:"modules/user/client/views/settings/professional-exprience-form.modal.client.view.html",controller:"PrefessionalExperienceModalCtrl",controllerAs:"vm",resolve:{ModalItems:function(){return{experience:experience}}}}).result.then(function(experience){experience&&(vm.user.experience||(vm.user.experience=[]),vm.user.experience.push(experience))})}var vm=this;$scope.authentication=Authentication,$scope.menu=Menus.getMenu("profile"),vm.initProfilePage=initProfilePage,vm.submitUserProfileForm=submitUserProfileForm,vm.changeProfilePhoto=changeProfilePhoto,vm.openEducationItemModal=openEducationItemModal,vm.openUserExperienceItemModal=openUserExperienceItemModal,vm.openUserSkillItemModal=openUserSkillItemModal}angular.module("user").controller("UserProfileController",ControllerController),ControllerController.$inject=["$rootScope","$scope","Authentication","Menus","CourseService","UserService","toastr","ApplicationModals","$uibModal"]}(),function(){function Controller($scope,_){function initUserDetailPage(){var _userResolve=_.get($scope,"$resolve.UserResolve");if(!_userResolve)throw new Error("User not found !.");vm.user=_userResolve}var vm=this;vm.initUserDetailPage=initUserDetailPage}angular.module("user").controller("UserController",Controller),Controller.$inject=["$scope","_"]}(),function(){function Service($resource,$rootScope){return $resource($rootScope.socissAPI+"/user/:id",{id:"@id"},{update:{method:"PUT"},getByUsername:{url:$rootScope.socissAPI+"/api/user/:id",method:"POST"}})}angular.module("user").factory("UserService",Service),Service.$inject=["$resource","$rootScope"]}();